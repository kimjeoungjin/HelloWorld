<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Server_Use_OTA_ServiceManager\Objects\BLE_SerialPort_Server_Use_OTA_ServiceManager.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Server_Use_OTA_ServiceManager\Objects\BLE_SerialPort_Server_Use_OTA_ServiceManager.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Jan 03 15:24:20 2023
<BR><P>
<H3>Maximum Stack Usage =       2552 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
RESET_HANDLER &rArr; main &rArr; ModulesTick &rArr; NVMDB_Tick &rArr; NVMDB_CleanDB &rArr; CleanLargeDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[240]">ACL_list_get_pckt_count</a>
 <LI><a href="#[238]">ACL_list_init</a>
 <LI><a href="#[44c]">ACL_list_insert_head</a>
 <LI><a href="#[23f]">ACL_list_insert_tail</a>
 <LI><a href="#[234]">ACL_list_remove</a>
 <LI><a href="#[241]">ACL_list_remove_head</a>
 <LI><a href="#[42]">ADV_ISR</a>
 <LI><a href="#[41]">ADV_cancelslot</a>
 <LI><a href="#[43]">ADV_createslot</a>
 <LI><a href="#[44]">ADV_skiproutine</a>
 <LI><a href="#[319]">Acl_Init</a>
 <LI><a href="#[125]">Acl_Rcv_Pkt_Handler</a>
 <LI><a href="#[128]">Acl_Transmit_Data</a>
 <LI><a href="#[12a]">Acl_Tx_Cmpl_Pkt_Handler</a>
 <LI><a href="#[166]">BLEPLAT_aes128_encrypt</a>
 <LI><a href="#[169]">BLE_STACK_Init</a>
 <LI><a href="#[16d]">BLE_STACK_RadioHandler</a>
 <LI><a href="#[41c]">BLE_STACK_ReadNextRadioActivity</a>
 <LI><a href="#[179]">BLE_STACK_Tick</a>
 <LI><a href="#[199]">BleNvm_DEV_ID_DATA_AddRecord</a>
 <LI><a href="#[19a]">BleNvm_DEV_ID_DATA_GetRecord</a>
 <LI><a href="#[19b]">BleNvm_GATT_GetData</a>
 <LI><a href="#[19e]">BleNvm_GATT_UpdateData</a>
 <LI><a href="#[1a0]">BleNvm_SEC_AddRecord</a>
 <LI><a href="#[1a2]">BleNvm_SEC_Dump</a>
 <LI><a href="#[42d]">BleNvm_SEC_DumpInit</a>
 <LI><a href="#[1a1]">BleNvm_SEC_GetRecord</a>
 <LI><a href="#[1a4]">BleNvm_SEC_GetRecordNumber</a>
 <LI><a href="#[1a5]">BleNvm_SEC_RemoveRecord</a>
 <LI><a href="#[20e]">CST_init</a>
 <LI><a href="#[1b3]">CST_start</a>
 <LI><a href="#[1b5]">CST_stop</a>
 <LI><a href="#[61]">Controller_Process_Q</a>
 <LI><a href="#[305]">Data_Len_Update_Offline_Processing_ucfg</a>
 <LI><a href="#[546]">Data_Len_Update_Offline_Processing_ucfg_weak</a>
 <LI><a href="#[2c]">EADV_Offline_Callback</a>
 <LI><a href="#[1d0]">EADV_init</a>
 <LI><a href="#[110]">EADV_vPrepareAdvOrRspLegacyPacket</a>
 <LI><a href="#[4b]">Events_Process_Q</a>
 <LI><a href="#[1ad]">Events_Process_init</a>
 <LI><a href="#[4ad]">GAP_DiscProcTimeoutcb_ucfg</a>
 <LI><a href="#[547]">GAP_DiscProcTimeoutcb_ucfg_weak</a>
 <LI><a href="#[1eb]">GAP_Init</a>
 <LI><a href="#[1f4]">GAP_LimDiscTimeoutcb</a>
 <LI><a href="#[1f6]">GAP_PrivateAddrTimercb</a>
 <LI><a href="#[1fb]">GAP_Terminate_Link</a>
 <LI><a href="#[21b]">GAP_advEvtProp_to_advType</a>
 <LI><a href="#[1f7]">GAP_check_adv_status</a>
 <LI><a href="#[1ed]">GAP_check_and_set_role_ucfg</a>
 <LI><a href="#[548]">GAP_check_and_set_role_ucfg_weak</a>
 <LI><a href="#[491]">GAP_check_discoverability_mode</a>
 <LI><a href="#[1fe]">GAP_check_flags</a>
 <LI><a href="#[210]">GAP_discover_peer_name_ucfg</a>
 <LI><a href="#[549]">GAP_discover_peer_name_ucfg_weak</a>
 <LI><a href="#[1ee]">GAP_enable_controller_privacy_ucfg</a>
 <LI><a href="#[54a]">GAP_enable_controller_privacy_ucfg_weak</a>
 <LI><a href="#[1f9]">GAP_enable_disable_scan_ucfg</a>
 <LI><a href="#[54b]">GAP_enable_disable_scan_ucfg_weak</a>
 <LI><a href="#[201]">GAP_generate_new_rpa</a>
 <LI><a href="#[202]">GAP_get_current_address</a>
 <LI><a href="#[207]">GAP_get_identity_address_type</a>
 <LI><a href="#[204]">GAP_get_own_address_type</a>
 <LI><a href="#[206]">GAP_get_public_address</a>
 <LI><a href="#[203]">GAP_get_rpa</a>
 <LI><a href="#[205]">GAP_get_static_random_address</a>
 <LI><a href="#[4b5]">GAP_hci_disconnection_complete_evt_hndl</a>
 <LI><a href="#[208]">GAP_hci_le_advertising_report_evt_hndl</a>
 <LI><a href="#[4b8]">GAP_hci_le_advertising_set_terminated_evt_hndl_ucfg</a>
 <LI><a href="#[54c]">GAP_hci_le_advertising_set_terminated_evt_hndl_ucfg_weak</a>
 <LI><a href="#[20b]">GAP_hci_le_connection_complete_evt_hndl</a>
 <LI><a href="#[1b1]">GAP_init_context</a>
 <LI><a href="#[20d]">GAP_master_connection_complete_handler_ucfg</a>
 <LI><a href="#[54d]">GAP_master_connection_complete_handler_ucfg_weak</a>
 <LI><a href="#[50]">GAP_name_disc_proc_connected_check</a>
 <LI><a href="#[20a]">GAP_parse_advertising_report_ucfg</a>
 <LI><a href="#[54e]">GAP_parse_advertising_report_ucfg_weak</a>
 <LI><a href="#[209]">GAP_parse_connectable_advertising_report_ucfg</a>
 <LI><a href="#[54f]">GAP_parse_connectable_advertising_report_ucfg_weak</a>
 <LI><a href="#[1ff]">GAP_search_flags_index</a>
 <LI><a href="#[492]">GAP_set_advertising_configuration_ucfg</a>
 <LI><a href="#[212]">GAP_set_advertising_configuration_ucfg_weak</a>
 <LI><a href="#[493]">GAP_set_advertising_data_ucfg</a>
 <LI><a href="#[214]">GAP_set_advertising_data_ucfg_weak</a>
 <LI><a href="#[1f5]">GAP_set_advertising_enable_ucfg</a>
 <LI><a href="#[216]">GAP_set_advertising_enable_ucfg_weak</a>
 <LI><a href="#[1f3]">GAP_set_controller_random_address_ucfg</a>
 <LI><a href="#[218]">GAP_set_controller_random_address_ucfg_weak</a>
 <LI><a href="#[213]">GAP_set_legacy_advertising_configuration</a>
 <LI><a href="#[215]">GAP_set_legacy_advertising_data</a>
 <LI><a href="#[217]">GAP_set_legacy_advertising_enable</a>
 <LI><a href="#[20c]">GAP_slave_connection_complete_handler_ucfg</a>
 <LI><a href="#[21f]">GAP_slave_connection_complete_handler_ucfg_weak</a>
 <LI><a href="#[1fa]">GAP_suspend_resume_active_advertising_sets_ucfg</a>
 <LI><a href="#[220]">GAP_suspend_resume_active_advertising_sets_ucfg_weak</a>
 <LI><a href="#[223]">GAT_att_clt_connection</a>
 <LI><a href="#[225]">GAT_att_clt_disconnection</a>
 <LI><a href="#[227]">GAT_att_clt_init</a>
 <LI><a href="#[229]">GAT_att_clt_rcv</a>
 <LI><a href="#[231]">GAT_att_cmn_connection</a>
 <LI><a href="#[233]">GAT_att_cmn_disconnection</a>
 <LI><a href="#[243]">GAT_att_cmn_for_each_conn_descr</a>
 <LI><a href="#[22a]">GAT_att_cmn_get_conn_descr_p</a>
 <LI><a href="#[237]">GAT_att_cmn_get_conn_index</a>
 <LI><a href="#[30]">GAT_att_cmn_handle_disconnec_iterate_f</a>
 <LI><a href="#[1b0]">GAT_att_cmn_init</a>
 <LI><a href="#[23a]">GAT_att_cmn_rcv</a>
 <LI><a href="#[23c]">GAT_att_cmn_send</a>
 <LI><a href="#[51]">GAT_att_cmn_send_pending_tsk</a>
 <LI><a href="#[22e]">GAT_att_cmn_start_timer</a>
 <LI><a href="#[22b]">GAT_att_cmn_stop_timer</a>
 <LI><a href="#[2f]">GAT_att_cmn_timeout_cb</a>
 <LI><a href="#[2e]">GAT_att_cmn_timeout_cb_wrapper</a>
 <LI><a href="#[52]">GAT_att_cmn_timer_expire_tsk</a>
 <LI><a href="#[53]">GAT_att_cmn_tx_pool_evt_tsk</a>
 <LI><a href="#[249]">GAT_att_db_find_by_def</a>
 <LI><a href="#[24a]">GAT_att_db_find_by_handle</a>
 <LI><a href="#[24b]">GAT_att_db_find_from_handle</a>
 <LI><a href="#[283]">GAT_att_db_find_last_attr_of_type</a>
 <LI><a href="#[24e]">GAT_att_db_get_last_group_handle</a>
 <LI><a href="#[254]">GAT_att_db_get_last_handle</a>
 <LI><a href="#[24f]">GAT_att_db_get_next</a>
 <LI><a href="#[250]">GAT_att_db_init</a>
 <LI><a href="#[251]">GAT_att_db_insert</a>
 <LI><a href="#[252]">GAT_att_db_reverse_find_attr_of_type</a>
 <LI><a href="#[253]">GAT_att_db_rm_att_range</a>
 <LI><a href="#[25b]">GAT_att_srv_confirmation_pending</a>
 <LI><a href="#[232]">GAT_att_srv_connection</a>
 <LI><a href="#[235]">GAT_att_srv_disconnection</a>
 <LI><a href="#[260]">GAT_att_srv_extract_write_packet_data</a>
 <LI><a href="#[26a]">GAT_att_srv_flush_user_pending_list</a>
 <LI><a href="#[26b]">GAT_att_srv_hvtx</a>
 <LI><a href="#[239]">GAT_att_srv_init</a>
 <LI><a href="#[54]">GAT_att_srv_process_rx_pckt_tsk</a>
 <LI><a href="#[23b]">GAT_att_srv_rcv</a>
 <LI><a href="#[295]">GAT_att_srv_request_user_pending</a>
 <LI><a href="#[275]">GAT_att_srv_resp</a>
 <LI><a href="#[224]">GAT_clt_connection</a>
 <LI><a href="#[226]">GAT_clt_disconnection</a>
 <LI><a href="#[228]">GAT_clt_init</a>
 <LI><a href="#[57]">GAT_clt_proc_exec_tsk</a>
 <LI><a href="#[22c]">GAT_clt_rcv_corrupted</a>
 <LI><a href="#[22f]">GAT_clt_rcv_srv_initiated</a>
 <LI><a href="#[27b]">GAT_srv_add_char_descriptor</a>
 <LI><a href="#[27f]">GAT_srv_add_characteristic</a>
 <LI><a href="#[282]">GAT_srv_add_service</a>
 <LI><a href="#[277]">GAT_srv_attr_value_read</a>
 <LI><a href="#[279]">GAT_srv_attr_value_write</a>
 <LI><a href="#[262]">GAT_srv_check_change_aware</a>
 <LI><a href="#[272]">GAT_srv_check_perms</a>
 <LI><a href="#[25c]">GAT_srv_connection</a>
 <LI><a href="#[55]">GAT_srv_db_hash_tsk</a>
 <LI><a href="#[25d]">GAT_srv_disconnection</a>
 <LI><a href="#[263]">GAT_srv_find_by_type_attr_p</a>
 <LI><a href="#[267]">GAT_srv_get_att_group_end_handle</a>
 <LI><a href="#[268]">GAT_srv_get_attr_type</a>
 <LI><a href="#[273]">GAT_srv_get_attr_value</a>
 <LI><a href="#[2a0]">GAT_srv_get_attribute_handle</a>
 <LI><a href="#[290]">GAT_srv_get_cccd_attr_p</a>
 <LI><a href="#[291]">GAT_srv_get_cccd_val</a>
 <LI><a href="#[2a1]">GAT_srv_get_char_decl_handle</a>
 <LI><a href="#[2a4]">GAT_srv_get_service_handle</a>
 <LI><a href="#[26c]">GAT_srv_init</a>
 <LI><a href="#[270]">GAT_srv_is_supported_grouping_type</a>
 <LI><a href="#[2a7]">GAT_srv_notify</a>
 <LI><a href="#[2a8]">GAT_srv_resp</a>
 <LI><a href="#[281]">GAT_srv_rm_characteristic</a>
 <LI><a href="#[284]">GAT_srv_rm_service</a>
 <LI><a href="#[56]">GAT_srv_send_srv_change_tsk</a>
 <LI><a href="#[4e7]">GapIsPrivacySupported</a>
 <LI><a href="#[2b1]">HAL_Generate_Random_Bytes_To</a>
 <LI><a href="#[2b6]">HAL_Set_TX_Power_Level</a>
 <LI><a href="#[2ca]">HAL_Write_ConfigData</a>
 <LI><a href="#[2d2]">HCI_Init</a>
 <LI><a href="#[2b2]">Hal_Get_Random_Number</a>
 <LI><a href="#[114]">Hal_Get_Random_Number32</a>
 <LI><a href="#[1ec]">IDD_Initialize_Device_IDs</a>
 <LI><a href="#[446]">Is_Address_Initialized</a>
 <LI><a href="#[1ae]">L2C_Init</a>
 <LI><a href="#[2df]">L2C_acl_cframe_signaling_hndl</a>
 <LI><a href="#[2e4]">L2C_build_command_reject_pdu</a>
 <LI><a href="#[2de]">L2C_cos_cfc_init_ucfg</a>
 <LI><a href="#[550]">L2C_cos_cfc_init_ucfg_weak</a>
 <LI><a href="#[2e1]">L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg</a>
 <LI><a href="#[551]">L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak</a>
 <LI><a href="#[2f0]">L2C_cos_le_frame_data_hndl_ucfg</a>
 <LI><a href="#[2e8]">L2C_cos_le_frame_data_hndl_ucfg_weak</a>
 <LI><a href="#[4f]">L2C_cos_perform_pdu_reassembly_tsk_ucfg</a>
 <LI><a href="#[552]">L2C_cos_perform_pdu_reassembly_tsk_ucfg_weak</a>
 <LI><a href="#[4d]">L2C_cos_perform_sdu_segmentation_tsk_ucfg</a>
 <LI><a href="#[553]">L2C_cos_perform_sdu_segmentation_tsk_ucfg_weak</a>
 <LI><a href="#[2ec]">L2C_cos_physical_link_disconnection_hndl_ucfg</a>
 <LI><a href="#[554]">L2C_cos_physical_link_disconnection_hndl_ucfg_weak</a>
 <LI><a href="#[2e2]">L2C_cos_process_cfc_mode_command_ucfg</a>
 <LI><a href="#[555]">L2C_cos_process_cfc_mode_command_ucfg_weak</a>
 <LI><a href="#[4c]">L2C_cos_process_pending_actions_tsk_ucfg</a>
 <LI><a href="#[556]">L2C_cos_process_pending_actions_tsk_ucfg_weak</a>
 <LI><a href="#[2f9]">L2C_cos_reset_any_pending_channel_ucfg</a>
 <LI><a href="#[557]">L2C_cos_reset_any_pending_channel_ucfg_weak</a>
 <LI><a href="#[4e]">L2C_cos_transmit_pdu_packets_tsk_ucfg</a>
 <LI><a href="#[558]">L2C_cos_transmit_pdu_packets_tsk_ucfg_weak</a>
 <LI><a href="#[2e5]">L2C_get_link_control_block_ref</a>
 <LI><a href="#[2eb]">L2C_hci_disconnection_complete_evt_hndl</a>
 <LI><a href="#[2ed]">L2C_hci_le_connection_complete_evt_hndl</a>
 <LI><a href="#[2ee]">L2C_mux_acl_packet</a>
 <LI><a href="#[2f2]">L2C_post_process_incoming_request_packet</a>
 <LI><a href="#[2e7]">L2C_post_process_outgoing_response_packet</a>
 <LI><a href="#[2f1]">L2C_pre_process_incoming_response_packet</a>
 <LI><a href="#[2f5]">L2C_receive_data</a>
 <LI><a href="#[2e9]">L2C_release_unexpected_acl_packet</a>
 <LI><a href="#[23e]">L2C_send_frame</a>
 <LI><a href="#[2f8]">L2C_timeout_handler_signalling</a>
 <LI><a href="#[2fa]">LLC_authenticated_payload_timeout_cb</a>
 <LI><a href="#[5f]">LLC_authenticated_payload_timeout_processing</a>
 <LI><a href="#[2fe]">LLC_authenticated_payload_timeout_reset</a>
 <LI><a href="#[36a]">LLC_conn_init_cte_ctxt_ucfg</a>
 <LI><a href="#[559]">LLC_conn_init_cte_ctxt_ucfg_weak</a>
 <LI><a href="#[36b]">LLC_conn_init_pcl_ctxt_ucfg</a>
 <LI><a href="#[55a]">LLC_conn_init_pcl_ctxt_ucfg_weak</a>
 <LI><a href="#[3a8]">LLC_conn_process_rx_cte_ucfg</a>
 <LI><a href="#[55b]">LLC_conn_process_rx_cte_ucfg_weak</a>
 <LI><a href="#[306]">LLC_cte_request_procedure_ucfg</a>
 <LI><a href="#[55c]">LLC_cte_request_procedure_ucfg_weak</a>
 <LI><a href="#[3de]">LLC_get_cte_buffers</a>
 <LI><a href="#[302]">LLC_init_le_ping_params</a>
 <LI><a href="#[40]">LLC_le_ping</a>
 <LI><a href="#[5d]">LLC_offline_control_procedures_processing</a>
 <LI><a href="#[4ac]">LLC_pcl_hal_cntxt_init_ucfg</a>
 <LI><a href="#[55d]">LLC_pcl_hal_cntxt_init_ucfg_weak</a>
 <LI><a href="#[3a9]">LLC_pcl_incr_rx_packets_ucfg</a>
 <LI><a href="#[55e]">LLC_pcl_incr_rx_packets_ucfg_weak</a>
 <LI><a href="#[307]">LLC_pcl_offline_processing_ucfg</a>
 <LI><a href="#[55f]">LLC_pcl_offline_processing_ucfg_weak</a>
 <LI><a href="#[2b7]">LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg</a>
 <LI><a href="#[560]">LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak</a>
 <LI><a href="#[36c]">LLC_pcl_set_radio_tx_power_conn_start_ucfg</a>
 <LI><a href="#[308]">LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak</a>
 <LI><a href="#[394]">LLC_pcl_update_avg_rssi_ucfg</a>
 <LI><a href="#[561]">LLC_pcl_update_avg_rssi_ucfg_weak</a>
 <LI><a href="#[30a]">LLC_update_le_ping_params</a>
 <LI><a href="#[30c]">LL_Context_Test_Advertising_Handle</a>
 <LI><a href="#[1fc]">LL_Disconnect_Link</a>
 <LI><a href="#[311]">LL_Get_LTK</a>
 <LI><a href="#[1ab]">LL_Init</a>
 <LI><a href="#[31b]">LL_LE_Set_Advertise_Enable</a>
 <LI><a href="#[320]">LL_LE_Set_Advertising_Parameters</a>
 <LI><a href="#[304]">LL_Read_Remote_Used_Features</a>
 <LI><a href="#[129]">LL_Send_ACL_Data</a>
 <LI><a href="#[32e]">LL_Set_Advertising_Set_Random_Address</a>
 <LI><a href="#[31e]">LL_Set_Extented_Advertising_Enable</a>
 <LI><a href="#[31f]">LL_Set_Extented_Advertising_Set_Random_Address</a>
 <LI><a href="#[3d]">LL_channel_map_update</a>
 <LI><a href="#[334]">LL_channel_map_update_param_check</a>
 <LI><a href="#[36f]">LL_conn_calc_packetlength</a>
 <LI><a href="#[372]">LL_conn_calculate_ww</a>
 <LI><a href="#[340]">LL_conn_clr_ch_classification_pending</a>
 <LI><a href="#[341]">LL_conn_clr_disconnect_reason</a>
 <LI><a href="#[342]">LL_conn_clr_instant_reached_passed</a>
 <LI><a href="#[344]">LL_conn_clr_isr_active</a>
 <LI><a href="#[345]">LL_conn_clr_nack_flag</a>
 <LI><a href="#[346]">LL_conn_clr_rx_acl_blocked</a>
 <LI><a href="#[348]">LL_conn_clr_rx_ctrl_pdu_full</a>
 <LI><a href="#[349]">LL_conn_clr_start_enc</a>
 <LI><a href="#[34a]">LL_conn_clr_stop_enc</a>
 <LI><a href="#[34b]">LL_conn_clr_tx_acl_blocked</a>
 <LI><a href="#[371]">LL_conn_convert_sca_to_ppm</a>
 <LI><a href="#[337]">LL_conn_disconnect_link_from_CPF</a>
 <LI><a href="#[351]">LL_conn_encryption_on_off_routine</a>
 <LI><a href="#[356]">LL_conn_enhanced_get_latency</a>
 <LI><a href="#[357]">LL_conn_get_ch_classification_pending</a>
 <LI><a href="#[32f]">LL_conn_get_cntxt_p</a>
 <LI><a href="#[2fb]">LL_conn_get_cntxt_per_p</a>
 <LI><a href="#[323]">LL_conn_get_cntxt_per_p_from_handle</a>
 <LI><a href="#[30d]">LL_conn_get_conn_idx</a>
 <LI><a href="#[32b]">LL_conn_get_ctrl_pdu_data_p</a>
 <LI><a href="#[359]">LL_conn_get_disconnect_reason</a>
 <LI><a href="#[2fc]">LL_conn_get_enc_on</a>
 <LI><a href="#[330]">LL_conn_get_eventcount</a>
 <LI><a href="#[35a]">LL_conn_get_handle</a>
 <LI><a href="#[35b]">LL_conn_get_instant_passed</a>
 <LI><a href="#[35c]">LL_conn_get_instant_reached</a>
 <LI><a href="#[35d]">LL_conn_get_isr_active</a>
 <LI><a href="#[331]">LL_conn_get_latency</a>
 <LI><a href="#[35e]">LL_conn_get_phy_upd_cntx_per_p</a>
 <LI><a href="#[360]">LL_conn_get_rx_acl_blocked</a>
 <LI><a href="#[361]">LL_conn_get_rx_ctrl_pdu_full</a>
 <LI><a href="#[362]">LL_conn_get_start_enc</a>
 <LI><a href="#[363]">LL_conn_get_stop_enc</a>
 <LI><a href="#[32a]">LL_conn_get_tx_acl_blocked</a>
 <LI><a href="#[364]">LL_conn_get_tx_ctrl_pdu_state</a>
 <LI><a href="#[365]">LL_conn_get_version_exchange_cached</a>
 <LI><a href="#[103]">LL_conn_go_to_connect</a>
 <LI><a href="#[38a]">LL_conn_guard_time_for_close_conn_event</a>
 <LI><a href="#[315]">LL_conn_init</a>
 <LI><a href="#[369]">LL_conn_init_data_len_pdu_params</a>
 <LI><a href="#[312]">LL_conn_is_slave</a>
 <LI><a href="#[38]">LL_conn_isr</a>
 <LI><a href="#[2cf]">LL_conn_multi_link_connection</a>
 <LI><a href="#[38f]">LL_conn_per_init</a>
 <LI><a href="#[395]">LL_conn_process_enc_params</a>
 <LI><a href="#[39]">LL_conn_program_next_taskslot</a>
 <LI><a href="#[3a2]">LL_conn_receive_data</a>
 <LI><a href="#[1dd]">LL_conn_release_conn_idx</a>
 <LI><a href="#[3a]">LL_conn_reschedule_taskslot_params</a>
 <LI><a href="#[1d8]">LL_conn_reserve_conn_idx</a>
 <LI><a href="#[3b3]">LL_conn_set_ch_classification_pending</a>
 <LI><a href="#[332]">LL_conn_set_chmap_params</a>
 <LI><a href="#[3b4]">LL_conn_set_conn_update_params</a>
 <LI><a href="#[34f]">LL_conn_set_disconnect_reason</a>
 <LI><a href="#[3b5]">LL_conn_set_enc_params</a>
 <LI><a href="#[3a6]">LL_conn_set_instant_active</a>
 <LI><a href="#[3b6]">LL_conn_set_nack_flag</a>
 <LI><a href="#[3b7]">LL_conn_set_rx_acl_blocked</a>
 <LI><a href="#[3b8]">LL_conn_set_start_enc</a>
 <LI><a href="#[3b9]">LL_conn_set_stop_enc</a>
 <LI><a href="#[3ba]">LL_conn_set_tx_acl_blocked</a>
 <LI><a href="#[3bb]">LL_conn_set_tx_ctrl_pdu_has_instant</a>
 <LI><a href="#[3a0]">LL_conn_set_tx_ctrl_pdu_state</a>
 <LI><a href="#[3bd]">LL_conn_slave_sleep_latency_cancellation</a>
 <LI><a href="#[60]">LL_conn_slave_sleep_latency_cancellation_check</a>
 <LI><a href="#[3dc]">LL_conn_upd_data_length_change_event_ucfg</a>
 <LI><a href="#[562]">LL_conn_upd_data_length_change_event_ucfg_weak</a>
 <LI><a href="#[3db]">LL_conn_upd_max_tx_time_coded_ucfg</a>
 <LI><a href="#[563]">LL_conn_upd_max_tx_time_coded_ucfg_weak</a>
 <LI><a href="#[3bf]">LL_conn_version_exchange_set_cached</a>
 <LI><a href="#[37]">LL_connect_cancel_taskslot_dummy</a>
 <LI><a href="#[303]">LL_cpe_clr_active</a>
 <LI><a href="#[3be]">LL_cpe_conn_exception_opcode_from_sm</a>
 <LI><a href="#[324]">LL_cpe_conn_get_proc_id_from_sm</a>
 <LI><a href="#[1c9]">LL_cpe_engine</a>
 <LI><a href="#[2ff]">LL_cpe_get_active_status</a>
 <LI><a href="#[313]">LL_cpe_get_cntxt</a>
 <LI><a href="#[30e]">LL_cpe_get_tx_terminate_in_progress</a>
 <LI><a href="#[316]">LL_cpe_init</a>
 <LI><a href="#[3d2]">LL_cpe_init_cte_ucfg</a>
 <LI><a href="#[3d6]">LL_cpe_init_cte_ucfg_weak</a>
 <LI><a href="#[3d0]">LL_cpe_init_length_update_ucfg</a>
 <LI><a href="#[3d7]">LL_cpe_init_length_update_ucfg_weak</a>
 <LI><a href="#[3d3]">LL_cpe_init_past_ucfg</a>
 <LI><a href="#[3d8]">LL_cpe_init_past_ucfg_weak</a>
 <LI><a href="#[3d4]">LL_cpe_init_pcl_ucfg</a>
 <LI><a href="#[3d9]">LL_cpe_init_pcl_ucfg_weak</a>
 <LI><a href="#[3d1]">LL_cpe_init_phy_update_ucfg</a>
 <LI><a href="#[3da]">LL_cpe_init_phy_update_ucfg_weak</a>
 <LI><a href="#[3cf]">LL_cpe_register_cpf</a>
 <LI><a href="#[301]">LL_cpe_set_active</a>
 <LI><a href="#[335]">LL_cpe_set_blocked</a>
 <LI><a href="#[30f]">LL_cpe_set_disconnect</a>
 <LI><a href="#[300]">LL_cpe_set_prepare_tx_pdu</a>
 <LI><a href="#[336]">LL_cpe_set_rx_with_instant</a>
 <LI><a href="#[333]">LL_cpe_set_tx_with_instant</a>
 <LI><a href="#[3b]">LL_cpf_conn_upd</a>
 <LI><a href="#[318]">LL_dtm_init</a>
 <LI><a href="#[1da]">LL_eadv_BLUE_SM</a>
 <LI><a href="#[3df]">LL_eadv_Blue_Rx</a>
 <LI><a href="#[3e0]">LL_eadv_Blue_Tx</a>
 <LI><a href="#[4df]">LL_eadv_initializedata_data_struc</a>
 <LI><a href="#[321]">LL_eadv_initializedata_data_struc_not_enable</a>
 <LI><a href="#[4dd]">LL_eadv_max_supported_data_check_ucfg</a>
 <LI><a href="#[564]">LL_eadv_max_supported_data_check_ucfg_weak</a>
 <LI><a href="#[1dc]">LL_eadv_start_extended_ucfg</a>
 <LI><a href="#[565]">LL_eadv_start_extended_ucfg_weak</a>
 <LI><a href="#[115]">LL_eadv_switchbackupdata_data_struc</a>
 <LI><a href="#[4de]">LL_eadv_switchdata_data_struc</a>
 <LI><a href="#[3c]">LL_encryption</a>
 <LI><a href="#[1ce]">LL_ext_scan_get_cntxt_p</a>
 <LI><a href="#[3e]">LL_feature_exchange</a>
 <LI><a href="#[2d0]">LL_force_chsel_1</a>
 <LI><a href="#[1cd]">LL_get_control_pdu_size</a>
 <LI><a href="#[f7]">LL_get_rx_common_buffer_p</a>
 <LI><a href="#[10f]">LL_get_tx_common_buffer_p</a>
 <LI><a href="#[375]">LL_past_default_params_ucfg</a>
 <LI><a href="#[566]">LL_past_default_params_ucfg_weak</a>
 <LI><a href="#[4d5]">LL_past_initialize_connect_context_ucfg</a>
 <LI><a href="#[567]">LL_past_initialize_connect_context_ucfg_weak</a>
 <LI><a href="#[1d1]">LL_periodicadv_init_ucfg</a>
 <LI><a href="#[568]">LL_periodicadv_init_ucfg_weak</a>
 <LI><a href="#[3eb]">LL_periodicscan_get_overall_context_ptr</a>
 <LI><a href="#[1d2]">LL_periodicscan_init_ucfg</a>
 <LI><a href="#[569]">LL_periodicscan_init_ucfg_weak</a>
 <LI><a href="#[3af]">LL_phy_upd_pending_ucfg</a>
 <LI><a href="#[56a]">LL_phy_upd_pending_ucfg_weak</a>
 <LI><a href="#[368]">LL_phy_update_init_per_st_data_ucfg</a>
 <LI><a href="#[56b]">LL_phy_update_init_per_st_data_ucfg_weak</a>
 <LI><a href="#[38e]">LL_phy_update_init_ucfg</a>
 <LI><a href="#[56c]">LL_phy_update_init_ucfg_weak</a>
 <LI><a href="#[3ec]">LL_priv_AddAddrInEachList</a>
 <LI><a href="#[3ef]">LL_priv_Init_ResolvedPart_ucfg</a>
 <LI><a href="#[56d]">LL_priv_Init_ResolvedPart_ucfg_weak</a>
 <LI><a href="#[1d3]">LL_priv_PRIVWHIT_vInit_Struct</a>
 <LI><a href="#[3f0]">LL_priv_SearchAddrReturnMatch</a>
 <LI><a href="#[3ed]">LL_priv_SearchAddrReturnMatchAndNextSlot</a>
 <LI><a href="#[31d]">LL_priv_SynchPeerIDList_And_WhiteIDList_ucfg</a>
 <LI><a href="#[56e]">LL_priv_SynchPeerIDList_And_WhiteIDList_ucfg_weak</a>
 <LI><a href="#[104]">LL_priv_add_to_ConnIDList</a>
 <LI><a href="#[2b]">LL_priv_notallow_resolvinglistaccess_function</a>
 <LI><a href="#[3f1]">LL_priv_remove_from_ConnIDList</a>
 <LI><a href="#[ff]">LL_priv_test_address_in_ConnIDList</a>
 <LI><a href="#[fe]">LL_priv_u32ProcessAdvPacket_ucfg</a>
 <LI><a href="#[3f3]">LL_priv_u32ProcessAdvPacket_ucfg_weak</a>
 <LI><a href="#[5c]">LL_priv_u8OfflineProcessing_ucfg</a>
 <LI><a href="#[56f]">LL_priv_u8OfflineProcessing_ucfg_weak</a>
 <LI><a href="#[1d5]">LL_priv_vOwnPrivateAddress_ucfg</a>
 <LI><a href="#[570]">LL_priv_vOwnPrivateAddress_ucfg_weak</a>
 <LI><a href="#[1d6]">LL_priv_vPeerPrivateAddress_ucfg</a>
 <LI><a href="#[571]">LL_priv_vPeerPrivateAddress_ucfg_weak</a>
 <LI><a href="#[3ac]">LL_sched_anchorstretch</a>
 <LI><a href="#[1e3]">LL_sched_check_and_call_sched</a>
 <LI><a href="#[350]">LL_sched_delete_taskslot</a>
 <LI><a href="#[3e2]">LL_sched_enable_taskslot</a>
 <LI><a href="#[105]">LL_sched_engine</a>
 <LI><a href="#[112]">LL_sched_engine_return_actual_scheduler_margin</a>
 <LI><a href="#[172]">LL_sched_get_cntxt_task</a>
 <LI><a href="#[170]">LL_sched_get_current_taskslot_no</a>
 <LI><a href="#[173]">LL_sched_get_done_cb</a>
 <LI><a href="#[325]">LL_sched_get_next_anchor</a>
 <LI><a href="#[327]">LL_sched_get_next_taskslot</a>
 <LI><a href="#[171]">LL_sched_get_per_state</a>
 <LI><a href="#[fa]">LL_sched_get_priority_min</a>
 <LI><a href="#[317]">LL_sched_init</a>
 <LI><a href="#[1e0]">LL_sched_is_scheduler_call_pending</a>
 <LI><a href="#[1de]">LL_sched_release_taskslot</a>
 <LI><a href="#[1d9]">LL_sched_reserve_taskslot</a>
 <LI><a href="#[11a]">LL_sched_set_anchor</a>
 <LI><a href="#[1e2]">LL_sched_set_cancel_request</a>
 <LI><a href="#[38b]">LL_sched_set_params</a>
 <LI><a href="#[fb]">LL_sched_set_priority</a>
 <LI><a href="#[3bc]">LL_sched_set_taskslot_length_anchor</a>
 <LI><a href="#[3b2]">LL_sched_set_taskslot_length_interval_anchor</a>
 <LI><a href="#[113]">LL_sched_time_t1_ge_t2</a>
 <LI><a href="#[3f]">LL_version_exchange</a>
 <LI><a href="#[2f7]">Mem_Buff_append</a>
 <LI><a href="#[34c]">Mem_Buff_block_copy</a>
 <LI><a href="#[3a7]">Mem_Buff_block_write</a>
 <LI><a href="#[403]">Mem_Buff_cmp</a>
 <LI><a href="#[425]">Mem_Buff_get</a>
 <LI><a href="#[426]">Mem_Buff_get_chain_count</a>
 <LI><a href="#[427]">Mem_Buff_get_chain_size</a>
 <LI><a href="#[404]">Mem_Buff_init</a>
 <LI><a href="#[405]">Mem_Buff_read</a>
 <LI><a href="#[406]">Mem_Buff_release</a>
 <LI><a href="#[407]">Mem_Buff_resize</a>
 <LI><a href="#[408]">Mem_Buff_write</a>
 <LI><a href="#[261]">PM_Copy_Pckt_Data</a>
 <LI><a href="#[2cc]">PM_Eng_Config</a>
 <LI><a href="#[2f6]">PM_Extract_Pdu_MBuff</a>
 <LI><a href="#[244]">PM_Get_Available_Buffer</a>
 <LI><a href="#[2e6]">PM_Get_Pckt</a>
 <LI><a href="#[1ac]">PM_Init</a>
 <LI><a href="#[265]">PM_Pckt_Cmp</a>
 <LI><a href="#[22d]">PM_Release_Acl_Pckt</a>
 <LI><a href="#[23d]">PM_Resize_Pckt_Pdu_Size</a>
 <LI><a href="#[266]">PM_Write_Pckt_Data</a>
 <LI><a href="#[3e8]">PRIV_controller_privacy_csr_ucfg</a>
 <LI><a href="#[572]">PRIV_controller_privacy_csr_ucfg_weak</a>
 <LI><a href="#[2a]">PRIV_offline_callbackr</a>
 <LI><a href="#[1cf]">SCAN_INIT</a>
 <LI><a href="#[42c]">SDB_Find_Matching_LTK</a>
 <LI><a href="#[431]">SDB_Find_Record</a>
 <LI><a href="#[432]">SDB_get_records_count</a>
 <LI><a href="#[42f]">SDB_get_security_data_record</a>
 <LI><a href="#[2a3]">SDB_read_peer_bonded_data</a>
 <LI><a href="#[2a9]">SDB_write_gatt_client_data</a>
 <LI><a href="#[430]">SMA_Diversify</a>
 <LI><a href="#[434]">SMA_Generate_CSRK</a>
 <LI><a href="#[435]">SMA_Generate_IRK</a>
 <LI><a href="#[436]">SMA_LP_s1_Generate_STK</a>
 <LI><a href="#[42e]">SMA_generate_EDIV_recovery_DIV</a>
 <LI><a href="#[1af]">SMP_Init</a>
 <LI><a href="#[439]">SMP_Protocol_Timer_cb</a>
 <LI><a href="#[2ef]">SMP_acl_data_hndl</a>
 <LI><a href="#[28e]">SMP_check_encryption_key_size</a>
 <LI><a href="#[2a5]">SMP_check_is_device_bonded</a>
 <LI><a href="#[236]">SMP_forget_device_by_conn_handle</a>
 <LI><a href="#[28d]">SMP_get_link_status</a>
 <LI><a href="#[28c]">SMP_get_remote_device_list_item</a>
 <LI><a href="#[43f]">SMP_hci_disconnection_complete_evt_hndl</a>
 <LI><a href="#[443]">SMP_hci_encryption_change_evt_hndl</a>
 <LI><a href="#[444]">SMP_hci_le_connection_complete_evt_hndl</a>
 <LI><a href="#[445]">SMP_hci_le_enhanced_connection_complete_evt_hndl</a>
 <LI><a href="#[447]">SMP_hci_le_long_term_key_request_evt_hndl</a>
 <LI><a href="#[5a]">SMP_process_pending_rx_packets_tsk</a>
 <LI><a href="#[58]">SMP_process_sc_ecc_pk_generation_tsk_ucfg</a>
 <LI><a href="#[573]">SMP_process_sc_ecc_pk_generation_tsk_ucfg_weak</a>
 <LI><a href="#[59]">SMP_process_state_transition_actions_tsk</a>
 <LI><a href="#[441]">SMP_reset_timer</a>
 <LI><a href="#[2cd]">SMP_sc_force_debug_key_usage</a>
 <LI><a href="#[278]">SMP_validate_signed_packet</a>
 <LI><a href="#[1f8]">SM_Generate_Resolvable_Private_Address</a>
 <LI><a href="#[1a3]">SM_Resolve_Private_Address</a>
 <LI><a href="#[fc]">UTIL_AdvConvStringToSrambledIntWithType</a>
 <LI><a href="#[298]">UUID_cmp</a>
 <LI><a href="#[2a6]">UUID_cmp_128bits</a>
 <LI><a href="#[269]">UUID_get_value_p</a>
 <LI><a href="#[29b]">UUID_write_to_flat</a>
 <LI><a href="#[16c]">_BlueNRG_Stack_Initialization</a>
 <LI><a href="#[473]">aci_att_clt_exec_write_resp_event</a>
 <LI><a href="#[a3]">aci_att_clt_exec_write_resp_event_cb</a>
 <LI><a href="#[475]">aci_att_clt_find_by_type_value_resp_event</a>
 <LI><a href="#[9c]">aci_att_clt_find_by_type_value_resp_event_cb</a>
 <LI><a href="#[474]">aci_att_clt_find_by_type_value_resp_event_copy</a>
 <LI><a href="#[477]">aci_att_clt_find_info_resp_event</a>
 <LI><a href="#[9b]">aci_att_clt_find_info_resp_event_cb</a>
 <LI><a href="#[476]">aci_att_clt_find_info_resp_event_copy</a>
 <LI><a href="#[479]">aci_att_clt_prepare_write_resp_event</a>
 <LI><a href="#[a2]">aci_att_clt_prepare_write_resp_event_cb</a>
 <LI><a href="#[478]">aci_att_clt_prepare_write_resp_event_copy</a>
 <LI><a href="#[47b]">aci_att_clt_read_blob_resp_event</a>
 <LI><a href="#[9f]">aci_att_clt_read_blob_resp_event_cb</a>
 <LI><a href="#[47a]">aci_att_clt_read_blob_resp_event_copy</a>
 <LI><a href="#[47d]">aci_att_clt_read_by_group_type_resp_event</a>
 <LI><a href="#[a1]">aci_att_clt_read_by_group_type_resp_event_cb</a>
 <LI><a href="#[47c]">aci_att_clt_read_by_group_type_resp_event_copy</a>
 <LI><a href="#[47f]">aci_att_clt_read_by_type_resp_event</a>
 <LI><a href="#[9d]">aci_att_clt_read_by_type_resp_event_cb</a>
 <LI><a href="#[47e]">aci_att_clt_read_by_type_resp_event_copy</a>
 <LI><a href="#[481]">aci_att_clt_read_multiple_resp_event</a>
 <LI><a href="#[a0]">aci_att_clt_read_multiple_resp_event_cb</a>
 <LI><a href="#[480]">aci_att_clt_read_multiple_resp_event_copy</a>
 <LI><a href="#[483]">aci_att_clt_read_resp_event</a>
 <LI><a href="#[9e]">aci_att_clt_read_resp_event_cb</a>
 <LI><a href="#[482]">aci_att_clt_read_resp_event_copy</a>
 <LI><a href="#[484]">aci_att_exchange_mtu_resp_event</a>
 <LI><a href="#[9a]">aci_att_exchange_mtu_resp_event_cb</a>
 <LI><a href="#[485]">aci_att_srv_exec_write_req_event</a>
 <LI><a href="#[ae]">aci_att_srv_exec_write_req_event_cb</a>
 <LI><a href="#[486]">aci_att_srv_prepare_write_req_event</a>
 <LI><a href="#[ad]">aci_att_srv_prepare_write_req_event_cb</a>
 <LI><a href="#[487]">aci_att_srv_prepare_write_req_event_copy</a>
 <LI><a href="#[127]">aci_event_fifo_push</a>
 <LI><a href="#[126]">aci_event_fifo_push_header</a>
 <LI><a href="#[48a]">aci_gap_addr_not_resolved_event</a>
 <LI><a href="#[8c]">aci_gap_addr_not_resolved_event_cb</a>
 <LI><a href="#[48b]">aci_gap_bond_lost_event</a>
 <LI><a href="#[8a]">aci_gap_bond_lost_event_cb</a>
 <LI><a href="#[457]">aci_gap_init</a>
 <LI><a href="#[8e]">aci_gap_keypress_notification_event_cb_ucfg</a>
 <LI><a href="#[574]">aci_gap_keypress_notification_event_cb_ucfg_weak</a>
 <LI><a href="#[48c]">aci_gap_limited_discoverable_event</a>
 <LI><a href="#[86]">aci_gap_limited_discoverable_event_cb</a>
 <LI><a href="#[8d]">aci_gap_numeric_comparison_value_event_cb_ucfg</a>
 <LI><a href="#[575]">aci_gap_numeric_comparison_value_event_cb_ucfg_weak</a>
 <LI><a href="#[48d]">aci_gap_pairing_complete_event</a>
 <LI><a href="#[87]">aci_gap_pairing_complete_event_cb</a>
 <LI><a href="#[48e]">aci_gap_pass_key_req_event</a>
 <LI><a href="#[88]">aci_gap_pass_key_req_event_cb</a>
 <LI><a href="#[48f]">aci_gap_proc_complete_event</a>
 <LI><a href="#[8b]">aci_gap_proc_complete_event_cb</a>
 <LI><a href="#[490]">aci_gap_proc_complete_event_copy</a>
 <LI><a href="#[211]">aci_gap_proc_complete_event_wrapper</a>
 <LI><a href="#[458]">aci_gap_set_advertising_configuration</a>
 <LI><a href="#[459]">aci_gap_set_advertising_data</a>
 <LI><a href="#[402]">aci_gap_set_advertising_enable</a>
 <LI><a href="#[494]">aci_gap_slave_security_initiated_event</a>
 <LI><a href="#[89]">aci_gap_slave_security_initiated_event_cb</a>
 <LI><a href="#[495]">aci_gap_terminate</a>
 <LI><a href="#[496]">aci_gatt_clt_disc_read_char_by_uuid_resp_event</a>
 <LI><a href="#[a8]">aci_gatt_clt_disc_read_char_by_uuid_resp_event_cb</a>
 <LI><a href="#[497]">aci_gatt_clt_error_resp_event</a>
 <LI><a href="#[a7]">aci_gatt_clt_error_resp_event_cb</a>
 <LI><a href="#[499]">aci_gatt_clt_indication_event</a>
 <LI><a href="#[a4]">aci_gatt_clt_indication_event_cb</a>
 <LI><a href="#[498]">aci_gatt_clt_indication_event_copy</a>
 <LI><a href="#[49b]">aci_gatt_clt_notification_event</a>
 <LI><a href="#[a5]">aci_gatt_clt_notification_event_cb</a>
 <LI><a href="#[49a]">aci_gatt_clt_notification_event_copy</a>
 <LI><a href="#[49c]">aci_gatt_clt_proc_complete_event</a>
 <LI><a href="#[a6]">aci_gatt_clt_proc_complete_event_cb</a>
 <LI><a href="#[49d]">aci_gatt_proc_timeout_event</a>
 <LI><a href="#[99]">aci_gatt_proc_timeout_event_cb</a>
 <LI><a href="#[2ad]">aci_gatt_srv_add_char</a>
 <LI><a href="#[12c]">aci_gatt_srv_add_service</a>
 <LI><a href="#[98]">aci_gatt_srv_attribute_modified_event_cb</a>
 <LI><a href="#[49f]">aci_gatt_srv_confirmation_event</a>
 <LI><a href="#[aa]">aci_gatt_srv_confirmation_event_cb</a>
 <LI><a href="#[12d]">aci_gatt_srv_get_char_decl_handle</a>
 <LI><a href="#[2ab]">aci_gatt_srv_get_service_handle</a>
 <LI><a href="#[456]">aci_gatt_srv_init</a>
 <LI><a href="#[452]">aci_gatt_srv_notify</a>
 <LI><a href="#[ab]">aci_gatt_srv_read_event_cb</a>
 <LI><a href="#[4a1]">aci_gatt_srv_resp</a>
 <LI><a href="#[ac]">aci_gatt_srv_write_event_cb</a>
 <LI><a href="#[4a3]">aci_gatt_srv_write_event_copy</a>
 <LI><a href="#[a9]">aci_gatt_tx_pool_available_event_cb</a>
 <LI><a href="#[4a5]">aci_hal_adv_scan_resp_data_update_event</a>
 <LI><a href="#[75]">aci_hal_adv_scan_resp_data_update_event_cb</a>
 <LI><a href="#[74]">aci_hal_fw_error_event_cb</a>
 <LI><a href="#[73]">aci_hal_scan_req_report_event_cb_ucfg</a>
 <LI><a href="#[576]">aci_hal_scan_req_report_event_cb_ucfg_weak</a>
 <LI><a href="#[455]">aci_hal_set_tx_power_level</a>
 <LI><a href="#[454]">aci_hal_write_config_data</a>
 <LI><a href="#[92]">aci_l2cap_cfc_connection_event_cb_ucfg</a>
 <LI><a href="#[577]">aci_l2cap_cfc_connection_event_cb_ucfg_weak</a>
 <LI><a href="#[4a7]">aci_l2cap_command_reject_event</a>
 <LI><a href="#[95]">aci_l2cap_command_reject_event_cb</a>
 <LI><a href="#[2f4]">aci_l2cap_command_reject_event_copy</a>
 <LI><a href="#[4a8]">aci_l2cap_connection_update_req_event</a>
 <LI><a href="#[91]">aci_l2cap_connection_update_req_event_cb</a>
 <LI><a href="#[2f3]">aci_l2cap_connection_update_req_event_copy</a>
 <LI><a href="#[4a9]">aci_l2cap_connection_update_resp_event</a>
 <LI><a href="#[8f]">aci_l2cap_connection_update_resp_event_cb</a>
 <LI><a href="#[93]">aci_l2cap_disconnection_complete_event_cb_ucfg</a>
 <LI><a href="#[578]">aci_l2cap_disconnection_complete_event_cb_ucfg_weak</a>
 <LI><a href="#[94]">aci_l2cap_flow_control_credit_event_cb_ucfg</a>
 <LI><a href="#[579]">aci_l2cap_flow_control_credit_event_cb_ucfg_weak</a>
 <LI><a href="#[4ab]">aci_l2cap_proc_timeout_event</a>
 <LI><a href="#[90]">aci_l2cap_proc_timeout_event_cb</a>
 <LI><a href="#[4aa]">aci_l2cap_proc_timeout_event_copy</a>
 <LI><a href="#[97]">aci_l2cap_sdu_data_rx_event_cb_ucfg</a>
 <LI><a href="#[57a]">aci_l2cap_sdu_data_rx_event_cb_ucfg_weak</a>
 <LI><a href="#[96]">aci_l2cap_sdu_data_tx_event_cb_ucfg</a>
 <LI><a href="#[57b]">aci_l2cap_sdu_data_tx_event_cb_ucfg_weak</a>
 <LI><a href="#[31a]">ble_HAL_Init</a>
 <LI><a href="#[5e]">channel_Update_Offline_Processing</a>
 <LI><a href="#[1e4]">channel_sel_algo2</a>
 <LI><a href="#[314]">char_copy</a>
 <LI><a href="#[2d1]">configBitmapSet</a>
 <LI><a href="#[29a]">copy_swap_buffer</a>
 <LI><a href="#[1a9]">csmem_init</a>
 <LI><a href="#[1cc]">csmem_mem_0_assign</a>
 <LI><a href="#[1a7]">csmem_mem_assign</a>
 <LI><a href="#[242]">cst_sharedCallback</a>
 <LI><a href="#[390]">cte_csr_ucfg</a>
 <LI><a href="#[57c]">cte_csr_ucfg_weak</a>
 <LI><a href="#[2cb]">data_length_extension_csr_ucfg</a>
 <LI><a href="#[57d]">data_length_extension_csr_ucfg_weak</a>
 <LI><a href="#[1ef]">ext_adv_scan_enabled_ucfg</a>
 <LI><a href="#[57e]">ext_adv_scan_enabled_ucfg_weak</a>
 <LI><a href="#[1fd]">gap_extended_scan_supported</a>
 <LI><a href="#[46]">gap_timers_callback</a>
 <LI><a href="#[2d]">gap_timers_callback_wrapper</a>
 <LI><a href="#[393]">get_rf_rx_path_compensation_db</a>
 <LI><a href="#[1e8]">hal_radio_activity_state_callback_check</a>
 <LI><a href="#[1e9]">hal_radio_activity_state_init</a>
 <LI><a href="#[4ae]">hal_read_radio_activity_state</a>
 <LI><a href="#[2d3]">hci_acl_Init</a>
 <LI><a href="#[5b]">hci_acl_Process_Q</a>
 <LI><a href="#[b0]">hci_acl_data_ind_event_int_cb</a>
 <LI><a href="#[af]">hci_acl_data_tx_cmpl_event_int_cb</a>
 <LI><a href="#[4b2]">hci_authenticated_payload_timeout_expired_event</a>
 <LI><a href="#[72]">hci_authenticated_payload_timeout_expired_event_cb</a>
 <LI><a href="#[4b3]">hci_data_buffer_overflow_event</a>
 <LI><a href="#[71]">hci_data_buffer_overflow_event_cb</a>
 <LI><a href="#[62]">hci_disconnection_complete_event_cb</a>
 <LI><a href="#[b1]">hci_disconnection_complete_event_int_cb</a>
 <LI><a href="#[4b6]">hci_encryption_change_event</a>
 <LI><a href="#[63]">hci_encryption_change_event_cb</a>
 <LI><a href="#[b2]">hci_encryption_change_event_int_cb</a>
 <LI><a href="#[4b7]">hci_encryption_key_refresh_complete_event</a>
 <LI><a href="#[64]">hci_encryption_key_refresh_complete_event_cb</a>
 <LI><a href="#[b3]">hci_encryption_key_refresh_complete_event_int_cb</a>
 <LI><a href="#[4c3]">hci_get_set_legacy_ext_flag</a>
 <LI><a href="#[66]">hci_le_advertising_report_event_cb_ucfg</a>
 <LI><a href="#[57f]">hci_le_advertising_report_event_cb_ucfg_weak</a>
 <LI><a href="#[b5]">hci_le_advertising_report_event_int_cb</a>
 <LI><a href="#[6e]">hci_le_advertising_set_terminated_event_cb_ucfg</a>
 <LI><a href="#[580]">hci_le_advertising_set_terminated_event_cb_ucfg_weak</a>
 <LI><a href="#[bd]">hci_le_advertising_set_terminated_event_int_cb</a>
 <LI><a href="#[4b9]">hci_le_channel_selection_algorithm_event</a>
 <LI><a href="#[7e]">hci_le_channel_selection_algorithm_event_cb</a>
 <LI><a href="#[4c4]">hci_le_check_own_address_type_max_value_ucfg</a>
 <LI><a href="#[581]">hci_le_check_own_address_type_max_value_ucfg_weak</a>
 <LI><a href="#[65]">hci_le_connection_complete_event_cb</a>
 <LI><a href="#[b4]">hci_le_connection_complete_event_int_cb</a>
 <LI><a href="#[80]">hci_le_connection_iq_report_event_cb_ucfg</a>
 <LI><a href="#[582]">hci_le_connection_iq_report_event_cb_ucfg_weak</a>
 <LI><a href="#[4bb]">hci_le_connection_update_complete_event</a>
 <LI><a href="#[76]">hci_le_connection_update_complete_event_cb</a>
 <LI><a href="#[7f]">hci_le_connectionless_iq_report_event_cb_ucfg</a>
 <LI><a href="#[583]">hci_le_connectionless_iq_report_event_cb_ucfg_weak</a>
 <LI><a href="#[81]">hci_le_cte_request_failed_event_cb_ucfg</a>
 <LI><a href="#[584]">hci_le_cte_request_failed_event_cb_ucfg_weak</a>
 <LI><a href="#[78]">hci_le_data_length_change_event_cb_ucfg</a>
 <LI><a href="#[585]">hci_le_data_length_change_event_cb_ucfg_weak</a>
 <LI><a href="#[6b]">hci_le_direct_advertising_report_event_cb_ucfg</a>
 <LI><a href="#[586]">hci_le_direct_advertising_report_event_cb_ucfg_weak</a>
 <LI><a href="#[ba]">hci_le_direct_advertising_report_event_int_cb</a>
 <LI><a href="#[433]">hci_le_encrypt</a>
 <LI><a href="#[6a]">hci_le_enhanced_connection_complete_event_cb</a>
 <LI><a href="#[b9]">hci_le_enhanced_connection_complete_event_int_cb</a>
 <LI><a href="#[6c]">hci_le_extended_advertising_report_event_cb_ucfg</a>
 <LI><a href="#[587]">hci_le_extended_advertising_report_event_cb_ucfg_weak</a>
 <LI><a href="#[bb]">hci_le_extended_advertising_report_event_int_cb</a>
 <LI><a href="#[69]">hci_le_generate_dhkey_complete_event_cb_ucfg</a>
 <LI><a href="#[588]">hci_le_generate_dhkey_complete_event_cb_ucfg_weak</a>
 <LI><a href="#[b8]">hci_le_generate_dhkey_complete_event_int_cb</a>
 <LI><a href="#[4be]">hci_le_long_term_key_request_event</a>
 <LI><a href="#[67]">hci_le_long_term_key_request_event_cb</a>
 <LI><a href="#[b6]">hci_le_long_term_key_request_event_int_cb</a>
 <LI><a href="#[4bf]">hci_le_long_term_key_request_reply</a>
 <LI><a href="#[4c0]">hci_le_long_term_key_requested_negative_reply</a>
 <LI><a href="#[83]">hci_le_path_loss_threshold_event_cb_ucfg</a>
 <LI><a href="#[589]">hci_le_path_loss_threshold_event_cb_ucfg_weak</a>
 <LI><a href="#[7b]">hci_le_periodic_advertising_report_event_cb_ucfg</a>
 <LI><a href="#[58a]">hci_le_periodic_advertising_report_event_cb_ucfg_weak</a>
 <LI><a href="#[7a]">hci_le_periodic_advertising_sync_established_event_cb_ucfg</a>
 <LI><a href="#[58b]">hci_le_periodic_advertising_sync_established_event_cb_ucfg_weak</a>
 <LI><a href="#[7c]">hci_le_periodic_advertising_sync_lost_event_cb_ucfg</a>
 <LI><a href="#[58c]">hci_le_periodic_advertising_sync_lost_event_cb_ucfg_weak</a>
 <LI><a href="#[82]">hci_le_periodic_advertising_sync_transfer_received_event_cb_ucfg</a>
 <LI><a href="#[58d]">hci_le_periodic_advertising_sync_transfer_received_event_cb_ucfg_weak</a>
 <LI><a href="#[79]">hci_le_phy_update_complete_event_cb_ucfg</a>
 <LI><a href="#[58e]">hci_le_phy_update_complete_event_cb_ucfg_weak</a>
 <LI><a href="#[68]">hci_le_read_local_p256_public_key_complete_event_cb_ucfg</a>
 <LI><a href="#[58f]">hci_le_read_local_p256_public_key_complete_event_cb_ucfg_weak</a>
 <LI><a href="#[b7]">hci_le_read_local_p256_public_key_complete_event_int_cb</a>
 <LI><a href="#[4c2]">hci_le_read_remote_used_features_complete_event</a>
 <LI><a href="#[77]">hci_le_read_remote_used_features_complete_event_cb</a>
 <LI><a href="#[7d]">hci_le_scan_request_received_event_cb_ucfg</a>
 <LI><a href="#[590]">hci_le_scan_request_received_event_cb_ucfg_weak</a>
 <LI><a href="#[6d]">hci_le_scan_timeout_event_cb_ucfg</a>
 <LI><a href="#[591]">hci_le_scan_timeout_event_cb_ucfg_weak</a>
 <LI><a href="#[bc]">hci_le_scan_timeout_event_int_cb</a>
 <LI><a href="#[21e]">hci_le_set_advertising_enable</a>
 <LI><a href="#[21c]">hci_le_set_advertising_parameters</a>
 <LI><a href="#[1f1]">hci_le_set_event_mask</a>
 <LI><a href="#[219]">hci_le_set_random_address</a>
 <LI><a href="#[84]">hci_le_transmit_power_reporting_event_cb_ucfg</a>
 <LI><a href="#[592]">hci_le_transmit_power_reporting_event_cb_ucfg_weak</a>
 <LI><a href="#[4c6]">hci_number_of_completed_packets_event</a>
 <LI><a href="#[70]">hci_number_of_completed_packets_event_cb</a>
 <LI><a href="#[4c5]">hci_number_of_completed_packets_event_copy</a>
 <LI><a href="#[4c8]">hci_read_remote_version_information_complete_event</a>
 <LI><a href="#[6f]">hci_read_remote_version_information_complete_event_cb</a>
 <LI><a href="#[4c9]">hci_read_remote_version_information_complete_event_copy</a>
 <LI><a href="#[4b0]">hci_rx_acl_data</a>
 <LI><a href="#[4cb]">hci_rx_acl_data_event</a>
 <LI><a href="#[85]">hci_rx_acl_data_event_cb</a>
 <LI><a href="#[4cc]">hci_rx_acl_data_event_copy</a>
 <LI><a href="#[1f2]">hci_set_event_mask</a>
 <LI><a href="#[4b1]">hci_tx_acl_data_done</a>
 <LI><a href="#[2d6]">is_Buffer_All_Set_To</a>
 <LI><a href="#[3ad]">isr_Acl_Data_Indication_Queue_Full</a>
 <LI><a href="#[3a4]">isr_Acl_Data_TX_Cmpl_Queue_Full</a>
 <LI><a href="#[46f]">l2c_cos_csr_ucfg</a>
 <LI><a href="#[593]">l2c_cos_csr_ucfg_weak</a>
 <LI><a href="#[47]">l2cap_timers_callback</a>
 <LI><a href="#[35]">l2cap_timers_callback_wrapper</a>
 <LI><a href="#[39f]">ll_cpe_get_cpid_from_opcode</a>
 <LI><a href="#[3c9]">ll_cpe_set_unknown_rsp_pending</a>
 <LI><a href="#[4dc]">ll_set_advertising_data_ptr</a>
 <LI><a href="#[21d]">ll_set_legacy_advertising_data_ptr</a>
 <LI><a href="#[2ce]">ll_write_supported_data_ucfg</a>
 <LI><a href="#[594]">ll_write_supported_data_ucfg_weak</a>
 <LI><a href="#[48]">llc_timers_callback</a>
 <LI><a href="#[36]">llc_timers_callback_wrapper</a>
 <LI><a href="#[470]">master_csr_ucfg</a>
 <LI><a href="#[595]">master_csr_ucfg_weak</a>
 <LI><a href="#[3e9]">pcl_csr_ucfg</a>
 <LI><a href="#[596]">pcl_csr_ucfg_weak</a>
 <LI><a href="#[1f0]">periodic_csr_ucfg</a>
 <LI><a href="#[597]">periodic_csr_ucfg_weak</a>
 <LI><a href="#[10c]">phy_map</a>
 <LI><a href="#[35f]">phy_upd_csr_ucfg</a>
 <LI><a href="#[598]">phy_upd_csr_ucfg_weak</a>
 <LI><a href="#[471]">secure_connections_csr_ucfg</a>
 <LI><a href="#[599]">secure_connections_csr_ucfg_weak</a>
 <LI><a href="#[4a]">sm_timers_callback</a>
 <LI><a href="#[45]">sm_timers_callback_wrapper</a>
 <LI><a href="#[450]">sma_CMAC_generate_tag</a>
 <LI><a href="#[4e5]">smp_Execute_Actions_wrt_Current_State_MI_excerpt_ucfg</a>
 <LI><a href="#[59a]">smp_Execute_Actions_wrt_Current_State_MI_excerpt_ucfg_weak</a>
 <LI><a href="#[4ee]">smp_MI_Start_Encryption_ucfg</a>
 <LI><a href="#[59b]">smp_MI_Start_Encryption_ucfg_weak</a>
 <LI><a href="#[4f6]">smp_Process_Rx_Packet_Exception_Cases_sc_excerpt_ucfg</a>
 <LI><a href="#[59c]">smp_Process_Rx_Packet_Exception_Cases_sc_excerpt_ucfg_weak</a>
 <LI><a href="#[4f7]">smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt_ucfg</a>
 <LI><a href="#[59d]">smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt_ucfg_weak</a>
 <LI><a href="#[4f3]">smp_Process_Rx_Packet_wrt_Current_State_sc_excerpt_ucfg</a>
 <LI><a href="#[59e]">smp_Process_Rx_Packet_wrt_Current_State_sc_excerpt_ucfg_weak</a>
 <LI><a href="#[4fe]">smp_add_pairing_record_to_bonding_database</a>
 <LI><a href="#[43e]">smp_cmn_is_peer_rejectlisted</a>
 <LI><a href="#[505]">smp_cmn_notify_rejectlist_penalty_timer_expiration</a>
 <LI><a href="#[4f5]">smp_cmn_pairing_phase_3_keys_receiving</a>
 <LI><a href="#[506]">smp_cmn_rejectlist_init</a>
 <LI><a href="#[507]">smp_cmn_rejectlist_start_probation_timer2</a>
 <LI><a href="#[508]">smp_cmn_repeated_attacks_protection_start</a>
 <LI><a href="#[4e1]">smp_cmn_repeated_attacks_timer_cb</a>
 <LI><a href="#[4ea]">smp_execute_actions_wrt_state_sc_phase1to2_ucfg</a>
 <LI><a href="#[59f]">smp_execute_actions_wrt_state_sc_phase1to2_ucfg_weak</a>
 <LI><a href="#[4e6]">smp_execute_actions_wrt_state_sc_phase2as2_ucfg</a>
 <LI><a href="#[5a0]">smp_execute_actions_wrt_state_sc_phase2as2_ucfg_weak</a>
 <LI><a href="#[440]">smp_find_remote_device_index</a>
 <LI><a href="#[44f]">smp_get_CSRK</a>
 <LI><a href="#[4ef]">smp_get_local_identity_address</a>
 <LI><a href="#[4ec]">smp_keys_distribution_start</a>
 <LI><a href="#[448]">smp_le_long_term_key_response</a>
 <LI><a href="#[502]">smp_oob_check_is_remote_data_present</a>
 <LI><a href="#[509]">smp_pairing_2octets_packet_send</a>
 <LI><a href="#[4e9]">smp_pairing_completed</a>
 <LI><a href="#[44a]">smp_pairing_failed_receive</a>
 <LI><a href="#[449]">smp_pairing_failed_send</a>
 <LI><a href="#[4fc]">smp_sc_SR_PairingConfirm_Receive_sc_excerpt_ucfg</a>
 <LI><a href="#[5a1]">smp_sc_SR_PairingConfirm_Receive_sc_excerpt_ucfg_weak</a>
 <LI><a href="#[4fd]">smp_sc_SR_PairingRandom_Receive_sc_excerpt_ucfg</a>
 <LI><a href="#[5a2]">smp_sc_SR_PairingRandom_Receive_sc_excerpt_ucfg_weak</a>
 <LI><a href="#[4eb]">smp_sc_SR_Pairing_Phase_2AS1_Start_sc_excerpt_ucfg</a>
 <LI><a href="#[5a3]">smp_sc_SR_Pairing_Phase_2AS1_Start_sc_excerpt_ucfg_weak</a>
 <LI><a href="#[501]">smp_sc_continue_on_exclusive_sc_pairing_ucfg</a>
 <LI><a href="#[5a4]">smp_sc_continue_on_exclusive_sc_pairing_ucfg_weak</a>
 <LI><a href="#[4bd]">smp_sc_hci_le_generate_dhkey_complete_evt_hndl_ucfg</a>
 <LI><a href="#[5a5]">smp_sc_hci_le_generate_dhkey_complete_evt_hndl_ucfg_weak</a>
 <LI><a href="#[4c1]">smp_sc_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg</a>
 <LI><a href="#[5a6]">smp_sc_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg_weak</a>
 <LI><a href="#[438]">smp_sc_init_ucfg</a>
 <LI><a href="#[5a7]">smp_sc_init_ucfg_weak</a>
 <LI><a href="#[44e]">smp_sc_is_another_sc_pairing_ongoing</a>
 <LI><a href="#[50b]">smp_sc_update_statistics_on_pairing_complete_ucfg</a>
 <LI><a href="#[5a8]">smp_sc_update_statistics_on_pairing_complete_ucfg_weak</a>
 <LI><a href="#[4f0]">smp_send_packet</a>
 <LI><a href="#[1aa]">tsk_init</a>
 <LI><a href="#[178]">tsk_notify_idx</a>
 <LI><a href="#[17a]">tsk_scheduler</a>
 <LI><a href="#[396]">tsk_signal_resource_idx</a>
 <LI><a href="#[245]">tsk_wait_resource_idx</a>
 <LI><a href="#[1a6]">BlueNRG_Stack_Initialize_ConfigData</a>
 <LI><a href="#[1a8]">BlueNRG_Stack_Initialize_Layers</a>
 <LI><a href="#[16b]">total_buffer_size_value</a>
 <LI><a href="#[1ca]">Dynamic_allocator_EVNT</a>
 <LI><a href="#[1ea]">aci_event_fifo_init</a>
 <LI><a href="#[489]">fifoBuf_getFreeHeader</a>
 <LI><a href="#[488]">fifoCtrl_init</a>
 <LI><a href="#[200]">GAP_dynamic_allocator</a>
 <LI><a href="#[20f]">GAP_limited_discoverable_event_check</a>
 <LI><a href="#[21a]">GAP_set_discoverability_mode</a>
 <LI><a href="#[285]">GAT_srv_aes_cmac_append</a>
 <LI><a href="#[286]">GAT_srv_attr_direct_value_write</a>
 <LI><a href="#[28b]">GAT_srv_check_sec_perm</a>
 <LI><a href="#[297]">GAT_srv_find_from_handle_p</a>
 <LI><a href="#[294]">GAT_srv_generate_hash</a>
 <LI><a href="#[29d]">GAT_srv_get_chr_decl_val</a>
 <LI><a href="#[29f]">GAT_srv_get_chr_descr_val</a>
 <LI><a href="#[29e]">GAT_srv_get_chr_val</a>
 <LI><a href="#[2a2]">GAT_srv_get_fast_buffer_val</a>
 <LI><a href="#[293]">GAT_srv_get_from_nvm</a>
 <LI><a href="#[29c]">GAT_srv_get_incl_srv_val</a>
 <LI><a href="#[288]">GAT_srv_get_zip_val</a>
 <LI><a href="#[299]">GAT_srv_hash_attr</a>
 <LI><a href="#[292]">GAT_srv_is_bonded</a>
 <LI><a href="#[28a]">GAT_srv_set_cccd_val</a>
 <LI><a href="#[32]">GAT_srv_set_change_unaware</a>
 <LI><a href="#[289]">GAT_srv_set_zip_val</a>
 <LI><a href="#[296]">GAT_srv_store_to_nvm</a>
 <LI><a href="#[33]">GAT_srv_tx_service_change</a>
 <LI><a href="#[287]">aci_gatt_srv_attribute_modified_event_push</a>
 <LI><a href="#[280]">GAT_srv_char_sanity_check</a>
 <LI><a href="#[27e]">GAT_srv_check_group_size</a>
 <LI><a href="#[28f]">GAT_srv_checks_for_notify</a>
 <LI><a href="#[27c]">GAT_srv_db_update_allowed</a>
 <LI><a href="#[27d]">GAT_srv_descr_sanity_check</a>
 <LI><a href="#[2ea]">L2C_discard_accumulated_acl_data</a>
 <LI><a href="#[2dd]">L2C_dynamic_allocator</a>
 <LI><a href="#[2e0]">L2C_get_link_control_block_index</a>
 <LI><a href="#[2e3]">L2C_process_basic_mode_command</a>
 <LI><a href="#[39d]">LLC_conn_get_opcode</a>
 <LI><a href="#[338]">LL_channel_selection_algorithm_2</a>
 <LI><a href="#[33d]">LL_conn_CSA_2_update_remapped_table</a>
 <LI><a href="#[33e]">LL_conn_calc_data_packet_time_st</a>
 <LI><a href="#[33c]">LL_conn_check_unmapped_channel_in_ch_map</a>
 <LI><a href="#[33f]">LL_conn_close_event</a>
 <LI><a href="#[32d]">LL_conn_copy_tx_data_packet</a>
 <LI><a href="#[34d]">LL_conn_decrement_enc_count_rx</a>
 <LI><a href="#[343]">LL_conn_get_ctrl_flds_instant</a>
 <LI><a href="#[358]">LL_conn_get_ctrl_flds_isr_p</a>
 <LI><a href="#[347]">LL_conn_get_ctrl_pdu_ctrl_fld_p</a>
 <LI><a href="#[38d]">LL_conn_init_cmn_len_upd_params</a>
 <LI><a href="#[392]">LL_conn_isr_rx_done</a>
 <LI><a href="#[391]">LL_conn_isr_tx_done</a>
 <LI><a href="#[33a]">LL_conn_modulo_37</a>
 <LI><a href="#[328]">LL_conn_slave_latency_cancelation</a>
 <LI><a href="#[326]">LL_conn_time_t1_lessthan_t2</a>
 <LI><a href="#[3b0]">LL_conn_update_cmd_rsp_timer</a>
 <LI><a href="#[36d]">LL_get_anchor_point</a>
 <LI><a href="#[339]">LL_pseudo_rand_num_gen</a>
 <LI><a href="#[374]">hci_le_connection_complete_event_push</a>
 <LI><a href="#[373]">hci_le_enhanced_connection_complete_event_push</a>
 <LI><a href="#[367]">le2ByteToInt16</a>
 <LI><a href="#[3dd]">LL_dtm_get_cntxt_p</a>
 <LI><a href="#[1d7]">EADV_start</a>
 <LI><a href="#[1e1]">EADV_stop</a>
 <LI><a href="#[119]">EADV_stop_isr</a>
 <LI><a href="#[30b]">LL_Context_ReturnFree</a>
 <LI><a href="#[31c]">LL_LE_Set_Advertising_Parameters_Default</a>
 <LI><a href="#[1df]">LL_eadv_start_legacy</a>
 <LI><a href="#[106]">UTIL_u8GetNextAdvChannel</a>
 <LI><a href="#[3e3]">aci_hal_adv_scan_resp_data_update_event_push</a>
 <LI><a href="#[118]">hci_le_advertising_set_terminated_event_push</a>
 <LI><a href="#[116]">hci_le_connection_complete_event_push</a>
 <LI><a href="#[117]">hci_le_enhanced_connection_complete_event_push</a>
 <LI><a href="#[101]">hci_le_scan_request_received_event_push</a>
 <LI><a href="#[1cb]">Dynamic_allocator_LL</a>
 <LI><a href="#[3fb]">LL_sched_calculate_priority</a>
 <LI><a href="#[3f6]">LL_sched_engine_manage_skip_cancel_slot</a>
 <LI><a href="#[3f4]">LL_sched_get_cntxt_common_p</a>
 <LI><a href="#[3f5]">LL_sched_get_cntxt_per_p</a>
 <LI><a href="#[3f7]">LL_sched_return_token</a>
 <LI><a href="#[3fa]">LL_sched_time_t1_lessthan_t2</a>
 <LI><a href="#[1d4]">Dynamic_allocator_PM</a>
 <LI><a href="#[424]">PM_Check_And_Set</a>
 <LI><a href="#[4f2]">int32ToLe4Byte</a>
 <LI><a href="#[500]">smp_Build_AuthReq_Field</a>
 <LI><a href="#[504]">smp_Build_Pairing_ReqResp_Packet</a>
 <LI><a href="#[4ff]">smp_Check_Incoming_Pairing_Parameters</a>
 <LI><a href="#[4e4]">smp_Determine_Key_Association_Method</a>
 <LI><a href="#[44d]">smp_Execute_Actions_wrt_Current_State</a>
 <LI><a href="#[4ed]">smp_Get_Long_Term_Key</a>
 <LI><a href="#[503]">smp_Get_Pairing_Parameters_From_Peer_Packet</a>
 <LI><a href="#[4e8]">smp_Keys_Distribution_Send</a>
 <LI><a href="#[4f1]">smp_LP_SR_Compute_c1_Confirm_Value</a>
 <LI><a href="#[44b]">smp_Process_Rx_Packet_wrt_Current_State</a>
 <LI><a href="#[4f4]">smp_Process_Rx_Packet_wrt_Current_State_SR_excerpt</a>
 <LI><a href="#[4fb]">smp_Set_Key_Association_Method</a>
 <LI><a href="#[4f9]">smp____SR_PairingConfirm_Receive</a>
 <LI><a href="#[4fa]">smp____SR_PairingRandom_Receive</a>
 <LI><a href="#[4f8]">smp____SR_PairingRequest_Receive</a>
 <LI><a href="#[43d]">SMP_connection_complete_handler</a>
 <LI><a href="#[43a]">aci_gap_pairing_complete_event_push</a>
 <LI><a href="#[43c]">smp_Keys_Distribution_Complete</a>
 <LI><a href="#[437]">smp_dynamic_allocator</a>
 <LI><a href="#[442]">smp_flush_rx_queues</a>
 <LI><a href="#[50a]">smp_pairing_process_abort</a>
 <LI><a href="#[43b]">smp_update_statistics_on_pairing_complete</a>
 <LI><a href="#[19c]">BleNvm_GATT_SeekRecord</a>
 <LI><a href="#[19f]">aci_hal_fw_error_event_push</a>
 <LI><a href="#[50e]">lsbit</a>
 <LI><a href="#[50c]">tsk_bitmap_init</a>
 <LI><a href="#[50d]">tsk_bitmap_merge</a>
 <LI><a href="#[221]">GAT_att_clt_check_packet</a>
 <LI><a href="#[6]">GAT_att_clt_unexpect_rx</a>
 <LI><a href="#[230]">aci_hal_fw_error_event_push</a>
 <LI><a href="#[247]">GAT_att_db_find_attr_idx_from_handle</a>
 <LI><a href="#[246]">GAT_att_db_find_attr_idx_with_conf_def</a>
 <LI><a href="#[248]">GAT_att_db_find_attr_idx_with_handle</a>
 <LI><a href="#[24d]">GAT_att_db_get_att_idx</a>
 <LI><a href="#[24c]">GAT_att_db_get_last_group_attribute</a>
 <LI><a href="#[255]">GAT_att_srv_alloc_resp_packt</a>
 <LI><a href="#[258]">GAT_att_srv_common_check</a>
 <LI><a href="#[c7]">GAT_att_srv_confirm_exc</a>
 <LI><a href="#[be]">GAT_att_srv_exchange_mtu_exc</a>
 <LI><a href="#[c6]">GAT_att_srv_exec_wr_exc</a>
 <LI><a href="#[c0]">GAT_att_srv_find_by_type_val_exc</a>
 <LI><a href="#[bf]">GAT_att_srv_find_info_exc</a>
 <LI><a href="#[25e]">GAT_att_srv_flush_rx_pckts</a>
 <LI><a href="#[256]">GAT_att_srv_get_exec_fn_id_by_op</a>
 <LI><a href="#[259]">GAT_att_srv_get_handle_range</a>
 <LI><a href="#[31]">GAT_att_srv_no_confirm_pending</a>
 <LI><a href="#[c5]">GAT_att_srv_prep_wr_exc</a>
 <LI><a href="#[c1]">GAT_att_srv_read_by_type_exc</a>
 <LI><a href="#[c2]">GAT_att_srv_read_exc</a>
 <LI><a href="#[c3]">GAT_att_srv_read_multi_exc</a>
 <LI><a href="#[26e]">GAT_att_srv_run</a>
 <LI><a href="#[276]">GAT_att_srv_send_response</a>
 <LI><a href="#[26d]">GAT_att_srv_set_attr_value_check</a>
 <LI><a href="#[264]">GAT_att_srv_value_read</a>
 <LI><a href="#[25a]">GAT_att_srv_write_err_packet</a>
 <LI><a href="#[c4]">GAT_att_srv_write_exc</a>
 <LI><a href="#[271]">GAT_srv_find_by_handle_p</a>
 <LI><a href="#[257]">PM_Get_Host_Pckt</a>
 <LI><a href="#[274]">aci_gatt_srv_read_event_push</a>
 <LI><a href="#[25f]">aci_hal_fw_error_event_push</a>
 <LI><a href="#[7]">GAT_clt_exec_empty</a>
 <LI><a href="#[27a]">GAT_clt_get_proc_per_chandle</a>
 <LI><a href="#[4c7]">hci_number_of_completed_packets_event_push</a>
 <LI><a href="#[4ca]">hci_rx_acl_data_event_push</a>
 <LI><a href="#[3ce]">LL_cpe_get_cpf</a>
 <LI><a href="#[3c2]">LL_cpe_get_ctrl_flds_common_p</a>
 <LI><a href="#[4ce]">LL_cpe_is_opcode_supporting_instant</a>
 <LI><a href="#[3ca]">LL_cpe_rxctrlpdu_checkreject</a>
 <LI><a href="#[4cd]">ll_cpe_check_instant_blocked</a>
 <LI><a href="#[3c3]">ll_cpe_check_rx_pdu_can_be_processed</a>
 <LI><a href="#[3cc]">ll_cpe_check_tx_terminate_in_progress</a>
 <LI><a href="#[4d1]">ll_cpe_clr_rx_pdu_discarded_by_one_sm</a>
 <LI><a href="#[4d0]">ll_cpe_get_active</a>
 <LI><a href="#[3c4]">ll_cpe_get_blocked_status</a>
 <LI><a href="#[3c0]">ll_cpe_get_cpid_from_sm</a>
 <LI><a href="#[3c1]">ll_cpe_get_ctrl_flds_per_sm_p</a>
 <LI><a href="#[3c7]">ll_cpe_get_expected_opcode</a>
 <LI><a href="#[4d3]">ll_cpe_get_instant_active</a>
 <LI><a href="#[4cf]">ll_cpe_get_instant_supported</a>
 <LI><a href="#[4d2]">ll_cpe_get_other_sm_init_type</a>
 <LI><a href="#[4d4]">ll_cpe_get_rx_pdu_discarded_by_one_sm</a>
 <LI><a href="#[3c8]">ll_cpe_get_state</a>
 <LI><a href="#[3c5]">ll_cpe_handle_isr_disconnect</a>
 <LI><a href="#[4d6]">ll_cpe_process_rx_pdu</a>
 <LI><a href="#[3d5]">ll_cpe_reset_state_machines</a>
 <LI><a href="#[4d7]">ll_cpe_set_expected_opcode</a>
 <LI><a href="#[4d8]">ll_cpe_state_dormant</a>
 <LI><a href="#[3cd]">ll_cpe_state_machine</a>
 <LI><a href="#[4da]">ll_cpe_state_wait4ack</a>
 <LI><a href="#[4db]">ll_cpe_state_wait4rsp</a>
 <LI><a href="#[4d9]">ll_cpe_state_wait4tx</a>
 <LI><a href="#[3cb]">valid_first_opcode</a>
 <LI><a href="#[3c6]">valid_opcode</a>
 <LI><a href="#[42b]">Reclassify_channel</a>
 <LI><a href="#[3e6]">hci_encryption_change_event_push</a>
 <LI><a href="#[3e7]">hci_encryption_key_refresh_complete_event_push</a>
 <LI><a href="#[3e4]">le3ByteToInt32</a>
 <LI><a href="#[3e5]">le4ByteToInt32</a>
 <LI><a href="#[2fd]">LLC_authenticated_payload_timeout_start_le_ping</a>
 <LI><a href="#[3ee]">LL_priv_Innerlist_size</a>
 <LI><a href="#[3f2]">LL_priv_RemoveAddrInEachListIndex</a>
 <LI><a href="#[451]">sma_Calculate_Hash</a>
 <LI><a href="#[4e2]">sma_generate_subkeys</a>
 <LI><a href="#[4e3]">sma_left_shift</a>
 <LI><a href="#[1b6]">Timer_StartFirstActive_sysT</a>
 <LI><a href="#[1b7]">Timer_TryStartFirstActive</a>
 <LI><a href="#[3ea]">hci_le_read_remote_used_features_complete_event_push</a>
 <LI><a href="#[3fc]">hci_read_remote_version_information_complete_event_push</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1a]">ADC_IRQHandler</a> from system_bluenrg_lp.o(i.ADC_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[42]">ADV_ISR</a> from ll_ext_adv.o(i.ADV_ISR) referenced from ll_ext_adv.o(i.LL_eadv_start_legacy)
 <LI><a href="#[41]">ADV_cancelslot</a> from ll_ext_adv.o(i.ADV_cancelslot) referenced from ll_ext_adv.o(i.LL_eadv_start_legacy)
 <LI><a href="#[43]">ADV_createslot</a> from ll_ext_adv.o(i.ADV_createslot) referenced from ll_ext_adv.o(i.LL_eadv_start_legacy)
 <LI><a href="#[44]">ADV_skiproutine</a> from ll_ext_adv.o(i.ADV_skiproutine) referenced from ll_ext_adv.o(i.LL_eadv_start_legacy)
 <LI><a href="#[21]">BLE_AES_IRQHandler</a> from system_bluenrg_lp.o(i.BLE_AES_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[22]">BLE_ERROR_IRQHandler</a> from bluenrg_lp_it.o(i.BLE_ERROR_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[27]">BLE_RXTX_SEQ_IRQHandler</a> from system_bluenrg_lp.o(i.BLE_RXTX_SEQ_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[20]">BLE_TX_RX_IRQHandler</a> from bluenrg_lp_it.o(i.BLE_TX_RX_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[26]">BLE_WKUP_IRQHandler</a> from bluenrg_lp_it.o(i.BLE_WKUP_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[25]">CPU_WKUP_IRQHandler</a> from bluenrg_lp_it.o(i.CPU_WKUP_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[61]">Controller_Process_Q</a> from hci_common.o(i.Controller_Process_Q) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[1f]">DMA_IRQHandler</a> from bluenrg_lp_it.o(i.DMA_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[2c]">EADV_Offline_Callback</a> from ll_ext_adv.o(i.EADV_Offline_Callback) referenced from ll_ext_adv.o(i.EADV_init)
 <LI><a href="#[4b]">Events_Process_Q</a> from events.o(i.Events_Process_Q) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from system_bluenrg_lp.o(i.FLASH_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[50]">GAP_name_disc_proc_connected_check</a> from gap_master.o(i.GAP_name_disc_proc_connected_check) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[6]">GAT_att_clt_unexpect_rx</a> from gat_att_clt.o(i.GAT_att_clt_unexpect_rx) referenced 2 times from gat_att_clt.o(.data)
 <LI><a href="#[30]">GAT_att_cmn_handle_disconnec_iterate_f</a> from gat_att_cmn.o(i.GAT_att_cmn_handle_disconnec_iterate_f) referenced from gat_att_cmn.o(i.GAT_att_cmn_timer_expire_tsk)
 <LI><a href="#[51]">GAT_att_cmn_send_pending_tsk</a> from gat_att_cmn.o(i.GAT_att_cmn_send_pending_tsk) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[2f]">GAT_att_cmn_timeout_cb</a> from gat_att_cmn.o(i.GAT_att_cmn_timeout_cb) referenced from gat_att_cmn.o(i.GAT_att_cmn_timeout_cb_wrapper)
 <LI><a href="#[2e]">GAT_att_cmn_timeout_cb_wrapper</a> from gat_att_cmn.o(i.GAT_att_cmn_timeout_cb_wrapper) referenced from gat_att_cmn.o(i.GAT_att_cmn_init)
 <LI><a href="#[52]">GAT_att_cmn_timer_expire_tsk</a> from gat_att_cmn.o(i.GAT_att_cmn_timer_expire_tsk) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[53]">GAT_att_cmn_tx_pool_evt_tsk</a> from gat_att_cmn.o(i.GAT_att_cmn_tx_pool_evt_tsk) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[c7]">GAT_att_srv_confirm_exc</a> from gat_att_srv.o(i.GAT_att_srv_confirm_exc) referenced from gat_att_srv.o(.constdata)
 <LI><a href="#[be]">GAT_att_srv_exchange_mtu_exc</a> from gat_att_srv.o(i.GAT_att_srv_exchange_mtu_exc) referenced from gat_att_srv.o(.constdata)
 <LI><a href="#[c6]">GAT_att_srv_exec_wr_exc</a> from gat_att_srv.o(i.GAT_att_srv_exec_wr_exc) referenced from gat_att_srv.o(.constdata)
 <LI><a href="#[c0]">GAT_att_srv_find_by_type_val_exc</a> from gat_att_srv.o(i.GAT_att_srv_find_by_type_val_exc) referenced from gat_att_srv.o(.constdata)
 <LI><a href="#[bf]">GAT_att_srv_find_info_exc</a> from gat_att_srv.o(i.GAT_att_srv_find_info_exc) referenced from gat_att_srv.o(.constdata)
 <LI><a href="#[31]">GAT_att_srv_no_confirm_pending</a> from gat_att_srv.o(i.GAT_att_srv_no_confirm_pending) referenced from gat_att_srv.o(i.GAT_att_srv_confirmation_pending)
 <LI><a href="#[c5]">GAT_att_srv_prep_wr_exc</a> from gat_att_srv.o(i.GAT_att_srv_prep_wr_exc) referenced from gat_att_srv.o(.constdata)
 <LI><a href="#[54]">GAT_att_srv_process_rx_pckt_tsk</a> from gat_att_srv.o(i.GAT_att_srv_process_rx_pckt_tsk) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[c1]">GAT_att_srv_read_by_type_exc</a> from gat_att_srv.o(i.GAT_att_srv_read_by_type_exc) referenced 2 times from gat_att_srv.o(.constdata)
 <LI><a href="#[c2]">GAT_att_srv_read_exc</a> from gat_att_srv.o(i.GAT_att_srv_read_exc) referenced 2 times from gat_att_srv.o(.constdata)
 <LI><a href="#[c3]">GAT_att_srv_read_multi_exc</a> from gat_att_srv.o(i.GAT_att_srv_read_multi_exc) referenced from gat_att_srv.o(.constdata)
 <LI><a href="#[c4]">GAT_att_srv_write_exc</a> from gat_att_srv.o(i.GAT_att_srv_write_exc) referenced 3 times from gat_att_srv.o(.constdata)
 <LI><a href="#[7]">GAT_clt_exec_empty</a> from gat_clt.o(i.GAT_clt_exec_empty) referenced 2 times from gat_clt.o(.data)
 <LI><a href="#[57]">GAT_clt_proc_exec_tsk</a> from gat_clt.o(i.GAT_clt_proc_exec_tsk) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[55]">GAT_srv_db_hash_tsk</a> from gat_srv.o(i.GAT_srv_db_hash_tsk) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[56]">GAT_srv_send_srv_change_tsk</a> from gat_srv.o(i.GAT_srv_send_srv_change_tsk) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[32]">GAT_srv_set_change_unaware</a> from gat_srv.o(i.GAT_srv_set_change_unaware) referenced from gat_srv.o(i.GAT_srv_generate_hash)
 <LI><a href="#[33]">GAT_srv_tx_service_change</a> from gat_srv.o(i.GAT_srv_tx_service_change) referenced from gat_srv.o(i.GAT_srv_send_srv_change_tsk)
 <LI><a href="#[1d]">GPIOA_IRQHandler</a> from system_bluenrg_lp.o(i.GPIOA_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[1e]">GPIOB_IRQHandler</a> from system_bluenrg_lp.o(i.GPIOB_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[a]">HardFault_IRQHandler</a> from bluenrg_lp_it.o(i.HardFault_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[11]">I2C1_IRQHandler</a> from system_bluenrg_lp.o(i.I2C1_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[12]">I2C2_IRQHandler</a> from system_bluenrg_lp.o(i.I2C2_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[4f]">L2C_cos_perform_pdu_reassembly_tsk_ucfg</a> from l2c_cos_resource_manager.o(i.L2C_cos_perform_pdu_reassembly_tsk_ucfg_weak) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[4d]">L2C_cos_perform_sdu_segmentation_tsk_ucfg</a> from l2c_cos_resource_manager.o(i.L2C_cos_perform_sdu_segmentation_tsk_ucfg_weak) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[4c]">L2C_cos_process_pending_actions_tsk_ucfg</a> from l2c_cos_common.o(i.L2C_cos_process_pending_actions_tsk_ucfg_weak) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[4e]">L2C_cos_transmit_pdu_packets_tsk_ucfg</a> from l2c_cos_resource_manager.o(i.L2C_cos_transmit_pdu_packets_tsk_ucfg_weak) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[5f]">LLC_authenticated_payload_timeout_processing</a> from ll_cpf_le_ping.o(i.LLC_authenticated_payload_timeout_processing) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[40]">LLC_le_ping</a> from ll_cpf_le_ping.o(i.LLC_le_ping) referenced from ll_cpe.o(i.LL_cpe_init)
 <LI><a href="#[5d]">LLC_offline_control_procedures_processing</a> from hci_common.o(i.LLC_offline_control_procedures_processing) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[3d]">LL_channel_map_update</a> from ll_cpf_channel_map_update.o(i.LL_channel_map_update) referenced from ll_cpe.o(i.LL_cpe_init)
 <LI><a href="#[38]">LL_conn_isr</a> from ll_connect.o(i.LL_conn_isr) referenced from ll_connect.o(i.LL_conn_go_to_connect)
 <LI><a href="#[39]">LL_conn_program_next_taskslot</a> from ll_connect.o(i.LL_conn_program_next_taskslot) referenced from ll_connect.o(i.LL_conn_go_to_connect)
 <LI><a href="#[3a]">LL_conn_reschedule_taskslot_params</a> from ll_connect.o(i.LL_conn_reschedule_taskslot_params) referenced from ll_connect.o(i.LL_conn_go_to_connect)
 <LI><a href="#[60]">LL_conn_slave_sleep_latency_cancellation_check</a> from hci_common.o(i.LL_conn_slave_sleep_latency_cancellation_check) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[37]">LL_connect_cancel_taskslot_dummy</a> from ll_connect.o(i.LL_connect_cancel_taskslot_dummy) referenced from ll_connect.o(i.LL_conn_go_to_connect)
 <LI><a href="#[3b]">LL_cpf_conn_upd</a> from ll_cpf_connection_update.o(i.LL_cpf_conn_upd) referenced from ll_cpe.o(i.LL_cpe_init)
 <LI><a href="#[3c]">LL_encryption</a> from ll_cpf_encryption.o(i.LL_encryption) referenced from ll_cpe.o(i.LL_cpe_init)
 <LI><a href="#[3e]">LL_feature_exchange</a> from ll_cpf_feature_exchange.o(i.LL_feature_exchange) referenced from ll_cpe.o(i.LL_cpe_init)
 <LI><a href="#[2b]">LL_priv_notallow_resolvinglistaccess_function</a> from ll_ext_adv.o(i.LL_priv_notallow_resolvinglistaccess_function) referenced from ll_ext_adv.o(i.EADV_init)
 <LI><a href="#[5c]">LL_priv_u8OfflineProcessing_ucfg</a> from ll_privacy.o(i.LL_priv_u8OfflineProcessing_ucfg_weak) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[3f]">LL_version_exchange</a> from ll_cpf_version_exchange.o(i.LL_version_exchange) referenced from ll_cpe.o(i.LL_cpe_init)
 <LI><a href="#[17]">LPUART1_IRQHandler</a> from system_bluenrg_lp.o(i.LPUART1_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[24]">MR_BLE_IRQHandler</a> from system_bluenrg_lp.o(i.MR_BLE_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[9]">NMI_IRQHandler</a> from bluenrg_lp_it.o(i.NMI_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[1b]">PKA_IRQHandler</a> from pka_manager_bluenrg_lp.o(i.PKA_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[2a]">PRIV_offline_callbackr</a> from ll_ext_adv.o(i.PRIV_offline_callbackr) referenced from ll_ext_adv.o(i.EADV_init)
 <LI><a href="#[10]">PVD_IRQHandler</a> from system_bluenrg_lp.o(i.PVD_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[c]">PendSV_IRQHandler</a> from system_bluenrg_lp.o(i.PendSV_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[49]">Process_InputData</a> from serial_port.o(i.Process_InputData) referenced from ble_serialport_main.o(i.main)
 <LI><a href="#[23]">RADIO_CTRL_IRQHandler</a> from system_bluenrg_lp.o(i.RADIO_CTRL_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[f]">RCC_IRQHandler</a> from system_bluenrg_lp.o(i.RCC_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[8]">RESET_HANDLER</a> from system_bluenrg_lp.o(i.RESET_HANDLER) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[19]">RTC_IRQHandler</a> from system_bluenrg_lp.o(i.RTC_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[5a]">SMP_process_pending_rx_packets_tsk</a> from securitymgr.o(i.SMP_process_pending_rx_packets_tsk) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[58]">SMP_process_sc_ecc_pk_generation_tsk_ucfg</a> from securitymgr.o(i.SMP_process_sc_ecc_pk_generation_tsk_ucfg_weak) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[59]">SMP_process_state_transition_actions_tsk</a> from securitymgr.o(i.SMP_process_state_transition_actions_tsk) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[13]">SPI1_IRQHandler</a> from system_bluenrg_lp.o(i.SPI1_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[14]">SPI2_IRQHandler</a> from system_bluenrg_lp.o(i.SPI2_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[15]">SPI3_IRQHandler</a> from system_bluenrg_lp.o(i.SPI3_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[b]">SVC_IRQHandler</a> from bluenrg_lp_it.o(i.SVC_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[d]">SysTick_IRQHandler</a> from bluenrg_lp_it.o(i.SysTick_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[18]">TIM1_IRQHandler</a> from system_bluenrg_lp.o(i.TIM1_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[1c]">UPCONV_IRQHandler</a> from system_bluenrg_lp.o(i.UPCONV_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[16]">USART1_IRQHandler</a> from bluenrg_lp_it.o(i.USART1_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[29]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[a3]">aci_att_clt_exec_write_resp_event_cb</a> from events_gatt.o(i.aci_att_clt_exec_write_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[9c]">aci_att_clt_find_by_type_value_resp_event_cb</a> from events_gatt.o(i.aci_att_clt_find_by_type_value_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[9b]">aci_att_clt_find_info_resp_event_cb</a> from events_gatt.o(i.aci_att_clt_find_info_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[a2]">aci_att_clt_prepare_write_resp_event_cb</a> from events_gatt.o(i.aci_att_clt_prepare_write_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[9f]">aci_att_clt_read_blob_resp_event_cb</a> from events_gatt.o(i.aci_att_clt_read_blob_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[a1]">aci_att_clt_read_by_group_type_resp_event_cb</a> from events_gatt.o(i.aci_att_clt_read_by_group_type_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[9d]">aci_att_clt_read_by_type_resp_event_cb</a> from events_gatt.o(i.aci_att_clt_read_by_type_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[a0]">aci_att_clt_read_multiple_resp_event_cb</a> from events_gatt.o(i.aci_att_clt_read_multiple_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[9e]">aci_att_clt_read_resp_event_cb</a> from events_gatt.o(i.aci_att_clt_read_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[9a]">aci_att_exchange_mtu_resp_event_cb</a> from events_gatt.o(i.aci_att_exchange_mtu_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[ae]">aci_att_srv_exec_write_req_event_cb</a> from events_gatt.o(i.aci_att_srv_exec_write_req_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[ad]">aci_att_srv_prepare_write_req_event_cb</a> from events_gatt.o(i.aci_att_srv_prepare_write_req_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[8c]">aci_gap_addr_not_resolved_event_cb</a> from events_gap.o(i.aci_gap_addr_not_resolved_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[8a]">aci_gap_bond_lost_event_cb</a> from events_smp.o(i.aci_gap_bond_lost_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[8e]">aci_gap_keypress_notification_event_cb_ucfg</a> from events_smp.o(i.aci_gap_keypress_notification_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[86]">aci_gap_limited_discoverable_event_cb</a> from events_gap.o(i.aci_gap_limited_discoverable_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[8d]">aci_gap_numeric_comparison_value_event_cb_ucfg</a> from events_smp.o(i.aci_gap_numeric_comparison_value_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[87]">aci_gap_pairing_complete_event_cb</a> from events_smp.o(i.aci_gap_pairing_complete_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[88]">aci_gap_pass_key_req_event_cb</a> from events_smp.o(i.aci_gap_pass_key_req_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[8b]">aci_gap_proc_complete_event_cb</a> from events_gap.o(i.aci_gap_proc_complete_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[89]">aci_gap_slave_security_initiated_event_cb</a> from events_smp.o(i.aci_gap_slave_security_initiated_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[a8]">aci_gatt_clt_disc_read_char_by_uuid_resp_event_cb</a> from events_gatt.o(i.aci_gatt_clt_disc_read_char_by_uuid_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[a7]">aci_gatt_clt_error_resp_event_cb</a> from events_gatt.o(i.aci_gatt_clt_error_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[a4]">aci_gatt_clt_indication_event_cb</a> from events_gatt.o(i.aci_gatt_clt_indication_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[a5]">aci_gatt_clt_notification_event_cb</a> from events_gatt.o(i.aci_gatt_clt_notification_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[a6]">aci_gatt_clt_proc_complete_event_cb</a> from events_gatt.o(i.aci_gatt_clt_proc_complete_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[99]">aci_gatt_proc_timeout_event_cb</a> from events_gatt.o(i.aci_gatt_proc_timeout_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[98]">aci_gatt_srv_attribute_modified_event_cb</a> from events_gatt.o(i.aci_gatt_srv_attribute_modified_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[aa]">aci_gatt_srv_confirmation_event_cb</a> from events_gatt.o(i.aci_gatt_srv_confirmation_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[ab]">aci_gatt_srv_read_event_cb</a> from events_gatt.o(i.aci_gatt_srv_read_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[ac]">aci_gatt_srv_write_event_cb</a> from events_gatt.o(i.aci_gatt_srv_write_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[a9]">aci_gatt_tx_pool_available_event_cb</a> from events_gatt.o(i.aci_gatt_tx_pool_available_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[75]">aci_hal_adv_scan_resp_data_update_event_cb</a> from events_llc.o(i.aci_hal_adv_scan_resp_data_update_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[74]">aci_hal_fw_error_event_cb</a> from events_llc.o(i.aci_hal_fw_error_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[73]">aci_hal_scan_req_report_event_cb_ucfg</a> from events_llc.o(i.aci_hal_scan_req_report_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[92]">aci_l2cap_cfc_connection_event_cb_ucfg</a> from events_l2cap.o(i.aci_l2cap_cfc_connection_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[95]">aci_l2cap_command_reject_event_cb</a> from events_l2cap.o(i.aci_l2cap_command_reject_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[91]">aci_l2cap_connection_update_req_event_cb</a> from events_l2cap.o(i.aci_l2cap_connection_update_req_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[8f]">aci_l2cap_connection_update_resp_event_cb</a> from events_l2cap.o(i.aci_l2cap_connection_update_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[93]">aci_l2cap_disconnection_complete_event_cb_ucfg</a> from events_l2cap.o(i.aci_l2cap_disconnection_complete_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[94]">aci_l2cap_flow_control_credit_event_cb_ucfg</a> from events_l2cap.o(i.aci_l2cap_flow_control_credit_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[90]">aci_l2cap_proc_timeout_event_cb</a> from events_l2cap.o(i.aci_l2cap_proc_timeout_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[97]">aci_l2cap_sdu_data_rx_event_cb_ucfg</a> from events_l2cap.o(i.aci_l2cap_sdu_data_rx_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[96]">aci_l2cap_sdu_data_tx_event_cb_ucfg</a> from events_l2cap.o(i.aci_l2cap_sdu_data_tx_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[34]">calibration_callback</a> from rf_driver_hal_vtimer.o(i.calibration_callback) referenced from rf_driver_hal_vtimer.o(i.HAL_VTIMER_Init)
 <LI><a href="#[5e]">channel_Update_Offline_Processing</a> from ll_cpf_channel_map_update.o(i.channel_Update_Offline_Processing) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[28]">fputc</a> from bluenrg_lp_evb_com.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[46]">gap_timers_callback</a> from gap_common.o(i.gap_timers_callback) referenced from gap_common.o(i.gap_timers_callback_wrapper)
 <LI><a href="#[2d]">gap_timers_callback_wrapper</a> from gap_common.o(i.gap_timers_callback_wrapper) referenced from gap_common.o(i.GAP_init_context)
 <LI><a href="#[5b]">hci_acl_Process_Q</a> from hci_acl_data.o(i.hci_acl_Process_Q) referenced from stacklib_tasks.o(.constdata)
 <LI><a href="#[b0]">hci_acl_data_ind_event_int_cb</a> from acl.o(i.hci_acl_data_ind_event_int_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[af]">hci_acl_data_tx_cmpl_event_int_cb</a> from acl.o(i.hci_acl_data_tx_cmpl_event_int_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[72]">hci_authenticated_payload_timeout_expired_event_cb</a> from events_hci.o(i.hci_authenticated_payload_timeout_expired_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[71]">hci_data_buffer_overflow_event_cb</a> from events_hci.o(i.hci_data_buffer_overflow_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[62]">hci_disconnection_complete_event_cb</a> from events_hci.o(i.hci_disconnection_complete_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[b1]">hci_disconnection_complete_event_int_cb</a> from events.o(i.hci_disconnection_complete_event_int_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[63]">hci_encryption_change_event_cb</a> from events_hci.o(i.hci_encryption_change_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[b2]">hci_encryption_change_event_int_cb</a> from events.o(i.hci_encryption_change_event_int_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[64]">hci_encryption_key_refresh_complete_event_cb</a> from events_hci.o(i.hci_encryption_key_refresh_complete_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[b3]">hci_encryption_key_refresh_complete_event_int_cb</a> from events.o(i.hci_encryption_key_refresh_complete_event_int_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[66]">hci_le_advertising_report_event_cb_ucfg</a> from events_hci.o(i.hci_le_advertising_report_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[b5]">hci_le_advertising_report_event_int_cb</a> from events.o(i.hci_le_advertising_report_event_int_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[6e]">hci_le_advertising_set_terminated_event_cb_ucfg</a> from events_hci.o(i.hci_le_advertising_set_terminated_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[bd]">hci_le_advertising_set_terminated_event_int_cb</a> from events.o(i.hci_le_advertising_set_terminated_event_int_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[7e]">hci_le_channel_selection_algorithm_event_cb</a> from events_hci.o(i.hci_le_channel_selection_algorithm_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[65]">hci_le_connection_complete_event_cb</a> from events_hci.o(i.hci_le_connection_complete_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[b4]">hci_le_connection_complete_event_int_cb</a> from events.o(i.hci_le_connection_complete_event_int_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[80]">hci_le_connection_iq_report_event_cb_ucfg</a> from events_hci.o(i.hci_le_connection_iq_report_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[76]">hci_le_connection_update_complete_event_cb</a> from events_hci.o(i.hci_le_connection_update_complete_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[7f]">hci_le_connectionless_iq_report_event_cb_ucfg</a> from events_hci.o(i.hci_le_connectionless_iq_report_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[81]">hci_le_cte_request_failed_event_cb_ucfg</a> from events_hci.o(i.hci_le_cte_request_failed_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[78]">hci_le_data_length_change_event_cb_ucfg</a> from events_hci.o(i.hci_le_data_length_change_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[6b]">hci_le_direct_advertising_report_event_cb_ucfg</a> from events_hci.o(i.hci_le_direct_advertising_report_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[ba]">hci_le_direct_advertising_report_event_int_cb</a> from events.o(i.hci_le_direct_advertising_report_event_int_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[6a]">hci_le_enhanced_connection_complete_event_cb</a> from events_hci.o(i.hci_le_enhanced_connection_complete_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[b9]">hci_le_enhanced_connection_complete_event_int_cb</a> from events.o(i.hci_le_enhanced_connection_complete_event_int_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[6c]">hci_le_extended_advertising_report_event_cb_ucfg</a> from events_hci.o(i.hci_le_extended_advertising_report_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[bb]">hci_le_extended_advertising_report_event_int_cb</a> from events.o(i.hci_le_extended_advertising_report_event_int_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[69]">hci_le_generate_dhkey_complete_event_cb_ucfg</a> from events_hci.o(i.hci_le_generate_dhkey_complete_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[b8]">hci_le_generate_dhkey_complete_event_int_cb</a> from events.o(i.hci_le_generate_dhkey_complete_event_int_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[67]">hci_le_long_term_key_request_event_cb</a> from events_hci.o(i.hci_le_long_term_key_request_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[b6]">hci_le_long_term_key_request_event_int_cb</a> from events.o(i.hci_le_long_term_key_request_event_int_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[83]">hci_le_path_loss_threshold_event_cb_ucfg</a> from events_hci.o(i.hci_le_path_loss_threshold_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[7b]">hci_le_periodic_advertising_report_event_cb_ucfg</a> from events_hci.o(i.hci_le_periodic_advertising_report_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[7a]">hci_le_periodic_advertising_sync_established_event_cb_ucfg</a> from events_hci.o(i.hci_le_periodic_advertising_sync_established_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[7c]">hci_le_periodic_advertising_sync_lost_event_cb_ucfg</a> from events_hci.o(i.hci_le_periodic_advertising_sync_lost_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[82]">hci_le_periodic_advertising_sync_transfer_received_event_cb_ucfg</a> from events_hci.o(i.hci_le_periodic_advertising_sync_transfer_received_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[79]">hci_le_phy_update_complete_event_cb_ucfg</a> from events_hci.o(i.hci_le_phy_update_complete_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[68]">hci_le_read_local_p256_public_key_complete_event_cb_ucfg</a> from events_hci.o(i.hci_le_read_local_p256_public_key_complete_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[b7]">hci_le_read_local_p256_public_key_complete_event_int_cb</a> from events.o(i.hci_le_read_local_p256_public_key_complete_event_int_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[77]">hci_le_read_remote_used_features_complete_event_cb</a> from events_hci.o(i.hci_le_read_remote_used_features_complete_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[7d]">hci_le_scan_request_received_event_cb_ucfg</a> from events_hci.o(i.hci_le_scan_request_received_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[6d]">hci_le_scan_timeout_event_cb_ucfg</a> from events_hci.o(i.hci_le_scan_timeout_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[bc]">hci_le_scan_timeout_event_int_cb</a> from events.o(i.hci_le_scan_timeout_event_int_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[84]">hci_le_transmit_power_reporting_event_cb_ucfg</a> from events_hci.o(i.hci_le_transmit_power_reporting_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[70]">hci_number_of_completed_packets_event_cb</a> from events_hci.o(i.hci_number_of_completed_packets_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[6f]">hci_read_remote_version_information_complete_event_cb</a> from events_hci.o(i.hci_read_remote_version_information_complete_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[85]">hci_rx_acl_data_event_cb</a> from events_hci.o(i.hci_rx_acl_data_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[47]">l2cap_timers_callback</a> from l2cap.o(i.l2cap_timers_callback) referenced from l2cap.o(i.l2cap_timers_callback_wrapper)
 <LI><a href="#[35]">l2cap_timers_callback_wrapper</a> from l2cap.o(i.l2cap_timers_callback_wrapper) referenced from l2cap.o(i.L2C_Init)
 <LI><a href="#[48]">llc_timers_callback</a> from ll_routines.o(i.llc_timers_callback) referenced from ll_routines.o(i.llc_timers_callback_wrapper)
 <LI><a href="#[36]">llc_timers_callback_wrapper</a> from ll_routines.o(i.llc_timers_callback_wrapper) referenced from ll_routines.o(i.LL_Init)
 <LI><a href="#[4a]">sm_timers_callback</a> from smp_common.o(i.sm_timers_callback) referenced from smp_common.o(i.sm_timers_callback_wrapper)
 <LI><a href="#[45]">sm_timers_callback_wrapper</a> from smp_common.o(i.sm_timers_callback_wrapper) referenced from smp_common.o(i.SMP_Init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c8]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
</UL>

<P><STRONG><a name="[c9]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[cb]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[510]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[511]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[512]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[cc]"></a>blue_unit_conversion</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, blue_unit_conversion.o(. text))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul32
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SetRadioTimerValue
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SetRadioHostWakeupTime
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_MachineTimeToSysTime
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetPastSysTime
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_to_machinetime
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_system_time
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cal_delay
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_time_and_machine
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_xtal_startup_time
</UL>

<P><STRONG><a name="[513]"></a>CS_contextSave</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, context_switch.o(. text), UNUSED)

<P><STRONG><a name="[472]"></a>CS_contextRestore</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, context_switch.o(. text))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
</UL>

<P><STRONG><a name="[16a]"></a>Osal_MemCpy</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, osal_memcpy.o(. text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Init
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_long_term_key_request_evt_hndl
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_enhanced_connection_complete_evt_hndl
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_copy
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event_copy
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_copy
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_prepare_write_resp_event_copy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_generate_new_rpa
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_push
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_push
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_discard_accumulated_acl_data
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Set_Random_Address
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_rm_att_range
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_insert
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_write_to_flat
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_cmp_128bits
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_write_gatt_client_data
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_hvtx
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_type
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_attribute_modified_event_push
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_store_to_nvm
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_incl_srv_val
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_chr_descr_val
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_chr_decl_val
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_generate_hash
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_aes_cmac_append
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_parameters
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Resolvable_Private_Address
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_static_random_address
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_rpa
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_public_address
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_repeated_attacks_protection_start
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_AddRecord
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_CSRK
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_connection_complete_handler
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_add_pairing_record_to_bonding_database
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_LP_s1_Generate_STK
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_SR_Compute_c1_Confirm_Value
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Long_Term_Key
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_generate_EDIV_recovery_DIV
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_GATT_UpdateData
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_GATT_GetData
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_get_security_data_record
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_write
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_read
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_vPrepareAdvOrRspLegacyPacket
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_scan_request_received_event_push
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_push
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_push
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_exc
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_exc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_prep_wr_exc
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_handle_range
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_exchange_mtu_exc
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_remote_used_features_complete_event_push
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_Calculate_Hash
</UL>

<P><STRONG><a name="[e7]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[ce]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[cf]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[d1]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[d3]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[d6]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[514]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[515]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[516]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[517]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[518]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[519]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[51a]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[51b]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[51c]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[51d]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[51e]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[51f]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[520]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[521]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[522]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[523]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[524]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[525]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[526]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[527]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[528]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[db]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[529]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[52a]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[52b]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[52c]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[52d]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[52e]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[52f]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[ca]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[530]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[531]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[d5]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[532]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[d7]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 2552 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; ModulesTick &rArr; NVMDB_Tick &rArr; NVMDB_CleanDB &rArr; CleanLargeDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[533]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[f6]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[da]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[534]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[dc]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_UpdateCalibrationData
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulesInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinueCleanLargeDB
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLargeDB
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_resp
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_is_supported_grouping_type
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_attr_p
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_disconnection
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_tx_service_change
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_store_to_nvm
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_from_nvm
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_add_pairing_record_to_bonding_database
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Determine_Key_Association_Method
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[535]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[46b]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartFirstActive_sysT
</UL>

<P><STRONG><a name="[536]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_attribute_modified_event
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_Over_BLE
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Connection
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Serial_port_Service
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_port_DeviceInit
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulesInit
</UL>

<P><STRONG><a name="[e1]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[e2]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[e0]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[d0]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[537]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__printf</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[418]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_CompareCurrentRecord
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBufferToFlash
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Tick
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_DeleteRecord
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_CompareCurrentRecord
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveCacheOp
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecordInCache
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNextRecordNoLock
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentRecordNoLock
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextRecordNoLock
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDBToRAM
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheInsertData
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheFindOperation
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_set_char_value
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>

<P><STRONG><a name="[538]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>__aeabi_memmove4</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rt_memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_block_write
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_block_copy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>

<P><STRONG><a name="[539]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__aeabi_memmove</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rt_memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveCacheOp
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheRequestBuffer
</UL>

<P><STRONG><a name="[53a]"></a>__rt_memmove</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDBToRAM
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSmallDB
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanPage
</UL>

<P><STRONG><a name="[ee]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[ed]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[53b]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
</UL>

<P><STRONG><a name="[53c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_uread4</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_HW_enc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetChannelMap
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Append
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_AdvConvStringToSrambledIntWithType
</UL>

<P><STRONG><a name="[53d]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[53e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_Init
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutConfig
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cal_delay
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_calc_data_packet_time_st
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_selection_algorithm_2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_tx_pool_evt_tsk
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_u8GetNextAdvChannel
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_check_packet
</UL>

<P><STRONG><a name="[53f]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[540]"></a>__aeabi_idivmod</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[f1]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[d2]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[d4]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[df]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[f3]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[f4]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[d9]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[dd]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[541]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[542]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[543]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[544]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[545]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>ACL_list_get_pckt_count</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, acl_list.o(i.ACL_list_get_pckt_count))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_send_pending_tsk
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_process_rx_pckt_tsk
</UL>

<P><STRONG><a name="[238]"></a>ACL_list_init</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, acl_list.o(i.ACL_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_init
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_per_init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_init
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_handle_isr_disconnect
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_Init
</UL>

<P><STRONG><a name="[44c]"></a>ACL_list_insert_head</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, acl_list.o(i.ACL_list_insert_head))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_process_pending_rx_packets_tsk
</UL>

<P><STRONG><a name="[23f]"></a>ACL_list_insert_tail</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, acl_list.o(i.ACL_list_insert_tail))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_acl_data_hndl
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_send
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
</UL>

<P><STRONG><a name="[234]"></a>ACL_list_remove</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, acl_list.o(i.ACL_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_disconnection
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_close_event
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_resp
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_flush_user_pending_list
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_flush_rx_queues
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_flush_rx_pckts
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_Process_Q
</UL>

<P><STRONG><a name="[241]"></a>ACL_list_remove_head</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, acl_list.o(i.ACL_list_remove_head))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_send_pending_tsk
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_process_pending_rx_packets_tsk
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_process_rx_pckt_tsk
</UL>

<P><STRONG><a name="[1a]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[42]"></a>ADV_ISR</STRONG> (Thumb, 584 bytes, Stack size unknown bytes, ll_ext_adv.o(i.ADV_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ADV_ISR &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_ClearRadioTimerValue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SetRadioCloseTimeout
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetTxMode
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetRemapChan
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SetRcvLen
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetPllTrig
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketClrPllTrig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_IntGetIntStatusTxDone
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_IntGetIntStatusRxOk
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobEnableBlue
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_test_address_in_ConnIDList
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_AdvConvStringToSrambledIntWithType
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_priority
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_priority_min
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_u32ProcessAdvPacket_ucfg
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_add_to_ConnIDList
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_get_rx_common_buffer_p
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_createslot
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_scan_request_received_event_push
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_u8GetNextAdvChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_ext_adv.o(i.LL_eadv_start_legacy)
</UL>
<P><STRONG><a name="[41]"></a>ADV_cancelslot</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, ll_ext_adv.o(i.ADV_cancelslot))
<BR>[Address Reference Count : 1]<UL><LI> ll_ext_adv.o(i.LL_eadv_start_legacy)
</UL>
<P><STRONG><a name="[43]"></a>ADV_createslot</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, ll_ext_adv.o(i.ADV_createslot))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetTxPhy
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetRxPhy
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobEnableBlue
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_map
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_get_tx_common_buffer_p
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_vPrepareAdvOrRspLegacyPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_ext_adv.o(i.LL_eadv_start_legacy)
</UL>
<P><STRONG><a name="[44]"></a>ADV_skiproutine</STRONG> (Thumb, 434 bytes, Stack size unknown bytes, ll_ext_adv.o(i.ADV_skiproutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ADV_skiproutine &rArr; HAL_VTIMER_GetCurrentSysTime &rArr; TIMER_GetCurrentSysTime &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_GetCurrentSysTime
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_time_t1_ge_t2
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetTxMode
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetRemapChan
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_priority_min
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine_return_actual_scheduler_margin
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number32
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_switchbackupdata_data_struc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_push
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_push
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_set_terminated_event_push
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_u8GetNextAdvChannel
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_stop_isr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_anchor
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_ext_adv.o(i.LL_eadv_start_legacy)
</UL>
<P><STRONG><a name="[11c]"></a>AESMGR_Encrypt</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, aes_manager_bluenrg_lp.o(i.AESMGR_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AESMGR_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_HW_enc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_aes128_encrypt
</UL>

<P><STRONG><a name="[40c]"></a>AESMGR_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, aes_manager_bluenrg_lp.o(i.AESMGR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AESMGR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulesInit
</UL>

<P><STRONG><a name="[11b]"></a>AES_128_HW_enc</STRONG> (Thumb, 114 bytes, Stack size 80 bytes, aes_hw.o(i.AES_128_HW_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AES_128_HW_enc &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AESMGR_Encrypt
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Append
</UL>

<P><STRONG><a name="[11e]"></a>AES_CMAC_Encrypt_Append</STRONG> (Thumb, 628 bytes, Stack size 96 bytes, crypto.o(i.AES_CMAC_Encrypt_Append))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_128_HW_enc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Finish
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_generate_hash
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_aes_cmac_append
</UL>

<P><STRONG><a name="[11f]"></a>AES_CMAC_Encrypt_Finish</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, crypto.o(i.AES_CMAC_Encrypt_Finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Append
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_generate_hash
</UL>

<P><STRONG><a name="[120]"></a>AES_CMAC_Encrypt_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, crypto.o(i.AES_CMAC_Encrypt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = AES_CMAC_Encrypt_Init &rArr; AESstdInitEnc
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AESstdInitEnc
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_generate_hash
</UL>

<P><STRONG><a name="[122]"></a>APP_Tick</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, serial_port.o(i.APP_Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = APP_Tick &rArr; Send_Data_Over_BLE &rArr; aci_gatt_srv_notify &rArr; GAT_srv_notify &rArr; GAT_att_srv_hvtx &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_Over_BLE
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[319]"></a>Acl_Init</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, acl.o(i.Acl_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[125]"></a>Acl_Rcv_Pkt_Handler</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, acl.o(i.Acl_Rcv_Pkt_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[128]"></a>Acl_Transmit_Data</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, acl.o(i.Acl_Transmit_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_send_frame
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_Process_Q
</UL>

<P><STRONG><a name="[12a]"></a>Acl_Tx_Cmpl_Pkt_Handler</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, acl.o(i.Acl_Tx_Cmpl_Pkt_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_handle_isr_disconnect
</UL>

<P><STRONG><a name="[12b]"></a>Add_Serial_port_Service</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gatt_db.o(i.Add_Serial_port_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Add_Serial_port_Service &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_get_char_decl_handle
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_add_service
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_port_DeviceInit
</UL>

<P><STRONG><a name="[46e]"></a>BLECNTR_ClearInterrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_ClearInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[3f8]"></a>BLECNTR_ClearSemareq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_ClearSemareq))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>

<P><STRONG><a name="[36e]"></a>BLECNTR_DemodDelaySt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_DemodDelaySt))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[37c]"></a>BLECNTR_GeTimer2TimeoutForIfs</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GeTimer2TimeoutForIfs))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_start_legacy
</UL>

<P><STRONG><a name="[12f]"></a>BLECNTR_GlobDisableBlue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GlobDisableBlue))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_InitGlobal
</UL>

<P><STRONG><a name="[10b]"></a>BLECNTR_GlobEnableBlue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GlobEnableBlue))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_createslot
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[13d]"></a>BLECNTR_GlobEnableIntnoactivelerrorInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GlobEnableIntnoactivelerrorInt))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_InitGlobal
</UL>

<P><STRONG><a name="[13f]"></a>BLECNTR_GlobEnableOverrunAct2Int</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GlobEnableOverrunAct2Int))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_InitGlobal
</UL>

<P><STRONG><a name="[13c]"></a>BLECNTR_GlobSetChkflagautoclearena</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GlobSetChkflagautoclearena))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_InitGlobal
</UL>

<P><STRONG><a name="[135]"></a>BLECNTR_GlobSetInitRadioDelayTxCal</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GlobSetInitRadioDelayTxCal))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_InitGlobal
</UL>

<P><STRONG><a name="[136]"></a>BLECNTR_GlobSetInitRadioDelayTxNocal</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GlobSetInitRadioDelayTxNocal))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_InitGlobal
</UL>

<P><STRONG><a name="[13e]"></a>BLECNTR_GlobSetRadioConfigP</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GlobSetRadioConfigP))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_InitGlobal
</UL>

<P><STRONG><a name="[130]"></a>BLECNTR_GlobSetWakeupinitdelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GlobSetWakeupinitdelay))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_InitGlobal
</UL>

<P><STRONG><a name="[13a]"></a>BLECNTR_GlobWriteConfigEnd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GlobWriteConfigEnd))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_InitGlobal
</UL>

<P><STRONG><a name="[133]"></a>BLECNTR_GlobWriteRcvdelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GlobWriteRcvdelay))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_InitGlobal
</UL>

<P><STRONG><a name="[134]"></a>BLECNTR_GlobWriteRcvdelay1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GlobWriteRcvdelay1))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_InitGlobal
</UL>

<P><STRONG><a name="[3f9]"></a>BLECNTR_GlobWriteSlot</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GlobWriteSlot))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>

<P><STRONG><a name="[131]"></a>BLECNTR_GlobWriteTimer12initdelaycal</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GlobWriteTimer12initdelaycal))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_InitGlobal
</UL>

<P><STRONG><a name="[132]"></a>BLECNTR_GlobWriteTimer2initdelaynocal</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GlobWriteTimer2initdelaynocal))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_InitGlobal
</UL>

<P><STRONG><a name="[13b]"></a>BLECNTR_GlobWriteTxDataReadyCheck</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GlobWriteTxDataReadyCheck))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_InitGlobal
</UL>

<P><STRONG><a name="[139]"></a>BLECNTR_GlobWriteTxReadyTimeout</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GlobWriteTxReadyTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_InitGlobal
</UL>

<P><STRONG><a name="[137]"></a>BLECNTR_GlobWriteTxdelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GlobWriteTxdelay))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_InitGlobal
</UL>

<P><STRONG><a name="[138]"></a>BLECNTR_GlobWriteTxdelayEnd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GlobWriteTxdelayEnd))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_InitGlobal
</UL>

<P><STRONG><a name="[12e]"></a>BLECNTR_InitGlobal</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_InitGlobal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLECNTR_InitGlobal
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobWriteTxdelayEnd
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobWriteTxdelay
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobWriteTxReadyTimeout
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobWriteTxDataReadyCheck
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobWriteTimer2initdelaynocal
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobWriteTimer12initdelaycal
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobWriteRcvdelay1
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobWriteRcvdelay
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobWriteConfigEnd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobSetWakeupinitdelay
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobSetRadioConfigP
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobSetInitRadioDelayTxNocal
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobSetInitRadioDelayTxCal
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobSetChkflagautoclearena
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobEnableOverrunAct2Int
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobEnableIntnoactivelerrorInt
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobDisableBlue
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulesInit
</UL>

<P><STRONG><a name="[177]"></a>BLECNTR_IntGetIntStatusAnyHwError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_IntGetIntStatusAnyHwError))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[175]"></a>BLECNTR_IntGetIntStatusBitAct2Error</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_IntGetIntStatusBitAct2Error))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[176]"></a>BLECNTR_IntGetIntStatusBitTimerOverrun</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_IntGetIntStatusBitTimerOverrun))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[39a]"></a>BLECNTR_IntGetIntStatusCrcErr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_IntGetIntStatusCrcErr))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[16e]"></a>BLECNTR_IntGetIntStatusDone</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_IntGetIntStatusDone))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[39c]"></a>BLECNTR_IntGetIntStatusEncErr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_IntGetIntStatusEncErr))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[398]"></a>BLECNTR_IntGetIntStatusLenErr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_IntGetIntStatusLenErr))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[174]"></a>BLECNTR_IntGetIntStatusNoactiveError</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_IntGetIntStatusNoactiveError))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[f8]"></a>BLECNTR_IntGetIntStatusRxOk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_IntGetIntStatusRxOk))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[397]"></a>BLECNTR_IntGetIntStatusTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_IntGetIntStatusTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[f9]"></a>BLECNTR_IntGetIntStatusTxDone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_IntGetIntStatusTxDone))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[39e]"></a>BLECNTR_IntGetIntStatusTxOk</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_IntGetIntStatusTxOk))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[3a3]"></a>BLECNTR_PacketClrCteSamplingEn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketClrCteSamplingEn))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[39b]"></a>BLECNTR_PacketClrIncChan</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketClrIncChan))
<BR><BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
</UL>

<P><STRONG><a name="[100]"></a>BLECNTR_PacketClrPllTrig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketClrPllTrig))
<BR><BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[329]"></a>BLECNTR_PacketGetDataPtr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketGetDataPtr))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_enhanced_get_latency
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_program_next_taskslot
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_close_event
</UL>

<P><STRONG><a name="[140]"></a>BLECNTR_PacketInitTo0</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketInitTo0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BLECNTR_PacketInitTo0 &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
</UL>

<P><STRONG><a name="[142]"></a>BLECNTR_PacketSetAdvPduFormat</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetAdvPduFormat), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RADIO_SetAdvertise
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
</UL>

<P><STRONG><a name="[144]"></a>BLECNTR_PacketSetCrcinitSel</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetCrcinitSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLECNTR_PacketSetCrcinitSel
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RADIO_SetCRCInitializationSelector
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
</UL>

<P><STRONG><a name="[3a5]"></a>BLECNTR_PacketSetCteSamplingEn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetCteSamplingEn))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[32c]"></a>BLECNTR_PacketSetDataPtr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetDataPtr))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
</UL>

<P><STRONG><a name="[382]"></a>BLECNTR_PacketSetIncChan</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetIncChan))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
</UL>

<P><STRONG><a name="[37a]"></a>BLECNTR_PacketSetIntCrcErr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetIntCrcErr))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
</UL>

<P><STRONG><a name="[376]"></a>BLECNTR_PacketSetIntDone</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetIntDone))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
</UL>

<P><STRONG><a name="[377]"></a>BLECNTR_PacketSetIntRcvOk</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetIntRcvOk))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
</UL>

<P><STRONG><a name="[379]"></a>BLECNTR_PacketSetIntTimeout</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetIntTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
</UL>

<P><STRONG><a name="[378]"></a>BLECNTR_PacketSetIntTxOk</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetIntTxOk))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
</UL>

<P><STRONG><a name="[383]"></a>BLECNTR_PacketSetKeepsemareq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetKeepsemareq))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
</UL>

<P><STRONG><a name="[37b]"></a>BLECNTR_PacketSetNextPtr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetNextPtr))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
</UL>

<P><STRONG><a name="[146]"></a>BLECNTR_PacketSetNextRxMode</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetNextRxMode), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RADIO_SetNextTxMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
</UL>

<P><STRONG><a name="[37f]"></a>BLECNTR_PacketSetNextSlot</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetNextSlot))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
</UL>

<P><STRONG><a name="[148]"></a>BLECNTR_PacketSetNextTxMode</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetNextTxMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLECNTR_PacketSetNextTxMode
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RADIO_SetNextTxMode
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
</UL>

<P><STRONG><a name="[37e]"></a>BLECNTR_PacketSetNsEn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetNsEn))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
</UL>

<P><STRONG><a name="[108]"></a>BLECNTR_PacketSetPllTrig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetPllTrig))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[149]"></a>BLECNTR_PacketSetRxReady</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetRxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLECNTR_PacketSetRxReady
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RADIO_SetAllTableDataReady
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
</UL>

<P><STRONG><a name="[37d]"></a>BLECNTR_PacketSetTimeout</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
</UL>

<P><STRONG><a name="[380]"></a>BLECNTR_PacketSetTimer2Active</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetTimer2Active))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
</UL>

<P><STRONG><a name="[3e1]"></a>BLECNTR_PacketSetTimerTrigDone</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetTimerTrigDone), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
</UL>

<P><STRONG><a name="[381]"></a>BLECNTR_PacketSetTimerTrigRcv</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetTimerTrigRcv))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
</UL>

<P><STRONG><a name="[14b]"></a>BLECNTR_PacketSetTxReady</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetTxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLECNTR_PacketSetTxReady
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RADIO_SetAllTableDataReady
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
</UL>

<P><STRONG><a name="[10a]"></a>BLECNTR_SetRcvLen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SetRcvLen))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_program_next_taskslot
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[14d]"></a>BLECNTR_SmEnRadioConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmEnRadioConfig))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmInitTo0
</UL>

<P><STRONG><a name="[354]"></a>BLECNTR_SmEncOff</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmEncOff))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_encryption_on_off_routine
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[355]"></a>BLECNTR_SmEncOn</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmEncOn))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_encryption_on_off_routine
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[3b1]"></a>BLECNTR_SmGetAccessAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmGetAccessAddr))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_latency_cancelation
</UL>

<P><STRONG><a name="[33b]"></a>BLECNTR_SmGetChannelMap</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmGetChannelMap))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_selection_algorithm_2
</UL>

<P><STRONG><a name="[3ab]"></a>BLECNTR_SmGetEncIvPtr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmGetEncIvPtr))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_process_enc_params
</UL>

<P><STRONG><a name="[3aa]"></a>BLECNTR_SmGetEncKeyPtr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmGetEncKeyPtr))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_process_enc_params
</UL>

<P><STRONG><a name="[353]"></a>BLECNTR_SmGetEncStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmGetEncStatus))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_encryption_on_off_routine
</UL>

<P><STRONG><a name="[3ae]"></a>BLECNTR_SmGetHopIncr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmGetHopIncr))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_latency_cancelation
</UL>

<P><STRONG><a name="[352]"></a>BLECNTR_SmGetMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmGetMode))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_encryption_on_off_routine
</UL>

<P><STRONG><a name="[399]"></a>BLECNTR_SmGetRemapChan</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmGetRemapChan))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[34e]"></a>BLECNTR_SmGetRxCount</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmGetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_decrement_enc_count_rx
</UL>

<P><STRONG><a name="[38c]"></a>BLECNTR_SmGetRxPhy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmGetRxPhy))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_guard_time_for_close_conn_event
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[366]"></a>BLECNTR_SmGetTxPhy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmGetTxPhy))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_guard_time_for_close_conn_event
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[14c]"></a>BLECNTR_SmInitTo0</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmInitTo0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BLECNTR_SmInitTo0 &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmEnRadioConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_BLUE_SM
</UL>

<P><STRONG><a name="[385]"></a>BLECNTR_SmSetAccessAddr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmSetAccessAddr))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_BLUE_SM
</UL>

<P><STRONG><a name="[14e]"></a>BLECNTR_SmSetChannelMap</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmSetChannelMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLECNTR_SmSetChannelMap
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
</UL>

<P><STRONG><a name="[387]"></a>BLECNTR_SmSetCrcInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmSetCrcInit))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_BLUE_SM
</UL>

<P><STRONG><a name="[1db]"></a>BLECNTR_SmSetDataLength</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmSetDataLength))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start
</UL>

<P><STRONG><a name="[386]"></a>BLECNTR_SmSetHopIncr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmSetHopIncr))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_BLUE_SM
</UL>

<P><STRONG><a name="[107]"></a>BLECNTR_SmSetRemapChan</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmSetRemapChan))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[14f]"></a>BLECNTR_SmSetRxCount</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmSetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLECNTR_SmSetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RADIO_SetPacketCounterRx_39_24
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_decrement_enc_count_rx
</UL>

<P><STRONG><a name="[151]"></a>BLECNTR_SmSetRxCountDirectionBit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmSetRxCountDirectionBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLECNTR_SmSetRxCountDirectionBit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RADIO_SetPacketCounterRx_39_24
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
</UL>

<P><STRONG><a name="[370]"></a>BLECNTR_SmSetRxMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmSetRxMode))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_BLUE_SM
</UL>

<P><STRONG><a name="[389]"></a>BLECNTR_SmSetRxPacketPtr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmSetRxPacketPtr))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_BLUE_SM
</UL>

<P><STRONG><a name="[10e]"></a>BLECNTR_SmSetRxPhy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmSetRxPhy))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_createslot
</UL>

<P><STRONG><a name="[152]"></a>BLECNTR_SmSetTxCount</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmSetTxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLECNTR_SmSetTxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RADIO_SetPacketCounterTx_39_32
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[154]"></a>BLECNTR_SmSetTxCountDirectionBit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmSetTxCountDirectionBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLECNTR_SmSetTxCountDirectionBit
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RADIO_SetPacketCounterTx_39_32
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[102]"></a>BLECNTR_SmSetTxMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmSetTxMode))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_BLUE_SM
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[388]"></a>BLECNTR_SmSetTxPacketPtr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmSetTxPacketPtr))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_BLUE_SM
</UL>

<P><STRONG><a name="[10d]"></a>BLECNTR_SmSetTxPhy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmSetTxPhy))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_createslot
</UL>

<P><STRONG><a name="[309]"></a>BLECNTR_SmSetTxPwr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmSetTxPwr), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_BLUE_SM
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak
</UL>

<P><STRONG><a name="[384]"></a>BLECNTR_SmSetUnmappedChan</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmSetUnmappedChan))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_latency_cancelation
</UL>

<P><STRONG><a name="[3a1]"></a>BLECNTR_SmToggleNesn</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmToggleNesn))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_receive_data
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[155]"></a>BLEPLAT_CalculateRSSI</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, miscutil.o(i.BLEPLAT_CalculateRSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BLEPLAT_CalculateRSSI &rArr; BLEPLAT_GetRawRSSIRegs
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_GetRawRSSIRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr
</UL>

<P><STRONG><a name="[156]"></a>BLEPLAT_GetRawRSSIRegs</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, miscutil.o(i.BLEPLAT_GetRawRSSIRegs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLEPLAT_GetRawRSSIRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CalculateRSSI
</UL>

<P><STRONG><a name="[157]"></a>BLEPLAT_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nvm_db_upper_layer.o(i.BLEPLAT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BLEPLAT_Init &rArr; NVMDB_Init &rArr; NVMDB_get_info
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_HandleInit
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulesInit
</UL>

<P><STRONG><a name="[15a]"></a>BLEPLAT_NvmAdd</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, nvm_db_upper_layer.o(i.BLEPLAT_NvmAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = BLEPLAT_NvmAdd &rArr; NVMDB_AppendRecord &rArr; NVMDB_AppendRecordNoCache &rArr; WriteRecord &rArr; write_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_AppendRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_AddRecord
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_GATT_UpdateData
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_DEV_ID_DATA_AddRecord
</UL>

<P><STRONG><a name="[15c]"></a>BLEPLAT_NvmCompare</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nvm_db_upper_layer.o(i.BLEPLAT_NvmCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BLEPLAT_NvmCompare &rArr; NVMDB_CompareCurrentRecord &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_CompareCurrentRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_GATT_UpdateData
</UL>

<P><STRONG><a name="[15e]"></a>BLEPLAT_NvmDiscard</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nvm_db_upper_layer.o(i.BLEPLAT_NvmDiscard))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Erase
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_DeleteRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_AddRecord
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_RemoveRecord
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_GATT_UpdateData
</UL>

<P><STRONG><a name="[161]"></a>BLEPLAT_NvmGet</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, nvm_db_upper_layer.o(i.BLEPLAT_NvmGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_ReadNextRecord
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_ReadCurrentRecord
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_HandleInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_DEV_ID_DATA_GetRecord
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_Dump
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_GetRecordNumber
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_GATT_GetData
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_GATT_SeekRecord
</UL>

<P><STRONG><a name="[164]"></a>BLEPLAT_SetHighPower</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, miscutil.o(i.BLEPLAT_SetHighPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BLEPLAT_SetHighPower &rArr; HAL_SetHighPower
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetHighPower
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Set_TX_Power_Level
</UL>

<P><STRONG><a name="[166]"></a>BLEPLAT_aes128_encrypt</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, bluenrgx_aes.o(i.BLEPLAT_aes128_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = BLEPLAT_aes128_encrypt &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AESMGR_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_process_enc_params
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
</UL>

<P><STRONG><a name="[167]"></a>BLEPLAT_get_part_info</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, miscutil.o(i.BLEPLAT_get_part_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BLEPLAT_get_part_info &rArr; HAL_GetPartInfo &rArr; LL_GetRAMSize
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetPartInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_ConfigData
</UL>

<P><STRONG><a name="[21]"></a>BLE_AES_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.BLE_AES_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[22]"></a>BLE_ERROR_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bluenrg_lp_it.o(i.BLE_ERROR_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLE_ERROR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[27]"></a>BLE_RXTX_SEQ_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.BLE_RXTX_SEQ_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[169]"></a>BLE_STACK_Init</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BLE_STACK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BLE_STACK_Init &rArr; _BlueNRG_Stack_Initialization &rArr; HAL_VTIMER_ClearRadioTimerValue &rArr; TIMER_GetCurrentSysTime &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_buffer_size_value
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulesInit
</UL>

<P><STRONG><a name="[16d]"></a>BLE_STACK_RadioHandler</STRONG> (Thumb, 200 bytes, Stack size unknown bytes, ll_isr.o(i.BLE_STACK_RadioHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = BLE_STACK_RadioHandler &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetAnchorPoint
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_GetCurrentSysTime
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_ClearRadioTimerValue
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_time_t1_ge_t2
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_per_state
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_done_cb
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_current_taskslot_no
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_task
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_IntGetIntStatusNoactiveError
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_IntGetIntStatusDone
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_IntGetIntStatusBitTimerOverrun
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_IntGetIntStatusBitAct2Error
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_IntGetIntStatusAnyHwError
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TX_RX_IRQHandler
</UL>

<P><STRONG><a name="[41c]"></a>BLE_STACK_ReadNextRadioActivity</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, aci_hal.o(i.BLE_STACK_ReadNextRadioActivity))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_TimeCheck
</UL>

<P><STRONG><a name="[179]"></a>BLE_STACK_Tick</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BLE_STACK_Tick))
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_scheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulesTick
</UL>

<P><STRONG><a name="[20]"></a>BLE_TX_RX_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bluenrg_lp_it.o(i.BLE_TX_RX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = BLE_TX_RX_IRQHandler &rArr; BLE_STACK_RadioHandler &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_RadioTimerIsr
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[26]"></a>BLE_WKUP_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bluenrg_lp_it.o(i.BLE_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BLE_WKUP_IRQHandler &rArr; HAL_VTIMER_WakeUpCallback &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_WakeUpCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[46c]"></a>BSP_COM_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bluenrg_lp_evb_com.o(i.BSP_COM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_COM_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[17d]"></a>BSP_COM_Init</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, bluenrg_lp_evb_com.o(i.BSP_COM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_COM_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_8_15
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB_EnableClock
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[428]"></a>BSP_COM_Write</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bluenrg_lp_evb_com.o(i.BSP_COM_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_COM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_InputData
</UL>

<P><STRONG><a name="[185]"></a>BSP_IO_Init</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, bluenrg_lp_evb_io.o(i.BSP_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_IO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_EnablePUB
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_EnablePUA
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_EnablePDB
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_EnablePDA
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18a]"></a>BSP_LED_Init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, bluenrg_lp_evb_led.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_LED_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KENDOL2_HAL_Init
</UL>

<P><STRONG><a name="[2db]"></a>BSP_LED_Off</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bluenrg_lp_evb_led.o(i.BSP_LED_Off))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KENDOL2_main
</UL>

<P><STRONG><a name="[2dc]"></a>BSP_LED_On</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bluenrg_lp_evb_led.o(i.BSP_LED_On))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KENDOL2_main
</UL>

<P><STRONG><a name="[190]"></a>BSP_PB_GetState</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bluenrg_lp_evb_button.o(i.BSP_PB_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PB_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[192]"></a>BSP_PB_Init</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, bluenrg_lp_evb_button.o(i.BSP_PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_PB_Init &rArr; LL_GPIO_SetPinPull
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_SetTrigger
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KENDOL2_HAL_Init
</UL>

<P><STRONG><a name="[199]"></a>BleNvm_DEV_ID_DATA_AddRecord</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, stacklib_nvm.o(i.BleNvm_DEV_ID_DATA_AddRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = BleNvm_DEV_ID_DATA_AddRecord &rArr; BLEPLAT_NvmAdd &rArr; NVMDB_AppendRecord &rArr; NVMDB_AppendRecordNoCache &rArr; WriteRecord &rArr; write_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
</UL>

<P><STRONG><a name="[19a]"></a>BleNvm_DEV_ID_DATA_GetRecord</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, stacklib_nvm.o(i.BleNvm_DEV_ID_DATA_GetRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = BleNvm_DEV_ID_DATA_GetRecord &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
</UL>

<P><STRONG><a name="[19b]"></a>BleNvm_GATT_GetData</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, stacklib_nvm.o(i.BleNvm_GATT_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = BleNvm_GATT_GetData &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmGet
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_GATT_SeekRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_read_peer_bonded_data
</UL>

<P><STRONG><a name="[19e]"></a>BleNvm_GATT_UpdateData</STRONG> (Thumb, 134 bytes, Stack size unknown bytes, stacklib_nvm.o(i.BleNvm_GATT_UpdateData))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = BleNvm_GATT_UpdateData &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmDiscard
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmCompare
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmAdd
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_GATT_SeekRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_write_gatt_client_data
</UL>

<P><STRONG><a name="[1a0]"></a>BleNvm_SEC_AddRecord</STRONG> (Thumb, 274 bytes, Stack size unknown bytes, stacklib_nvm.o(i.BleNvm_SEC_AddRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = BleNvm_SEC_AddRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmDiscard
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmAdd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_GetRecord
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_add_pairing_record_to_bonding_database
</UL>

<P><STRONG><a name="[1a2]"></a>BleNvm_SEC_Dump</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, stacklib_nvm.o(i.BleNvm_SEC_Dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = BleNvm_SEC_Dump &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_GetRecord
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>

<P><STRONG><a name="[42d]"></a>BleNvm_SEC_DumpInit</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, stacklib_nvm.o(i.BleNvm_SEC_DumpInit))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>

<P><STRONG><a name="[1a1]"></a>BleNvm_SEC_GetRecord</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, stacklib_nvm.o(i.BleNvm_SEC_GetRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = BleNvm_SEC_GetRecord &rArr; BleNvm_SEC_Dump &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_Dump
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Resolve_Private_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_write_gatt_client_data
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_AddRecord
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_RemoveRecord
</UL>

<P><STRONG><a name="[1a4]"></a>BleNvm_SEC_GetRecordNumber</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, stacklib_nvm.o(i.BleNvm_SEC_GetRecordNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = BleNvm_SEC_GetRecordNumber &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmGet
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_get_records_count
</UL>

<P><STRONG><a name="[1a5]"></a>BleNvm_SEC_RemoveRecord</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, stacklib_nvm.o(i.BleNvm_SEC_RemoveRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = BleNvm_SEC_RemoveRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmDiscard
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_GetRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_write_gatt_client_data
</UL>

<P><STRONG><a name="[25]"></a>CPU_WKUP_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bluenrg_lp_it.o(i.CPU_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CPU_WKUP_IRQHandler &rArr; HAL_VTIMER_TimeoutCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_TimeoutCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[20e]"></a>CST_init</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, stacklib_timers.o(i.CST_init))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_init_context
</UL>

<P><STRONG><a name="[1b3]"></a>CST_start</STRONG> (Thumb, 232 bytes, Stack size unknown bytes, stacklib_timers.o(i.CST_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = CST_start &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCurrentSysTime
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_stop
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartFirstActive_sysT
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_generate_new_rpa
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_acl_cframe_signaling_hndl
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_start_timer
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_discoverability_mode
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_reset_timer
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_cb
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_processing
</UL>

<P><STRONG><a name="[1b5]"></a>CST_stop</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, stacklib_timers.o(i.CST_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_TryStartFirstActive
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_limited_discoverable_event_check
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_hci_disconnection_complete_evt_hndl
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_pre_process_incoming_response_packet
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_stop_timer
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_discoverability_mode
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_start
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_reset_timer
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_reset
</UL>

<P><STRONG><a name="[1c6]"></a>Clock_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, clock.o(i.Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Clock_Init &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>Controller_Process_Q</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, hci_common.o(i.Controller_Process_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Controller_Process_Q &rArr; LL_cpe_engine &rArr; ll_cpe_handle_isr_disconnect &rArr; LLC_authenticated_payload_timeout_reset &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[1f]"></a>DMA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg_lp_it.o(i.DMA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[305]"></a>Data_Len_Update_Offline_Processing_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_routines.o(i.Data_Len_Update_Offline_Processing_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_offline_control_procedures_processing
</UL>

<P><STRONG><a name="[546]"></a>Data_Len_Update_Offline_Processing_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_routines.o(i.Data_Len_Update_Offline_Processing_ucfg_weak), UNUSED)

<P><STRONG><a name="[2c]"></a>EADV_Offline_Callback</STRONG> (Thumb, 204 bytes, Stack size unknown bytes, ll_ext_adv.o(i.EADV_Offline_Callback))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ext_scan_get_cntxt_p
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_AdvConvStringToSrambledIntWithType
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_vPeerPrivateAddress_ucfg
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_vOwnPrivateAddress_ucfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_ext_adv.o(i.EADV_init)
</UL>
<P><STRONG><a name="[1d0]"></a>EADV_init</STRONG> (Thumb, 162 bytes, Stack size unknown bytes, ll_ext_adv.o(i.EADV_init))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ext_scan_get_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator_LL
</UL>

<P><STRONG><a name="[110]"></a>EADV_vPrepareAdvOrRspLegacyPacket</STRONG> (Thumb, 238 bytes, Stack size unknown bytes, ll_ext_adv.o(i.EADV_vPrepareAdvOrRspLegacyPacket))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_sel_algo2
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_createslot
</UL>

<P><STRONG><a name="[4b]"></a>Events_Process_Q</STRONG> (Thumb, 248 bytes, Stack size unknown bytes, events.o(i.Events_Process_Q))
<BR><BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_hardware_error_event
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_radio_activity_state_callback_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[1ad]"></a>Events_Process_init</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, events.o(i.Events_Process_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Events_Process_init &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator_EVNT
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_radio_activity_state_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.FLASH_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[4ad]"></a>GAP_DiscProcTimeoutcb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, gap_master.o(i.GAP_DiscProcTimeoutcb_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_timers_callback
</UL>

<P><STRONG><a name="[547]"></a>GAP_DiscProcTimeoutcb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, gap_master.o(i.GAP_DiscProcTimeoutcb_ucfg_weak), UNUSED)

<P><STRONG><a name="[1eb]"></a>GAP_Init</STRONG> (Thumb, 296 bytes, Stack size unknown bytes, gap_common.o(i.GAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = GAP_Init &rArr; IDD_Initialize_Device_IDs &rArr; BleNvm_DEV_ID_DATA_GetRecord &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic_csr_ucfg
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_adv_scan_enabled_ucfg
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_controller_random_address_ucfg
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_enable_controller_privacy_ucfg
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_check_and_set_role_ucfg
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_set_event_mask
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_event_mask
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
</UL>

<P><STRONG><a name="[1f4]"></a>GAP_LimDiscTimeoutcb</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, gap_common.o(i.GAP_LimDiscTimeoutcb))
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_adv_scan_enabled_ucfg
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_advertising_enable_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_timers_callback
</UL>

<P><STRONG><a name="[1f6]"></a>GAP_PrivateAddrTimercb</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, gap_common.o(i.GAP_PrivateAddrTimercb))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GAP_PrivateAddrTimercb &rArr; CST_start &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_controller_random_address_ucfg
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Resolvable_Private_Address
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_suspend_resume_active_advertising_sets_ucfg
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_enable_disable_scan_ucfg
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_check_adv_status
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_start
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_timers_callback
</UL>

<P><STRONG><a name="[1fb]"></a>GAP_Terminate_Link</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gap_common.o(i.GAP_Terminate_Link))
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Disconnect_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_terminate
</UL>

<P><STRONG><a name="[21b]"></a>GAP_advEvtProp_to_advType</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, gap_slave.o(i.GAP_advEvtProp_to_advType), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_legacy_advertising_configuration
</UL>

<P><STRONG><a name="[1f7]"></a>GAP_check_adv_status</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, gap_slave.o(i.GAP_check_adv_status))
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_extended_scan_supported
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
</UL>

<P><STRONG><a name="[1ed]"></a>GAP_check_and_set_role_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, gap_common.o(i.GAP_check_and_set_role_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[548]"></a>GAP_check_and_set_role_ucfg_weak</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, gap_common.o(i.GAP_check_and_set_role_ucfg_weak), UNUSED)

<P><STRONG><a name="[491]"></a>GAP_check_discoverability_mode</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, gap_slave.o(i.GAP_check_discoverability_mode))
<BR><BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_advertising_configuration
</UL>

<P><STRONG><a name="[1fe]"></a>GAP_check_flags</STRONG> (Thumb, 166 bytes, Stack size unknown bytes, gap_slave.o(i.GAP_check_flags), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_search_flags_index
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_legacy_advertising_enable
</UL>

<P><STRONG><a name="[210]"></a>GAP_discover_peer_name_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, gap_master.o(i.GAP_discover_peer_name_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_name_disc_proc_connected_check
</UL>

<P><STRONG><a name="[549]"></a>GAP_discover_peer_name_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gap_master.o(i.GAP_discover_peer_name_ucfg_weak), UNUSED)

<P><STRONG><a name="[1ee]"></a>GAP_enable_controller_privacy_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, gap_common.o(i.GAP_enable_controller_privacy_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[54a]"></a>GAP_enable_controller_privacy_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gap_common.o(i.GAP_enable_controller_privacy_ucfg_weak), UNUSED)

<P><STRONG><a name="[1f9]"></a>GAP_enable_disable_scan_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, gap_master.o(i.GAP_enable_disable_scan_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
</UL>

<P><STRONG><a name="[54b]"></a>GAP_enable_disable_scan_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gap_master.o(i.GAP_enable_disable_scan_ucfg_weak), UNUSED)

<P><STRONG><a name="[201]"></a>GAP_generate_new_rpa</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, gap_common.o(i.GAP_generate_new_rpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GAP_generate_new_rpa &rArr; CST_start &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_controller_random_address_ucfg
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Resolvable_Private_Address
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_start
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_advertising_configuration
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_legacy_advertising_enable
</UL>

<P><STRONG><a name="[202]"></a>GAP_get_current_address</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, gap_common.o(i.GAP_get_current_address))
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_static_random_address
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_rpa
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_public_address
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_own_address_type
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_enhanced_connection_complete_evt_hndl
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_connection_complete_evt_hndl
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_SR_Compute_c1_Confirm_Value
</UL>

<P><STRONG><a name="[207]"></a>GAP_get_identity_address_type</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, gap_common.o(i.GAP_get_identity_address_type))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_own_address_type
</UL>

<P><STRONG><a name="[204]"></a>GAP_get_own_address_type</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, gap_common.o(i.GAP_get_own_address_type))
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_identity_address_type
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_legacy_advertising_configuration
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_current_address
</UL>

<P><STRONG><a name="[206]"></a>GAP_get_public_address</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, gap_common.o(i.GAP_get_public_address))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_current_address
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_local_identity_address
</UL>

<P><STRONG><a name="[203]"></a>GAP_get_rpa</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, gap_common.o(i.GAP_get_rpa))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_current_address
</UL>

<P><STRONG><a name="[205]"></a>GAP_get_static_random_address</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, gap_common.o(i.GAP_get_static_random_address))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_current_address
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_local_identity_address
</UL>

<P><STRONG><a name="[4b5]"></a>GAP_hci_disconnection_complete_evt_hndl</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, gap_common.o(i.GAP_hci_disconnection_complete_evt_hndl))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event_int_cb
</UL>

<P><STRONG><a name="[208]"></a>GAP_hci_le_advertising_report_evt_hndl</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, gap_common.o(i.GAP_hci_le_advertising_report_evt_hndl))
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_parse_connectable_advertising_report_ucfg
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_parse_advertising_report_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_extended_advertising_report_event_int_cb
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event_int_cb
</UL>

<P><STRONG><a name="[4b8]"></a>GAP_hci_le_advertising_set_terminated_evt_hndl_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, gap_common.o(i.GAP_hci_le_advertising_set_terminated_evt_hndl_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_set_terminated_event_int_cb
</UL>

<P><STRONG><a name="[54c]"></a>GAP_hci_le_advertising_set_terminated_evt_hndl_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, gap_common.o(i.GAP_hci_le_advertising_set_terminated_evt_hndl_ucfg_weak), UNUSED)

<P><STRONG><a name="[20b]"></a>GAP_hci_le_connection_complete_evt_hndl</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, gap_common.o(i.GAP_hci_le_connection_complete_evt_hndl))
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_slave_connection_complete_handler_ucfg
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_master_connection_complete_handler_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_int_cb
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_int_cb
</UL>

<P><STRONG><a name="[1b1]"></a>GAP_init_context</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, gap_common.o(i.GAP_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAP_init_context &rArr; GAP_dynamic_allocator &rArr; csmem_mem_assign &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_dynamic_allocator
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[20d]"></a>GAP_master_connection_complete_handler_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, gap_master.o(i.GAP_master_connection_complete_handler_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_hci_le_connection_complete_evt_hndl
</UL>

<P><STRONG><a name="[54d]"></a>GAP_master_connection_complete_handler_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, gap_master.o(i.GAP_master_connection_complete_handler_ucfg_weak), UNUSED)

<P><STRONG><a name="[50]"></a>GAP_name_disc_proc_connected_check</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, gap_master.o(i.GAP_name_disc_proc_connected_check))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_discover_peer_name_ucfg
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_wrapper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[20a]"></a>GAP_parse_advertising_report_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, gap_master.o(i.GAP_parse_advertising_report_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_hci_le_advertising_report_evt_hndl
</UL>

<P><STRONG><a name="[54e]"></a>GAP_parse_advertising_report_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gap_master.o(i.GAP_parse_advertising_report_ucfg_weak), UNUSED)

<P><STRONG><a name="[209]"></a>GAP_parse_connectable_advertising_report_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, gap_master.o(i.GAP_parse_connectable_advertising_report_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_hci_le_advertising_report_evt_hndl
</UL>

<P><STRONG><a name="[54f]"></a>GAP_parse_connectable_advertising_report_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gap_master.o(i.GAP_parse_connectable_advertising_report_ucfg_weak), UNUSED)

<P><STRONG><a name="[1ff]"></a>GAP_search_flags_index</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, gap_slave.o(i.GAP_search_flags_index), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_check_flags
</UL>

<P><STRONG><a name="[492]"></a>GAP_set_advertising_configuration_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, aci_gap_slave.o(i.GAP_set_advertising_configuration_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_advertising_configuration
</UL>

<P><STRONG><a name="[212]"></a>GAP_set_advertising_configuration_ucfg_weak</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, aci_gap_slave.o(i.GAP_set_advertising_configuration_ucfg_weak), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_legacy_advertising_configuration
</UL>

<P><STRONG><a name="[493]"></a>GAP_set_advertising_data_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, aci_gap_slave.o(i.GAP_set_advertising_data_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_advertising_data
</UL>

<P><STRONG><a name="[214]"></a>GAP_set_advertising_data_ucfg_weak</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, aci_gap_slave.o(i.GAP_set_advertising_data_ucfg_weak), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_legacy_advertising_data
</UL>

<P><STRONG><a name="[1f5]"></a>GAP_set_advertising_enable_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, aci_gap_slave.o(i.GAP_set_advertising_enable_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_advertising_enable
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LimDiscTimeoutcb
</UL>

<P><STRONG><a name="[216]"></a>GAP_set_advertising_enable_ucfg_weak</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, aci_gap_slave.o(i.GAP_set_advertising_enable_ucfg_weak), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_legacy_advertising_enable
</UL>

<P><STRONG><a name="[1f3]"></a>GAP_set_controller_random_address_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, gap_common.o(i.GAP_set_controller_random_address_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_generate_new_rpa
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
</UL>

<P><STRONG><a name="[218]"></a>GAP_set_controller_random_address_ucfg_weak</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gap_common.o(i.GAP_set_controller_random_address_ucfg_weak), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_random_address
</UL>

<P><STRONG><a name="[213]"></a>GAP_set_legacy_advertising_configuration</STRONG> (Thumb, 152 bytes, Stack size unknown bytes, gap_slave.o(i.GAP_set_legacy_advertising_configuration), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_parameters
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_advEvtProp_to_advType
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_own_address_type
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_advertising_configuration_ucfg_weak
</UL>

<P><STRONG><a name="[215]"></a>GAP_set_legacy_advertising_data</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, gap_slave.o(i.GAP_set_legacy_advertising_data), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_set_legacy_advertising_data_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_advertising_data_ucfg_weak
</UL>

<P><STRONG><a name="[217]"></a>GAP_set_legacy_advertising_enable</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, gap_slave.o(i.GAP_set_legacy_advertising_enable), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_generate_new_rpa
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_enable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_check_flags
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_discoverability_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_advertising_enable_ucfg_weak
</UL>

<P><STRONG><a name="[20c]"></a>GAP_slave_connection_complete_handler_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, gap_common.o(i.GAP_slave_connection_complete_handler_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_hci_le_connection_complete_evt_hndl
</UL>

<P><STRONG><a name="[21f]"></a>GAP_slave_connection_complete_handler_ucfg_weak</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, gap_common.o(i.GAP_slave_connection_complete_handler_ucfg_weak), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_limited_discoverable_event_check
</UL>

<P><STRONG><a name="[1fa]"></a>GAP_suspend_resume_active_advertising_sets_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, gap_slave.o(i.GAP_suspend_resume_active_advertising_sets_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
</UL>

<P><STRONG><a name="[220]"></a>GAP_suspend_resume_active_advertising_sets_ucfg_weak</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gap_slave.o(i.GAP_suspend_resume_active_advertising_sets_ucfg_weak), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_enable
</UL>

<P><STRONG><a name="[223]"></a>GAT_att_clt_connection</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gat_att_clt.o(i.GAT_att_clt_connection))
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_connection
</UL>

<P><STRONG><a name="[225]"></a>GAT_att_clt_disconnection</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gat_att_clt.o(i.GAT_att_clt_disconnection))
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_disconnection
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_disconnection
</UL>

<P><STRONG><a name="[227]"></a>GAT_att_clt_init</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gat_att_clt.o(i.GAT_att_clt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_att_clt_init &rArr; GAT_clt_init &rArr; csmem_mem_assign &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_init
</UL>

<P><STRONG><a name="[229]"></a>GAT_att_clt_rcv</STRONG> (Thumb, 182 bytes, Stack size unknown bytes, gat_att_clt.o(i.GAT_att_clt_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GAT_att_clt_rcv &rArr; GAT_att_cmn_stop_timer &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_stop_timer
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_start_timer
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_descr_p
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_rcv_srv_initiated
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_rcv_corrupted
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_unexpect_rx
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_check_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_rcv
</UL>

<P><STRONG><a name="[231]"></a>GAT_att_cmn_connection</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, gat_att_cmn.o(i.GAT_att_cmn_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_connection &rArr; GAT_att_srv_connection &rArr; GAT_srv_connection &rArr; GAT_srv_is_bonded &rArr; SMP_check_is_device_bonded &rArr; SDB_Find_Record &rArr; BleNvm_SEC_GetRecord &rArr; BleNvm_SEC_Dump &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_connection
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_int_cb
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_int_cb
</UL>

<P><STRONG><a name="[233]"></a>GAT_att_cmn_disconnection</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, gat_att_cmn.o(i.GAT_att_cmn_disconnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_disconnection &rArr; GAT_att_srv_disconnection &rArr; GAT_srv_disconnection &rArr; GAT_srv_store_to_nvm &rArr; SDB_write_gatt_client_data &rArr; BleNvm_SEC_RemoveRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_forget_device_by_conn_handle
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_disconnection
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_disconnection
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_remove
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_stop_timer
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_descr_p
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event_int_cb
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_handle_disconnec_iterate_f
</UL>

<P><STRONG><a name="[243]"></a>GAT_att_cmn_for_each_conn_descr</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, gat_att_cmn.o(i.GAT_att_cmn_for_each_conn_descr))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_confirmation_pending
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_send_srv_change_tsk
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_generate_hash
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_timer_expire_tsk
</UL>

<P><STRONG><a name="[22a]"></a>GAT_att_cmn_get_conn_descr_p</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, gat_att_cmn.o(i.GAT_att_cmn_get_conn_descr_p))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_disconnection
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_resp
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_checks_for_notify
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_hvtx
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_store_to_nvm
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_from_nvm
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_rcv
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_alloc_resp_packt
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_process_rx_pckt_tsk
</UL>

<P><STRONG><a name="[237]"></a>GAT_att_cmn_get_conn_index</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, gat_att_cmn.o(i.GAT_att_cmn_get_conn_index))
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_descr_p
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_val
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_disconnection
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_tx_service_change
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_store_to_nvm
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_cccd_val
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_from_nvm
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_chr_val
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_stop_timer
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_start_timer
</UL>

<P><STRONG><a name="[30]"></a>GAT_att_cmn_handle_disconnec_iterate_f</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, gat_att_cmn.o(i.GAT_att_cmn_handle_disconnec_iterate_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_handle_disconnec_iterate_f &rArr; GAT_att_cmn_disconnection &rArr; GAT_att_srv_disconnection &rArr; GAT_srv_disconnection &rArr; GAT_srv_store_to_nvm &rArr; SDB_write_gatt_client_data &rArr; BleNvm_SEC_RemoveRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_disconnection
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_cmn.o(i.GAT_att_cmn_timer_expire_tsk)
</UL>
<P><STRONG><a name="[1b0]"></a>GAT_att_cmn_init</STRONG> (Thumb, 134 bytes, Stack size unknown bytes, gat_att_cmn.o(i.GAT_att_cmn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_init &rArr; csmem_mem_assign &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[23a]"></a>GAT_att_cmn_rcv</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, gat_att_cmn.o(i.GAT_att_cmn_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_rcv &rArr; GAT_att_srv_rcv &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_descr_p
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_mux_acl_packet
</UL>

<P><STRONG><a name="[23c]"></a>GAT_att_cmn_send</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, gat_att_cmn.o(i.GAT_att_cmn_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Resize_Pckt_Pdu_Size
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_send_frame
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_insert_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_hvtx
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_send_pending_tsk
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_send_response
</UL>

<P><STRONG><a name="[51]"></a>GAT_att_cmn_send_pending_tsk</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, gat_att_cmn.o(i.GAT_att_cmn_send_pending_tsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_send_pending_tsk &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_remove_head
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_get_pckt_count
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[22e]"></a>GAT_att_cmn_start_timer</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, gat_att_cmn.o(i.GAT_att_cmn_start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_start_timer &rArr; CST_start &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_start
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_hvtx
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
</UL>

<P><STRONG><a name="[22b]"></a>GAT_att_cmn_stop_timer</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, gat_att_cmn.o(i.GAT_att_cmn_stop_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_stop_timer &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_disconnection
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_send_response
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_confirm_exc
</UL>

<P><STRONG><a name="[2f]"></a>GAT_att_cmn_timeout_cb</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, gat_att_cmn.o(i.GAT_att_cmn_timeout_cb))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_cmn.o(i.GAT_att_cmn_timeout_cb_wrapper)
</UL>
<P><STRONG><a name="[2e]"></a>GAT_att_cmn_timeout_cb_wrapper</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, gat_att_cmn.o(i.GAT_att_cmn_timeout_cb_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_timeout_cb_wrapper &rArr; cst_sharedCallback &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cst_sharedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_cmn.o(i.GAT_att_cmn_init)
</UL>
<P><STRONG><a name="[52]"></a>GAT_att_cmn_timer_expire_tsk</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, gat_att_cmn.o(i.GAT_att_cmn_timer_expire_tsk))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_for_each_conn_descr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>GAT_att_cmn_tx_pool_evt_tsk</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, gat_att_cmn.o(i.GAT_att_cmn_tx_pool_evt_tsk))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_wait_resource_idx
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Available_Buffer
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[249]"></a>GAT_att_db_find_by_def</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_find_by_def))
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_with_conf_def
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attribute_handle
</UL>

<P><STRONG><a name="[24a]"></a>GAT_att_db_find_by_handle</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_find_by_handle))
<BR><BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_with_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_service
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_characteristic
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_characteristic
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_char_descriptor
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_checks_for_notify
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_incl_srv_val
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_handle_p
</UL>

<P><STRONG><a name="[24b]"></a>GAT_att_db_find_from_handle</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_find_from_handle))
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_from_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_service
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_from_handle_p
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
</UL>

<P><STRONG><a name="[283]"></a>GAT_att_db_find_last_attr_of_type</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_find_last_attr_of_type))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_service
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_group_size
</UL>

<P><STRONG><a name="[24e]"></a>GAT_att_db_get_last_group_handle</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_get_last_group_handle))
<BR><BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_last_group_attribute
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_service
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_characteristic
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_att_group_end_handle
</UL>

<P><STRONG><a name="[254]"></a>GAT_att_db_get_last_handle</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_get_last_handle))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_service
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_rm_att_range
</UL>

<P><STRONG><a name="[24f]"></a>GAT_att_db_get_next</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_get_next))
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_att_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_service
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_attr_p
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_disconnection
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_store_to_nvm
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_from_nvm
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_generate_hash
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
</UL>

<P><STRONG><a name="[250]"></a>GAT_att_db_init</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_att_db_init &rArr; csmem_mem_assign &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_init
</UL>

<P><STRONG><a name="[251]"></a>GAT_att_db_insert</STRONG> (Thumb, 118 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_insert))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_att_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_service
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_characteristic
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_char_descriptor
</UL>

<P><STRONG><a name="[252]"></a>GAT_att_db_reverse_find_attr_of_type</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_reverse_find_attr_of_type))
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_from_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_char_descriptor
</UL>

<P><STRONG><a name="[253]"></a>GAT_att_db_rm_att_range</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_rm_att_range))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_last_handle
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_with_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_service
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_characteristic
</UL>

<P><STRONG><a name="[25b]"></a>GAT_att_srv_confirmation_pending</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_confirmation_pending))
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_for_each_conn_descr
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_update_allowed
</UL>

<P><STRONG><a name="[232]"></a>GAT_att_srv_connection</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_connection &rArr; GAT_srv_connection &rArr; GAT_srv_is_bonded &rArr; SMP_check_is_device_bonded &rArr; SDB_Find_Record &rArr; BleNvm_SEC_GetRecord &rArr; BleNvm_SEC_Dump &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_connection
</UL>

<P><STRONG><a name="[235]"></a>GAT_att_srv_disconnection</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_disconnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_disconnection &rArr; GAT_srv_disconnection &rArr; GAT_srv_store_to_nvm &rArr; SDB_write_gatt_client_data &rArr; BleNvm_SEC_RemoveRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_disconnection
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_flush_rx_pckts
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_disconnection
</UL>

<P><STRONG><a name="[260]"></a>GAT_att_srv_extract_write_packet_data</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_extract_write_packet_data))
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_direct_value_write
</UL>

<P><STRONG><a name="[26a]"></a>GAT_att_srv_flush_user_pending_list</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_flush_user_pending_list))
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_update_allowed
</UL>

<P><STRONG><a name="[26b]"></a>GAT_att_srv_hvtx</STRONG> (Thumb, 184 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_hvtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_hvtx &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_start_timer
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_send
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_descr_p
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Host_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_notify
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_tx_service_change
</UL>

<P><STRONG><a name="[239]"></a>GAT_att_srv_init</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_init &rArr; GAT_srv_init &rArr; GAT_att_db_init &rArr; csmem_mem_assign &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_init
</UL>

<P><STRONG><a name="[54]"></a>GAT_att_srv_process_rx_pckt_tsk</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_process_rx_pckt_tsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_process_rx_pckt_tsk &rArr; GAT_att_srv_run &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_remove_head
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_get_pckt_count
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_descr_p
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[23b]"></a>GAT_att_srv_rcv</STRONG> (Thumb, 160 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_rcv &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_start_timer
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_send
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_descr_p
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Host_Pckt
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_exec_fn_id_by_op
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_rcv
</UL>

<P><STRONG><a name="[295]"></a>GAT_att_srv_request_user_pending</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_request_user_pending))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_update_allowed
</UL>

<P><STRONG><a name="[275]"></a>GAT_att_srv_resp</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_resp &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_remove
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_descr_p
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_send_response
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_resp
</UL>

<P><STRONG><a name="[224]"></a>GAT_clt_connection</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, gat_clt.o(i.GAT_clt_connection))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_connection
</UL>

<P><STRONG><a name="[226]"></a>GAT_clt_disconnection</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, gat_clt.o(i.GAT_clt_disconnection))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_get_proc_per_chandle
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_disconnection
</UL>

<P><STRONG><a name="[228]"></a>GAT_clt_init</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, gat_clt.o(i.GAT_clt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_clt_init &rArr; csmem_mem_assign &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_init
</UL>

<P><STRONG><a name="[57]"></a>GAT_clt_proc_exec_tsk</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, gat_clt.o(i.GAT_clt_proc_exec_tsk))
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[22c]"></a>GAT_clt_rcv_corrupted</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, gat_clt.o(i.GAT_clt_rcv_corrupted))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_get_proc_per_chandle
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
</UL>

<P><STRONG><a name="[22f]"></a>GAT_clt_rcv_srv_initiated</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, gat_clt.o(i.GAT_clt_rcv_srv_initiated))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
</UL>

<P><STRONG><a name="[27b]"></a>GAT_srv_add_char_descriptor</STRONG> (Thumb, 158 bytes, Stack size unknown bytes, gat_srv_api.o(i.GAT_srv_add_char_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_srv_add_char_descriptor &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_reverse_find_attr_of_type
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_insert
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_descr_sanity_check
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_update_allowed
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_group_size
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_handle
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_att_group_end_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_characteristic
</UL>

<P><STRONG><a name="[27f]"></a>GAT_srv_add_characteristic</STRONG> (Thumb, 204 bytes, Stack size unknown bytes, gat_srv_api.o(i.GAT_srv_add_characteristic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_srv_add_characteristic &rArr; GAT_srv_add_char_descriptor &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_characteristic
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_char_descriptor
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_insert
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_update_allowed
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_group_size
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_char_sanity_check
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_handle
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_att_group_end_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_service
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_add_char
</UL>

<P><STRONG><a name="[282]"></a>GAT_srv_add_service</STRONG> (Thumb, 304 bytes, Stack size unknown bytes, gat_srv_api.o(i.GAT_srv_add_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_srv_add_service &rArr; GAT_srv_add_characteristic &rArr; GAT_srv_add_char_descriptor &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_service
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_characteristic
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_insert
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_last_handle
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_last_attr_of_type
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_update_allowed
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_next
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_from_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_add_service
</UL>

<P><STRONG><a name="[277]"></a>GAT_srv_attr_value_read</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_attr_value_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_srv_attr_value_read &rArr; GAT_srv_get_attr_value &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_perms
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_value_read
</UL>

<P><STRONG><a name="[279]"></a>GAT_srv_attr_value_write</STRONG> (Thumb, 266 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_attr_value_write))
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_extract_write_packet_data
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_attribute_modified_event_push
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_zip_val
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_cccd_val
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_zip_val
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_direct_value_write
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_exc
</UL>

<P><STRONG><a name="[262]"></a>GAT_srv_check_change_aware</STRONG> (Thumb, 154 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_check_change_aware))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_srv_check_change_aware &rArr; GAT_srv_find_by_type_attr_p &rArr; UUID_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_handle
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_zip_val
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_set_attr_value_check
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_exc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
</UL>

<P><STRONG><a name="[272]"></a>GAT_srv_check_perms</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_check_perms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_srv_check_perms &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_sec_perm
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_checks_for_notify
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_read
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_set_attr_value_check
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
</UL>

<P><STRONG><a name="[25c]"></a>GAT_srv_connection</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = GAT_srv_connection &rArr; GAT_srv_is_bonded &rArr; SMP_check_is_device_bonded &rArr; SDB_Find_Record &rArr; BleNvm_SEC_GetRecord &rArr; BleNvm_SEC_Dump &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_is_bonded
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_from_nvm
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_connection
</UL>

<P><STRONG><a name="[55]"></a>GAT_srv_db_hash_tsk</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_db_hash_tsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = GAT_srv_db_hash_tsk &rArr; GAT_srv_generate_hash &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_generate_hash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[25d]"></a>GAT_srv_disconnection</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_disconnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = GAT_srv_disconnection &rArr; GAT_srv_store_to_nvm &rArr; SDB_write_gatt_client_data &rArr; BleNvm_SEC_RemoveRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_next
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_store_to_nvm
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_zip_val
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_cccd_val
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_is_bonded
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_from_handle_p
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_disconnection
</UL>

<P><STRONG><a name="[263]"></a>GAT_srv_find_by_type_attr_p</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_find_by_type_attr_p))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_srv_find_by_type_attr_p &rArr; UUID_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_cmp
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_next
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_type
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_from_handle_p
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_disconnection
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_tx_service_change
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_store_to_nvm
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_from_nvm
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
</UL>

<P><STRONG><a name="[267]"></a>GAT_srv_get_att_group_end_handle</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_att_group_end_handle))
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_last_group_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_characteristic
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_char_descriptor
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_group_size
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_incl_srv_val
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
</UL>

<P><STRONG><a name="[268]"></a>GAT_srv_get_attr_type</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_attr_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_srv_get_attr_type &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_attr_p
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_hash_attr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
</UL>

<P><STRONG><a name="[273]"></a>GAT_srv_get_attr_value</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_attr_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_srv_get_attr_value &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_write_to_flat
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_incl_srv_val
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_chr_val
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_chr_descr_val
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_chr_decl_val
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_read
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_hash_attr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
</UL>

<P><STRONG><a name="[2a0]"></a>GAT_srv_get_attribute_handle</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_attribute_handle))
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_def
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_service_handle
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_char_decl_handle
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_incl_srv_val
</UL>

<P><STRONG><a name="[290]"></a>GAT_srv_get_cccd_attr_p</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_cccd_attr_p))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_srv_get_cccd_attr_p &rArr; UUID_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_cmp
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_next
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_type
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_checks_for_notify
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_tx_service_change
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_from_nvm
</UL>

<P><STRONG><a name="[291]"></a>GAT_srv_get_cccd_val</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_cccd_val))
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_zip_val
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_checks_for_notify
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_tx_service_change
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_store_to_nvm
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_chr_descr_val
</UL>

<P><STRONG><a name="[2a1]"></a>GAT_srv_get_char_decl_handle</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, gat_srv_api.o(i.GAT_srv_get_char_decl_handle))
<BR><BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attribute_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_get_char_decl_handle
</UL>

<P><STRONG><a name="[2a4]"></a>GAT_srv_get_service_handle</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, gat_srv_api.o(i.GAT_srv_get_service_handle))
<BR><BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attribute_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_get_service_handle
</UL>

<P><STRONG><a name="[26c]"></a>GAT_srv_init</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_srv_init &rArr; GAT_att_db_init &rArr; csmem_mem_assign &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_init
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_init
</UL>

<P><STRONG><a name="[270]"></a>GAT_srv_is_supported_grouping_type</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_is_supported_grouping_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_srv_is_supported_grouping_type &rArr; UUID_cmp_128bits &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_cmp_128bits
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
</UL>

<P><STRONG><a name="[2a7]"></a>GAT_srv_notify</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, gat_srv_api.o(i.GAT_srv_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GAT_srv_notify &rArr; GAT_att_srv_hvtx &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_checks_for_notify
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_hvtx
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_notify
</UL>

<P><STRONG><a name="[2a8]"></a>GAT_srv_resp</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, gat_srv_api.o(i.GAT_srv_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GAT_srv_resp &rArr; GAT_att_srv_resp &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_resp
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_prepare_write_req_event
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_exec_write_req_event
</UL>

<P><STRONG><a name="[281]"></a>GAT_srv_rm_characteristic</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, gat_srv_api.o(i.GAT_srv_rm_characteristic))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_rm_att_range
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_update_allowed
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_last_group_handle
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_characteristic
</UL>

<P><STRONG><a name="[284]"></a>GAT_srv_rm_service</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, gat_srv_api.o(i.GAT_srv_rm_service))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_rm_att_range
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_update_allowed
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_last_group_handle
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_service
</UL>

<P><STRONG><a name="[56]"></a>GAT_srv_send_srv_change_tsk</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_send_srv_change_tsk))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_for_each_conn_descr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[1d]"></a>GPIOA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.GPIOA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[1e]"></a>GPIOB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.GPIOB_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[4e7]"></a>GapIsPrivacySupported</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, gap_common.o(i.GapIsPrivacySupported))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[2aa]"></a>Gap_profile_get_handles</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gap_profile.o(i.Gap_profile_get_handles))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Gap_profile_get_handles
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_get_char_decl_handle
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_get_service_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
</UL>

<P><STRONG><a name="[2ac]"></a>Gap_profile_init</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gap_profile.o(i.Gap_profile_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Gap_profile_init &rArr; Gap_profile_set_dev_name &rArr; Gap_profile_set_char_value &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_set_dev_name
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_add_service
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_get_service_handle
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_add_char
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
</UL>

<P><STRONG><a name="[2af]"></a>Gap_profile_set_char_value</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, gap_profile.o(i.Gap_profile_set_char_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = Gap_profile_set_char_value &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_get_char_decl_handle
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_set_dev_name
</UL>

<P><STRONG><a name="[2ae]"></a>Gap_profile_set_dev_name</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gap_profile.o(i.Gap_profile_set_dev_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Gap_profile_set_dev_name &rArr; Gap_profile_set_char_value &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_get_char_decl_handle
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_set_char_value
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_port_DeviceInit
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_init
</UL>

<P><STRONG><a name="[2b0]"></a>Gatt_profile_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gatt_profile.o(i.Gatt_profile_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Gatt_profile_init &rArr; aci_gatt_srv_add_service &rArr; GAT_srv_add_service &rArr; GAT_srv_add_characteristic &rArr; GAT_srv_add_char_descriptor &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_init
</UL>

<P><STRONG><a name="[2d5]"></a>HAL_CrashHandler</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, hal_miscutil.o(i.HAL_CrashHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_IRQHandler
</UL>

<P><STRONG><a name="[2b1]"></a>HAL_Generate_Random_Bytes_To</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, bluenrgx_rng.o(i.HAL_Generate_Random_Bytes_To))
<BR><BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[168]"></a>HAL_GetPartInfo</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hal_miscutil.o(i.HAL_GetPartInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GetPartInfo &rArr; LL_GetRAMSize
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetRAMSize
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_get_part_info
</UL>

<P><STRONG><a name="[165]"></a>HAL_SetHighPower</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hal_miscutil.o(i.HAL_SetHighPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SetHighPower
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_SetSMPSPrechargeMode
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_SetSMPSOutputLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_SetHighPower
</UL>

<P><STRONG><a name="[2b6]"></a>HAL_Set_TX_Power_Level</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, aci_hal.o(i.HAL_Set_TX_Power_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = HAL_Set_TX_Power_Level &rArr; BLEPLAT_SetHighPower &rArr; HAL_SetHighPower
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_SetHighPower
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
</UL>

<P><STRONG><a name="[fd]"></a>HAL_VTIMER_ClearRadioTimerValue</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, rf_driver_hal_vtimer.o(i.HAL_VTIMER_ClearRadioTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_VTIMER_ClearRadioTimerValue &rArr; TIMER_GetCurrentSysTime &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TIMER_GetSysRfSetupTime
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCurrentSysTime
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearRadioTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[111]"></a>HAL_VTIMER_GetCurrentSysTime</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rf_driver_hal_vtimer.o(i.HAL_VTIMER_GetCurrentSysTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_VTIMER_GetCurrentSysTime &rArr; TIMER_GetCurrentSysTime &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCurrentSysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_TimeCheck
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_check_and_call_sched
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_sleep_latency_cancellation
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_start_legacy
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start
</UL>

<P><STRONG><a name="[2ba]"></a>HAL_VTIMER_Init</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, rf_driver_hal_vtimer.o(i.HAL_VTIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_VTIMER_Init &rArr; _start_timer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_MachineTimeToSysTime
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCurrentSysTime
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCurrentCalibrationData
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Enable_CPU_WKUP
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_start_timer
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulesInit
</UL>

<P><STRONG><a name="[17b]"></a>HAL_VTIMER_RadioTimerIsr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rf_driver_hal_vtimer.o(i.HAL_VTIMER_RadioTimerIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_VTIMER_RadioTimerIsr &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_user_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TX_RX_IRQHandler
</UL>

<P><STRONG><a name="[2c2]"></a>HAL_VTIMER_SetRadioTimerValue</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, rf_driver_hal_vtimer.o(i.HAL_VTIMER_SetRadioTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCurrentSysTime
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_virtualTimeBaseEnable
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_radio_activity
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>

<P><STRONG><a name="[2c5]"></a>HAL_VTIMER_StartTimerSysTime</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rf_driver_hal_vtimer.o(i.HAL_VTIMER_StartTimerSysTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_virtualTimeBaseEnable
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartFirstActive_sysT
</UL>

<P><STRONG><a name="[2c6]"></a>HAL_VTIMER_StopTimer</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rf_driver_hal_vtimer.o(i.HAL_VTIMER_StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_user_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_Tick
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_virtualTimeBaseEnable
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_TryStartFirstActive
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartFirstActive_sysT
</UL>

<P><STRONG><a name="[2c7]"></a>HAL_VTIMER_Tick</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, rf_driver_hal_vtimer.o(i.HAL_VTIMER_Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_VTIMER_Tick &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_UpdateCalibrationData
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IsCalibrationRunning
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCurrentSysTime
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCurrentCalibrationData
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_StopTimer
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_callback
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_user_timeout
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_start_timer
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_radio_activity
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulesTick
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_VTIMER_TimeoutCallback</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rf_driver_hal_vtimer.o(i.HAL_VTIMER_TimeoutCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_VTIMER_TimeoutCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_WakeUpCallback
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[17c]"></a>HAL_VTIMER_WakeUpCallback</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rf_driver_hal_vtimer.o(i.HAL_VTIMER_WakeUpCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_VTIMER_WakeUpCallback &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_TimeoutCallback
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_radio_activity
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[2ca]"></a>HAL_Write_ConfigData</STRONG> (Thumb, 366 bytes, Stack size unknown bytes, aci_hal.o(i.HAL_Write_ConfigData))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configBitmapSet
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_write_supported_data_ucfg
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_sc_force_debug_key_usage
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Eng_Config
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_force_chsel_1
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ext_scan_get_cntxt_p
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_multi_link_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
</UL>

<P><STRONG><a name="[2d2]"></a>HCI_Init</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, hci_common.o(i.HCI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = HCI_Init &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[2b2]"></a>Hal_Get_Random_Number</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, bluenrgx_rng.o(i.Hal_Get_Random_Number))
<BR><BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNGMGR_GetRandom16
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Resolvable_Private_Address
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number32
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_u8GetNextAdvChannel
</UL>

<P><STRONG><a name="[114]"></a>Hal_Get_Random_Number32</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, bluenrgx_rng.o(i.Hal_Get_Random_Number32))
<BR><BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[a]"></a>HardFault_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bluenrg_lp_it.o(i.HardFault_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CrashHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[11]"></a>I2C1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.I2C1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[12]"></a>I2C2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.I2C2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[1ec]"></a>IDD_Initialize_Device_IDs</STRONG> (Thumb, 218 bytes, Stack size unknown bytes, device_id_data.o(i.IDD_Initialize_Device_IDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = IDD_Initialize_Device_IDs &rArr; BleNvm_DEV_ID_DATA_GetRecord &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_DEV_ID_DATA_GetRecord
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Buffer_All_Set_To
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_DEV_ID_DATA_AddRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[446]"></a>Is_Address_Initialized</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, ll_routines.o(i.Is_Address_Initialized))
<BR><BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_enhanced_connection_complete_evt_hndl
</UL>

<P><STRONG><a name="[2d9]"></a>KENDOL2_HAL_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, subs.o(i.KENDOL2_HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KENDOL2_HAL_Init &rArr; BSP_PB_Init &rArr; LL_GPIO_SetPinPull
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2da]"></a>KENDOL2_main</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, app_main.o(i.KENDOL2_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KENDOL2_main
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ae]"></a>L2C_Init</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = L2C_Init &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_dynamic_allocator
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_cos_cfc_init_ucfg
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[2df]"></a>L2C_acl_cframe_signaling_hndl</STRONG> (Thumb, 194 bytes, Stack size unknown bytes, l2cap.o(i.L2C_acl_cframe_signaling_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = L2C_acl_cframe_signaling_hndl &rArr; L2C_process_basic_mode_command &rArr; L2C_build_command_reject_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_cos_process_cfc_mode_command_ucfg
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_process_basic_mode_command
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_get_link_control_block_index
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_build_command_reject_pdu
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_mux_acl_packet
</UL>

<P><STRONG><a name="[2e4]"></a>L2C_build_command_reject_pdu</STRONG> (Thumb, 172 bytes, Stack size unknown bytes, l2cap.o(i.L2C_build_command_reject_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = L2C_build_command_reject_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_post_process_outgoing_response_packet
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_get_link_control_block_ref
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_acl_cframe_signaling_hndl
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_process_basic_mode_command
</UL>

<P><STRONG><a name="[2de]"></a>L2C_cos_cfc_init_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, l2c_cos_common.o(i.L2C_cos_cfc_init_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Init
</UL>

<P><STRONG><a name="[550]"></a>L2C_cos_cfc_init_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, l2c_cos_common.o(i.L2C_cos_cfc_init_ucfg_weak), UNUSED)

<P><STRONG><a name="[2e1]"></a>L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, l2c_cos_channel_manager.o(i.L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_acl_cframe_signaling_hndl
</UL>

<P><STRONG><a name="[551]"></a>L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, l2c_cos_channel_manager.o(i.L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak), UNUSED)

<P><STRONG><a name="[2f0]"></a>L2C_cos_le_frame_data_hndl_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, l2c_cos_resource_manager.o(i.L2C_cos_le_frame_data_hndl_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_mux_acl_packet
</UL>

<P><STRONG><a name="[2e8]"></a>L2C_cos_le_frame_data_hndl_ucfg_weak</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, l2c_cos_resource_manager.o(i.L2C_cos_le_frame_data_hndl_ucfg_weak), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_release_unexpected_acl_packet
</UL>

<P><STRONG><a name="[4f]"></a>L2C_cos_perform_pdu_reassembly_tsk_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, l2c_cos_resource_manager.o(i.L2C_cos_perform_pdu_reassembly_tsk_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[552]"></a>L2C_cos_perform_pdu_reassembly_tsk_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, l2c_cos_resource_manager.o(i.L2C_cos_perform_pdu_reassembly_tsk_ucfg_weak), UNUSED)

<P><STRONG><a name="[4d]"></a>L2C_cos_perform_sdu_segmentation_tsk_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, l2c_cos_resource_manager.o(i.L2C_cos_perform_sdu_segmentation_tsk_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[553]"></a>L2C_cos_perform_sdu_segmentation_tsk_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, l2c_cos_resource_manager.o(i.L2C_cos_perform_sdu_segmentation_tsk_ucfg_weak), UNUSED)

<P><STRONG><a name="[2ec]"></a>L2C_cos_physical_link_disconnection_hndl_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, l2c_cos_common.o(i.L2C_cos_physical_link_disconnection_hndl_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_hci_disconnection_complete_evt_hndl
</UL>

<P><STRONG><a name="[554]"></a>L2C_cos_physical_link_disconnection_hndl_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, l2c_cos_common.o(i.L2C_cos_physical_link_disconnection_hndl_ucfg_weak), UNUSED)

<P><STRONG><a name="[2e2]"></a>L2C_cos_process_cfc_mode_command_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, l2c_cos_channel_manager.o(i.L2C_cos_process_cfc_mode_command_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_acl_cframe_signaling_hndl
</UL>

<P><STRONG><a name="[555]"></a>L2C_cos_process_cfc_mode_command_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, l2c_cos_channel_manager.o(i.L2C_cos_process_cfc_mode_command_ucfg_weak), UNUSED)

<P><STRONG><a name="[4c]"></a>L2C_cos_process_pending_actions_tsk_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, l2c_cos_common.o(i.L2C_cos_process_pending_actions_tsk_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[556]"></a>L2C_cos_process_pending_actions_tsk_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, l2c_cos_common.o(i.L2C_cos_process_pending_actions_tsk_ucfg_weak), UNUSED)

<P><STRONG><a name="[2f9]"></a>L2C_cos_reset_any_pending_channel_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, l2c_cos_common.o(i.L2C_cos_reset_any_pending_channel_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_timeout_handler_signalling
</UL>

<P><STRONG><a name="[557]"></a>L2C_cos_reset_any_pending_channel_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, l2c_cos_common.o(i.L2C_cos_reset_any_pending_channel_ucfg_weak), UNUSED)

<P><STRONG><a name="[4e]"></a>L2C_cos_transmit_pdu_packets_tsk_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, l2c_cos_resource_manager.o(i.L2C_cos_transmit_pdu_packets_tsk_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[558]"></a>L2C_cos_transmit_pdu_packets_tsk_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, l2c_cos_resource_manager.o(i.L2C_cos_transmit_pdu_packets_tsk_ucfg_weak), UNUSED)

<P><STRONG><a name="[2e5]"></a>L2C_get_link_control_block_ref</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, l2cap.o(i.L2C_get_link_control_block_ref))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_hci_le_connection_complete_evt_hndl
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_receive_data
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_build_command_reject_pdu
</UL>

<P><STRONG><a name="[2eb]"></a>L2C_hci_disconnection_complete_evt_hndl</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, l2cap.o(i.L2C_hci_disconnection_complete_evt_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = L2C_hci_disconnection_complete_evt_hndl &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_get_link_control_block_index
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_cos_physical_link_disconnection_hndl_ucfg
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event_int_cb
</UL>

<P><STRONG><a name="[2ed]"></a>L2C_hci_le_connection_complete_evt_hndl</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, l2cap.o(i.L2C_hci_le_connection_complete_evt_hndl))
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_get_link_control_block_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_int_cb
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_int_cb
</UL>

<P><STRONG><a name="[2ee]"></a>L2C_mux_acl_packet</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, l2cap.o(i.L2C_mux_acl_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = L2C_mux_acl_packet &rArr; SMP_acl_data_hndl &rArr; smp_Keys_Distribution_Complete &rArr; smp_pairing_completed &rArr; smp_add_pairing_record_to_bonding_database &rArr; BleNvm_SEC_AddRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_acl_data_hndl
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_cos_le_frame_data_hndl_ucfg
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_acl_cframe_signaling_hndl
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_release_unexpected_acl_packet
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_rcv
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_receive_data
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_tx_cmpl_event_int_cb
</UL>

<P><STRONG><a name="[2f2]"></a>L2C_post_process_incoming_request_packet</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, l2cap.o(i.L2C_post_process_incoming_request_packet))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_process_basic_mode_command
</UL>

<P><STRONG><a name="[2e7]"></a>L2C_post_process_outgoing_response_packet</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, l2cap.o(i.L2C_post_process_outgoing_response_packet))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_build_command_reject_pdu
</UL>

<P><STRONG><a name="[2f1]"></a>L2C_pre_process_incoming_response_packet</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, l2cap.o(i.L2C_pre_process_incoming_response_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = L2C_pre_process_incoming_response_packet &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_process_basic_mode_command
</UL>

<P><STRONG><a name="[2f5]"></a>L2C_receive_data</STRONG> (Thumb, 254 bytes, Stack size unknown bytes, l2cap.o(i.L2C_receive_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = L2C_receive_data &rArr; L2C_mux_acl_packet &rArr; SMP_acl_data_hndl &rArr; smp_Keys_Distribution_Complete &rArr; smp_pairing_completed &rArr; smp_add_pairing_record_to_bonding_database &rArr; BleNvm_SEC_AddRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Extract_Pdu_MBuff
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_append
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_mux_acl_packet
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_get_link_control_block_ref
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_discard_accumulated_acl_data
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Resize_Pckt_Pdu_Size
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_ind_event_int_cb
</UL>

<P><STRONG><a name="[2e9]"></a>L2C_release_unexpected_acl_packet</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, l2c_cos_common.o(i.L2C_release_unexpected_acl_packet))
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_mux_acl_packet
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_cos_le_frame_data_hndl_ucfg_weak
</UL>

<P><STRONG><a name="[23e]"></a>L2C_send_frame</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, l2cap.o(i.L2C_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_build_command_reject_pdu
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_send
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_2octets_packet_send
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
</UL>

<P><STRONG><a name="[2f8]"></a>L2C_timeout_handler_signalling</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, l2cap.o(i.L2C_timeout_handler_signalling))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_cos_reset_any_pending_channel_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_timers_callback
</UL>

<P><STRONG><a name="[2fa]"></a>LLC_authenticated_payload_timeout_cb</STRONG> (Thumb, 186 bytes, Stack size unknown bytes, ll_cpf_le_ping.o(i.LLC_authenticated_payload_timeout_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = LLC_authenticated_payload_timeout_cb &rArr; CST_start &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_enc_on
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_start
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_start_le_ping
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_timers_callback
</UL>

<P><STRONG><a name="[5f]"></a>LLC_authenticated_payload_timeout_processing</STRONG> (Thumb, 248 bytes, Stack size unknown bytes, ll_cpf_le_ping.o(i.LLC_authenticated_payload_timeout_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = LLC_authenticated_payload_timeout_processing &rArr; CST_start &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_enc_on
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_wait_resource_idx
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_start
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_start_le_ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[2fe]"></a>LLC_authenticated_payload_timeout_reset</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, ll_cpf_le_ping.o(i.LLC_authenticated_payload_timeout_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = LLC_authenticated_payload_timeout_reset &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_handle_isr_disconnect
</UL>

<P><STRONG><a name="[36a]"></a>LLC_conn_init_cte_ctxt_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_cpf_cte.o(i.LLC_conn_init_cte_ctxt_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
</UL>

<P><STRONG><a name="[559]"></a>LLC_conn_init_cte_ctxt_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_cte.o(i.LLC_conn_init_cte_ctxt_ucfg_weak), UNUSED)

<P><STRONG><a name="[36b]"></a>LLC_conn_init_pcl_ctxt_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_cpf_pcl.o(i.LLC_conn_init_pcl_ctxt_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
</UL>

<P><STRONG><a name="[55a]"></a>LLC_conn_init_pcl_ctxt_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_pcl.o(i.LLC_conn_init_pcl_ctxt_ucfg_weak), UNUSED)

<P><STRONG><a name="[3a8]"></a>LLC_conn_process_rx_cte_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_connect.o(i.LLC_conn_process_rx_cte_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[55b]"></a>LLC_conn_process_rx_cte_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_connect.o(i.LLC_conn_process_rx_cte_ucfg_weak), UNUSED)

<P><STRONG><a name="[306]"></a>LLC_cte_request_procedure_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_cpf_cte.o(i.LLC_cte_request_procedure_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_offline_control_procedures_processing
</UL>

<P><STRONG><a name="[55c]"></a>LLC_cte_request_procedure_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_cpf_cte.o(i.LLC_cte_request_procedure_ucfg_weak), UNUSED)

<P><STRONG><a name="[3de]"></a>LLC_get_cte_buffers</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_cte_functions.o(i.LLC_get_cte_buffers))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_dtm_init
</UL>

<P><STRONG><a name="[302]"></a>LLC_init_le_ping_params</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, ll_cpf_le_ping.o(i.LLC_init_le_ping_params))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
</UL>

<P><STRONG><a name="[40]"></a>LLC_le_ping</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, ll_cpf_le_ping.o(i.LLC_le_ping))
<BR><BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_prepare_tx_pdu
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_clr_active
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_cpe.o(i.LL_cpe_init)
</UL>
<P><STRONG><a name="[5d]"></a>LLC_offline_control_procedures_processing</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, hci_common.o(i.LLC_offline_control_procedures_processing))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_wait_resource_idx
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Len_Update_Offline_Processing_ucfg
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_pcl_offline_processing_ucfg
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Read_Remote_Used_Features
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_cte_request_procedure_ucfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[4ac]"></a>LLC_pcl_hal_cntxt_init_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_cpf_pcl.o(i.LLC_pcl_hal_cntxt_init_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_HAL_Init
</UL>

<P><STRONG><a name="[55d]"></a>LLC_pcl_hal_cntxt_init_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_pcl.o(i.LLC_pcl_hal_cntxt_init_ucfg_weak), UNUSED)

<P><STRONG><a name="[3a9]"></a>LLC_pcl_incr_rx_packets_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_cpf_pcl.o(i.LLC_pcl_incr_rx_packets_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[55e]"></a>LLC_pcl_incr_rx_packets_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_pcl.o(i.LLC_pcl_incr_rx_packets_ucfg_weak), UNUSED)

<P><STRONG><a name="[307]"></a>LLC_pcl_offline_processing_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_cpf_pcl.o(i.LLC_pcl_offline_processing_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_offline_control_procedures_processing
</UL>

<P><STRONG><a name="[55f]"></a>LLC_pcl_offline_processing_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_cpf_pcl.o(i.LLC_pcl_offline_processing_ucfg_weak), UNUSED)

<P><STRONG><a name="[2b7]"></a>LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_cpf_pcl.o(i.LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Set_TX_Power_Level
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
</UL>

<P><STRONG><a name="[560]"></a>LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_pcl.o(i.LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak), UNUSED)

<P><STRONG><a name="[36c]"></a>LLC_pcl_set_radio_tx_power_conn_start_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_cpf_pcl.o(i.LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
</UL>

<P><STRONG><a name="[308]"></a>LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, ll_cpf_pcl.o(i.LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetTxPwr
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>

<P><STRONG><a name="[394]"></a>LLC_pcl_update_avg_rssi_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_cpf_pcl.o(i.LLC_pcl_update_avg_rssi_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr
</UL>

<P><STRONG><a name="[561]"></a>LLC_pcl_update_avg_rssi_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_pcl.o(i.LLC_pcl_update_avg_rssi_ucfg_weak), UNUSED)

<P><STRONG><a name="[30a]"></a>LLC_update_le_ping_params</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, ll_cpf_le_ping.o(i.LLC_update_le_ping_params))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
</UL>

<P><STRONG><a name="[30c]"></a>LL_Context_Test_Advertising_Handle</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, ll_ext_adv.o(i.LL_Context_Test_Advertising_Handle), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ext_scan_get_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Set_Random_Address
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_set_legacy_advertising_data_ptr
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_set_advertising_data_ptr
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters_Default
</UL>

<P><STRONG><a name="[1fc]"></a>LL_Disconnect_Link</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, ll_connect.o(i.LL_Disconnect_Link))
<BR><BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_disconnect
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_tx_terminate_in_progress
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_conn_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Terminate_Link
</UL>

<P><STRONG><a name="[1e6]"></a>LL_FLASH_Erase</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rf_driver_ll_flash.o(i.LL_FLASH_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_FLASH_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_GetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBufferToFlash
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseWithTimeCheck
</UL>

<P><STRONG><a name="[2d8]"></a>LL_FLASH_Program</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rf_driver_ll_flash.o(i.LL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_FLASH_Program
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_GetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecord
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBufferToFlash
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRecord
</UL>

<P><STRONG><a name="[311]"></a>LL_Get_LTK</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, ll_cpf_encryption.o(i.LL_Get_LTK))
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_is_slave
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_conn_idx
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_prepare_tx_pdu
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cntxt
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_requested_negative_reply
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_reply
</UL>

<P><STRONG><a name="[1ab]"></a>LL_Init</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, ll_routines.o(i.LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LL_Init &rArr; BLEPLAT_SetHighPower &rArr; HAL_SetHighPower
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_SetHighPower
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_HAL_Init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator_LL
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_dtm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[31b]"></a>LL_LE_Set_Advertise_Enable</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, ll_ext_adv.o(i.LL_LE_Set_Advertise_Enable), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Set_Random_Address
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_SynchPeerIDList_And_WhiteIDList_ucfg
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters_Default
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_enable
</UL>

<P><STRONG><a name="[320]"></a>LL_LE_Set_Advertising_Parameters</STRONG> (Thumb, 210 bytes, Stack size unknown bytes, ll_ext_adv.o(i.LL_LE_Set_Advertising_Parameters), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ext_scan_get_cntxt_p
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_AdvConvStringToSrambledIntWithType
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_initializedata_data_struc_not_enable
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Context_Test_Advertising_Handle
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Context_ReturnFree
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_parameters
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters_Default
</UL>

<P><STRONG><a name="[423]"></a>LL_PKA_GetData</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rf_driver_ll_pka_v7b.o(i.LL_PKA_GetData))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_IRQHandler
</UL>

<P><STRONG><a name="[422]"></a>LL_PKA_VerifyProcess</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rf_driver_ll_pka_v7b.o(i.LL_PKA_VerifyProcess))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_IRQHandler
</UL>

<P><STRONG><a name="[1c7]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rf_driver_ll_rcc.o(i.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>

<P><STRONG><a name="[304]"></a>LL_Read_Remote_Used_Features</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, ll_cpf_feature_exchange.o(i.LL_Read_Remote_Used_Features))
<BR><BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p_from_handle
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_active_status
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_prepare_tx_pdu
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cntxt
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_conn_get_proc_id_from_sm
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_offline_control_procedures_processing
</UL>

<P><STRONG><a name="[129]"></a>LL_Send_ACL_Data</STRONG> (Thumb, 294 bytes, Stack size unknown bytes, ll_connect.o(i.LL_Send_ACL_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_GetCurrentSysTime
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p_from_handle
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetDataPtr
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketGetDataPtr
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_next_taskslot
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_next_anchor
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_is_slave
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_tx_acl_blocked
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_enc_on
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_data_p
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_time_t1_lessthan_t2
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_latency_cancelation
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_copy_tx_data_packet
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_insert_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
</UL>

<P><STRONG><a name="[32e]"></a>LL_Set_Advertising_Set_Random_Address</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, ll_ext_adv.o(i.LL_Set_Advertising_Set_Random_Address), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ext_scan_get_cntxt_p
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Set_Random_Address
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters_Default
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_random_address
</UL>

<P><STRONG><a name="[31e]"></a>LL_Set_Extented_Advertising_Enable</STRONG> (Thumb, 308 bytes, Stack size unknown bytes, ll_ext_adv.o(i.LL_Set_Extented_Advertising_Enable), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_GetCurrentSysTime
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ext_scan_get_cntxt_p
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_SynchPeerIDList_And_WhiteIDList_ucfg
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Context_Test_Advertising_Handle
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_stop
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertise_Enable
</UL>

<P><STRONG><a name="[31f]"></a>LL_Set_Extented_Advertising_Set_Random_Address</STRONG> (Thumb, 102 bytes, Stack size unknown bytes, ll_ext_adv.o(i.LL_Set_Extented_Advertising_Set_Random_Address), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ext_scan_get_cntxt_p
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_AdvConvStringToSrambledIntWithType
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Context_Test_Advertising_Handle
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Context_ReturnFree
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Advertising_Set_Random_Address
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertise_Enable
</UL>

<P><STRONG><a name="[3d]"></a>LL_channel_map_update</STRONG> (Thumb, 266 bytes, Stack size unknown bytes, ll_cpf_channel_map_update.o(i.LL_channel_map_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LL_channel_map_update &rArr; LL_conn_disconnect_link_from_CPF &rArr; LL_sched_check_and_call_sched &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_chmap_params
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_is_slave
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_latency
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_eventcount
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_p
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_disconnect_link_from_CPF
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cntxt
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_clr_active
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update_param_check
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_tx_with_instant
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_rx_with_instant
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_blocked
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_cpe.o(i.LL_cpe_init)
</UL>
<P><STRONG><a name="[334]"></a>LL_channel_map_update_param_check</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, ll_cpf_channel_map_update.o(i.LL_channel_map_update_param_check))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
</UL>

<P><STRONG><a name="[36f]"></a>LL_conn_calc_packetlength</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_calc_packetlength))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
</UL>

<P><STRONG><a name="[372]"></a>LL_conn_calculate_ww</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_calculate_ww))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_latency_cancelation
</UL>

<P><STRONG><a name="[340]"></a>LL_conn_clr_ch_classification_pending</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_clr_ch_classification_pending))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reclassify_channel
</UL>

<P><STRONG><a name="[341]"></a>LL_conn_clr_disconnect_reason</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_clr_disconnect_reason))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_handle_isr_disconnect
</UL>

<P><STRONG><a name="[342]"></a>LL_conn_clr_instant_reached_passed</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_clr_instant_reached_passed))
<BR><BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_flds_instant
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_machine
</UL>

<P><STRONG><a name="[344]"></a>LL_conn_clr_isr_active</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_clr_isr_active))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_connect_cancel_taskslot_dummy
</UL>

<P><STRONG><a name="[345]"></a>LL_conn_clr_nack_flag</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_clr_nack_flag))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[346]"></a>LL_conn_clr_rx_acl_blocked</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_clr_rx_acl_blocked))
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_ctrl_fld_p
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[348]"></a>LL_conn_clr_rx_ctrl_pdu_full</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_clr_rx_ctrl_pdu_full))
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_ctrl_fld_p
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[349]"></a>LL_conn_clr_start_enc</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_clr_start_enc))
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_ctrl_fld_p
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[34a]"></a>LL_conn_clr_stop_enc</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_clr_stop_enc))
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_ctrl_fld_p
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[34b]"></a>LL_conn_clr_tx_acl_blocked</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_clr_tx_acl_blocked))
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_ctrl_fld_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[371]"></a>LL_conn_convert_sca_to_ppm</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_convert_sca_to_ppm))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
</UL>

<P><STRONG><a name="[337]"></a>LL_conn_disconnect_link_from_CPF</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_disconnect_link_from_CPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LL_conn_disconnect_link_from_CPF &rArr; LL_sched_check_and_call_sched &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_delete_taskslot
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_check_and_call_sched
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_disconnect_reason
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
</UL>

<P><STRONG><a name="[351]"></a>LL_conn_encryption_on_off_routine</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_encryption_on_off_routine))
<BR><BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmGetMode
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmGetEncStatus
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmEncOn
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmEncOff
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr
</UL>

<P><STRONG><a name="[356]"></a>LL_conn_enhanced_get_latency</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_enhanced_get_latency))
<BR><BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketGetDataPtr
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_active_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
</UL>

<P><STRONG><a name="[357]"></a>LL_conn_get_ch_classification_pending</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_ch_classification_pending))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_Update_Offline_Processing
</UL>

<P><STRONG><a name="[32f]"></a>LL_conn_get_cntxt_p</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_cntxt_p))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_multi_link_connection
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_per_init
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_init_data_len_pdu_params
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_init_cmn_len_upd_params
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_test_address_in_ConnIDList
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_register_cpf
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cpf
</UL>

<P><STRONG><a name="[2fb]"></a>LL_conn_get_cntxt_per_p</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_cntxt_per_p))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p_from_handle
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_disconnect
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_sleep_latency_cancellation
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_nack_flag
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_instant_active
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_enc_params
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_disconnect_reason
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_conn_update_params
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_chmap_params
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_ch_classification_pending
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reserve_conn_idx
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_release_conn_idx
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_per_init
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_is_slave
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_guard_time_for_close_conn_event
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_latency
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_isr_active
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_handle
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_eventcount
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_disconnect_reason
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_data_p
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_conn_idx
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ch_classification_pending
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_encryption_on_off_routine
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_disconnect_link_from_CPF
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_nack_flag
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_isr_active
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_disconnect_reason
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_ch_classification_pending
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_latency_cancelation
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_ctrl_fld_p
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_flds_isr_p
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_flds_instant
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_CSA_2_update_remapped_table
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_selection_algorithm_2
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_cb
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cntxt
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_clr_active
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_update_le_ping_params
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_version_exchange
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_machine
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_set_expected_opcode
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_reset_state_machines
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_handle_isr_disconnect
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_state
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_expected_opcode
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_cpid_from_sm
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_tx_terminate_in_progress
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_rxctrlpdu_checkreject
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_ctrl_flds_common_p
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_Update_Offline_Processing
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_offline_control_procedures_processing
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_processing
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_version_exchange_set_cached
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_version_exchange_cached
</UL>

<P><STRONG><a name="[323]"></a>LL_conn_get_cntxt_per_p_from_handle</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_cntxt_per_p_from_handle))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Read_Remote_Used_Features
</UL>

<P><STRONG><a name="[30d]"></a>LL_conn_get_conn_idx</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_conn_idx))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Disconnect_Link
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_requested_negative_reply
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_reply
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_LTK
</UL>

<P><STRONG><a name="[32b]"></a>LL_conn_get_ctrl_pdu_data_p</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_ctrl_pdu_data_p))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_program_next_taskslot
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_set_unknown_rsp_pending
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4tx
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4rsp
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_machine
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_dormant
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_tx_terminate_in_progress
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[359]"></a>LL_conn_get_disconnect_reason</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_disconnect_reason))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_handle_isr_disconnect
</UL>

<P><STRONG><a name="[2fc]"></a>LL_conn_get_enc_on</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_enc_on))
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_flds_isr_p
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_program_next_taskslot
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_cb
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_processing
</UL>

<P><STRONG><a name="[330]"></a>LL_conn_get_eventcount</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_eventcount))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
</UL>

<P><STRONG><a name="[35a]"></a>LL_conn_get_handle</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_handle))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_version_exchange
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
</UL>

<P><STRONG><a name="[35b]"></a>LL_conn_get_instant_passed</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_instant_passed))
<BR><BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_flds_instant
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_machine
</UL>

<P><STRONG><a name="[35c]"></a>LL_conn_get_instant_reached</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_instant_reached))
<BR><BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_flds_instant
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_machine
</UL>

<P><STRONG><a name="[35d]"></a>LL_conn_get_isr_active</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_isr_active))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[331]"></a>LL_conn_get_latency</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_latency))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
</UL>

<P><STRONG><a name="[35e]"></a>LL_conn_get_phy_upd_cntx_per_p</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_phy_upd_cntx_per_p))
<BR><BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_upd_csr_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_init_data_len_pdu_params
</UL>

<P><STRONG><a name="[360]"></a>LL_conn_get_rx_acl_blocked</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_rx_acl_blocked))
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_ctrl_fld_p
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[361]"></a>LL_conn_get_rx_ctrl_pdu_full</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_rx_ctrl_pdu_full))
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_ctrl_fld_p
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_rx_pdu_can_be_processed
</UL>

<P><STRONG><a name="[362]"></a>LL_conn_get_start_enc</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_start_enc))
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_ctrl_fld_p
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[363]"></a>LL_conn_get_stop_enc</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_stop_enc))
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_ctrl_fld_p
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[32a]"></a>LL_conn_get_tx_acl_blocked</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_tx_acl_blocked))
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_ctrl_fld_p
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[364]"></a>LL_conn_get_tx_ctrl_pdu_state</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_tx_ctrl_pdu_state))
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_ctrl_fld_p
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4tx
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4ack
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_machine
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_tx_terminate_in_progress
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_rx_pdu_can_be_processed
</UL>

<P><STRONG><a name="[365]"></a>LL_conn_get_version_exchange_cached</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_cpf_version_exchange.o(i.LL_conn_get_version_exchange_cached))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_version_exchange
</UL>

<P><STRONG><a name="[103]"></a>LL_conn_go_to_connect</STRONG> (Thumb, 1760 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_go_to_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LL_conn_go_to_connect &rArr; BLECNTR_SmInitTo0 &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_upd_csr_ucfg
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic_csr_ucfg
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetUnmappedChan
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetTxPhy
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetTxPacketPtr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetTxMode
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetRxPhy
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetRxPacketPtr
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetRxMode
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetHopIncr
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetDataLength
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetCrcInit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetChannelMap
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetAccessAddr
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmInitTo0
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmGetTxPhy
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SetRcvLen
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetTxReady
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetTimerTrigRcv
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetTimer2Active
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetTimeout
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetRxReady
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetPllTrig
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetNsEn
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetNextTxMode
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetNextSlot
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetNextPtr
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetKeepsemareq
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetIntTxOk
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetIntTimeout
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetIntRcvOk
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetIntDone
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetIntCrcErr
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetIncChan
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetDataPtr
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetCrcinitSel
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketInitTo0
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GeTimer2TimeoutForIfs
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_DemodDelaySt
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_sel_algo2
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_params
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_phy_update_init_per_st_data_ucfg
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_past_default_params_ucfg
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_pcl_set_radio_tx_power_conn_start_ucfg
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_init_le_ping_params
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_conn_init_pcl_ctxt_ucfg
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_conn_init_cte_ctxt_ucfg
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_init_data_len_pdu_params
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_guard_time_for_close_conn_event
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_p
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_convert_sca_to_ppm
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_calculate_ww
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_calc_packetlength
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le2ByteToInt16
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_push
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_push
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_get_anchor_point
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_CSA_2_update_remapped_table
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_selection_algorithm_2
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[38a]"></a>LL_conn_guard_time_for_close_conn_event</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_guard_time_for_close_conn_event))
<BR><BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmGetTxPhy
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmGetRxPhy
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_calc_data_packet_time_st
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_program_next_taskslot
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
</UL>

<P><STRONG><a name="[315]"></a>LL_conn_init</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_init))
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_phy_update_init_ucfg
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_per_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_p
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_init_cmn_len_upd_params
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[369]"></a>LL_conn_init_data_len_pdu_params</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_init_data_len_pdu_params))
<BR><BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_phy_upd_cntx_per_p
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
</UL>

<P><STRONG><a name="[312]"></a>LL_conn_is_slave</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_is_slave))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_sleep_latency_cancellation
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_LTK
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_Update_Offline_Processing
</UL>

<P><STRONG><a name="[38]"></a>LL_conn_isr</STRONG> (Thumb, 138 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LL_conn_isr &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_ClearRadioTimerValue
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_CalculateRSSI
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_IntGetIntStatusTxDone
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobEnableBlue
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_signal_resource_idx
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rf_rx_path_compensation_db
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_delete_taskslot
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_pcl_update_avg_rssi_ucfg
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_process_enc_params
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_disconnect_reason
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_encryption_on_off_routine
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_connect.o(i.LL_conn_go_to_connect)
</UL>
<P><STRONG><a name="[2cf]"></a>LL_conn_multi_link_connection</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_multi_link_connection))
<BR><BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
</UL>

<P><STRONG><a name="[38f]"></a>LL_conn_per_init</STRONG> (Thumb, 178 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_per_init))
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic_csr_ucfg
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_get_control_pdu_size
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_p
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_init
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_handle_isr_disconnect
</UL>

<P><STRONG><a name="[395]"></a>LL_conn_process_enc_params</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_process_enc_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LL_conn_process_enc_params &rArr; BLEPLAT_aes128_encrypt &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmGetEncKeyPtr
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmGetEncIvPtr
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_aes128_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr
</UL>

<P><STRONG><a name="[39]"></a>LL_conn_program_next_taskslot</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_program_next_taskslot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_conn_program_next_taskslot &rArr; LL_conn_copy_tx_data_packet &rArr; Mem_Buff_block_copy &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SetRcvLen
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketGetDataPtr
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_anchorstretch
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_guard_time_for_close_conn_event
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_enc_on
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_data_p
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_copy_tx_data_packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_connect.o(i.LL_conn_go_to_connect)
</UL>
<P><STRONG><a name="[3a2]"></a>LL_conn_receive_data</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_receive_data))
<BR><BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmToggleNesn
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_Acl_Data_Indication_Queue_Full
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[1dd]"></a>LL_conn_release_conn_idx</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_release_conn_idx))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_stop_isr
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_stop
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_handle_isr_disconnect
</UL>

<P><STRONG><a name="[3a]"></a>LL_conn_reschedule_taskslot_params</STRONG> (Thumb, 814 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_reschedule_taskslot_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LL_conn_reschedule_taskslot_params &rArr; BLECNTR_SmSetChannelMap
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_upd_csr_ucfg
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_enhanced_get_latency
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetUnmappedChan
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetTxMode
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetRxMode
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetChannelMap
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmGetTxPhy
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmGetHopIncr
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmGetAccessAddr
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SetRcvLen
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetPllTrig
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetIncChan
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_DemodDelaySt
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_phy_upd_pending_ucfg
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_taskslot_length_interval_anchor
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_delete_taskslot
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_disconnect_reason
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_guard_time_for_close_conn_event
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_p
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_calculate_ww
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_update_cmd_rsp_timer
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_modulo_37
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_CSA_2_update_remapped_table
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_selection_algorithm_2
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_close_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_connect.o(i.LL_conn_go_to_connect)
</UL>
<P><STRONG><a name="[1d8]"></a>LL_conn_reserve_conn_idx</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_reserve_conn_idx), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start
</UL>

<P><STRONG><a name="[3b3]"></a>LL_conn_set_ch_classification_pending</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_set_ch_classification_pending))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reclassify_channel
</UL>

<P><STRONG><a name="[332]"></a>LL_conn_set_chmap_params</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_set_chmap_params))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
</UL>

<P><STRONG><a name="[3b4]"></a>LL_conn_set_conn_update_params</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_set_conn_update_params))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
</UL>

<P><STRONG><a name="[34f]"></a>LL_conn_set_disconnect_reason</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_set_disconnect_reason))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_disconnect_link_from_CPF
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[3b5]"></a>LL_conn_set_enc_params</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_set_enc_params))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[3a6]"></a>LL_conn_set_instant_active</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_set_instant_active))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_rx_with_instant
</UL>

<P><STRONG><a name="[3b6]"></a>LL_conn_set_nack_flag</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_set_nack_flag))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[3b7]"></a>LL_conn_set_rx_acl_blocked</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_set_rx_acl_blocked))
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_ctrl_fld_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[3b8]"></a>LL_conn_set_start_enc</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_set_start_enc))
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_ctrl_fld_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[3b9]"></a>LL_conn_set_stop_enc</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_set_stop_enc))
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_ctrl_fld_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[3ba]"></a>LL_conn_set_tx_acl_blocked</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_set_tx_acl_blocked))
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_ctrl_fld_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[3bb]"></a>LL_conn_set_tx_ctrl_pdu_has_instant</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_set_tx_ctrl_pdu_has_instant))
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_ctrl_fld_p
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_tx_with_instant
</UL>

<P><STRONG><a name="[3a0]"></a>LL_conn_set_tx_ctrl_pdu_state</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_set_tx_ctrl_pdu_state))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_ctrl_fld_p
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4tx
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4ack
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_machine
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_tx_terminate_in_progress
</UL>

<P><STRONG><a name="[3bd]"></a>LL_conn_slave_sleep_latency_cancellation</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_slave_sleep_latency_cancellation))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LL_conn_slave_sleep_latency_cancellation &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_GetCurrentSysTime
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_next_anchor
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_is_slave
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_time_t1_lessthan_t2
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_latency_cancelation
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_sleep_latency_cancellation_check
</UL>

<P><STRONG><a name="[60]"></a>LL_conn_slave_sleep_latency_cancellation_check</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, hci_common.o(i.LL_conn_slave_sleep_latency_cancellation_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LL_conn_slave_sleep_latency_cancellation_check &rArr; LL_conn_slave_sleep_latency_cancellation &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_sleep_latency_cancellation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[3dc]"></a>LL_conn_upd_data_length_change_event_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_cpf_connection_update.o(i.LL_conn_upd_data_length_change_event_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
</UL>

<P><STRONG><a name="[562]"></a>LL_conn_upd_data_length_change_event_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_connection_update.o(i.LL_conn_upd_data_length_change_event_ucfg_weak), UNUSED)

<P><STRONG><a name="[3db]"></a>LL_conn_upd_max_tx_time_coded_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_cpf_connection_update.o(i.LL_conn_upd_max_tx_time_coded_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
</UL>

<P><STRONG><a name="[563]"></a>LL_conn_upd_max_tx_time_coded_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_connection_update.o(i.LL_conn_upd_max_tx_time_coded_ucfg_weak), UNUSED)

<P><STRONG><a name="[3bf]"></a>LL_conn_version_exchange_set_cached</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, ll_cpf_version_exchange.o(i.LL_conn_version_exchange_set_cached))
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_version_exchange
</UL>

<P><STRONG><a name="[37]"></a>LL_connect_cancel_taskslot_dummy</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_connect.o(i.LL_connect_cancel_taskslot_dummy))
<BR><BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_isr_active
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_connect.o(i.LL_conn_go_to_connect)
</UL>
<P><STRONG><a name="[303]"></a>LL_cpe_clr_active</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_clr_active))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_cpid_from_sm
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_version_exchange
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_le_ping
</UL>

<P><STRONG><a name="[3be]"></a>LL_cpe_conn_exception_opcode_from_sm</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_conn_exception_opcode_from_sm))
<BR><BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_cpid_from_sm
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_update_cmd_rsp_timer
</UL>

<P><STRONG><a name="[324]"></a>LL_cpe_conn_get_proc_id_from_sm</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_conn_get_proc_id_from_sm))
<BR><BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_cpid_from_sm
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Read_Remote_Used_Features
</UL>

<P><STRONG><a name="[1c9]"></a>LL_cpe_engine</STRONG> (Thumb, 366 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_engine))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = LL_cpe_engine &rArr; ll_cpe_handle_isr_disconnect &rArr; LLC_authenticated_payload_timeout_reset &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_isr_active
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_data_p
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_rx_ctrl_pdu_full
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_set_unknown_rsp_pending
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_opcode
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_first_opcode
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_machine
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_handle_isr_disconnect
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_state
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_expected_opcode
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_blocked_status
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_tx_terminate_in_progress
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_rx_pdu_can_be_processed
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_rxctrlpdu_checkreject
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_ctrl_flds_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Process_Q
</UL>

<P><STRONG><a name="[2ff]"></a>LL_cpe_get_active_status</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_get_active_status))
<BR><BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_enhanced_get_latency
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_update_cmd_rsp_timer
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_close_event
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_start_le_ping
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reclassify_channel
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4tx
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4rsp
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4ack
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_dormant
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_blocked_status
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Read_Remote_Used_Features
</UL>

<P><STRONG><a name="[313]"></a>LL_cpe_get_cntxt</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_get_cntxt))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_version_exchange
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_LTK
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Read_Remote_Used_Features
</UL>

<P><STRONG><a name="[30e]"></a>LL_cpe_get_tx_terminate_in_progress</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_get_tx_terminate_in_progress))
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_ctrl_flds_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Disconnect_Link
</UL>

<P><STRONG><a name="[316]"></a>LL_cpe_init</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_init))
<BR><BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_phy_update_ucfg
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_pcl_ucfg
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_past_ucfg
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_length_update_ucfg
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_cte_ucfg
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_register_cpf
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_reset_state_machines
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[3d2]"></a>LL_cpe_init_cte_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_init_cte_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init
</UL>

<P><STRONG><a name="[3d6]"></a>LL_cpe_init_cte_ucfg_weak</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_init_cte_ucfg_weak), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_register_cpf
</UL>

<P><STRONG><a name="[3d0]"></a>LL_cpe_init_length_update_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_init_length_update_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init
</UL>

<P><STRONG><a name="[3d7]"></a>LL_cpe_init_length_update_ucfg_weak</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_init_length_update_ucfg_weak), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_register_cpf
</UL>

<P><STRONG><a name="[3d3]"></a>LL_cpe_init_past_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_init_past_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init
</UL>

<P><STRONG><a name="[3d8]"></a>LL_cpe_init_past_ucfg_weak</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_init_past_ucfg_weak), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_register_cpf
</UL>

<P><STRONG><a name="[3d4]"></a>LL_cpe_init_pcl_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_init_pcl_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init
</UL>

<P><STRONG><a name="[3d9]"></a>LL_cpe_init_pcl_ucfg_weak</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_init_pcl_ucfg_weak), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_register_cpf
</UL>

<P><STRONG><a name="[3d1]"></a>LL_cpe_init_phy_update_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_init_phy_update_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init
</UL>

<P><STRONG><a name="[3da]"></a>LL_cpe_init_phy_update_ucfg_weak</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_init_phy_update_ucfg_weak), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_register_cpf
</UL>

<P><STRONG><a name="[3cf]"></a>LL_cpe_register_cpf</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_register_cpf))
<BR><BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_phy_update_ucfg_weak
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_pcl_ucfg_weak
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_past_ucfg_weak
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_length_update_ucfg_weak
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init_cte_ucfg_weak
</UL>

<P><STRONG><a name="[301]"></a>LL_cpe_set_active</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_set_active))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_start_le_ping
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reclassify_channel
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_version_exchange
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_le_ping
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_tx_terminate_in_progress
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Read_Remote_Used_Features
</UL>

<P><STRONG><a name="[335]"></a>LL_cpe_set_blocked</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_set_blocked))
<BR><BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
</UL>

<P><STRONG><a name="[30f]"></a>LL_cpe_set_disconnect</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_set_disconnect))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Disconnect_Link
</UL>

<P><STRONG><a name="[300]"></a>LL_cpe_set_prepare_tx_pdu</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_set_prepare_tx_pdu))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_start_le_ping
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reclassify_channel
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_version_exchange
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_le_ping
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_LTK
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Read_Remote_Used_Features
</UL>

<P><STRONG><a name="[336]"></a>LL_cpe_set_rx_with_instant</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_set_rx_with_instant))
<BR><BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_instant_active
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
</UL>

<P><STRONG><a name="[333]"></a>LL_cpe_set_tx_with_instant</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_set_tx_with_instant))
<BR><BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_tx_ctrl_pdu_has_instant
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
</UL>

<P><STRONG><a name="[3b]"></a>LL_cpf_conn_upd</STRONG> (Thumb, 518 bytes, Stack size unknown bytes, ll_cpf_connection_update.o(i.LL_cpf_conn_upd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LL_cpf_conn_upd &rArr; LL_conn_disconnect_link_from_CPF &rArr; LL_sched_check_and_call_sched &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_conn_update_params
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_is_slave
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_latency
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_handle
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_eventcount
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_p
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_disconnect_link_from_CPF
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cntxt
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_clr_active
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_upd_max_tx_time_coded_ucfg
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_upd_data_length_change_event_ucfg
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_update_le_ping_params
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_tx_with_instant
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_rx_with_instant
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_blocked
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_cpe.o(i.LL_cpe_init)
</UL>
<P><STRONG><a name="[318]"></a>LL_dtm_init</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, ll_dtm.o(i.LL_dtm_init))
<BR><BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cte_csr_ucfg
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_get_cte_buffers
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_dtm_get_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[1da]"></a>LL_eadv_BLUE_SM</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, ll_ext_adv.o(i.LL_eadv_BLUE_SM), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetTxPwr
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetTxPacketPtr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetTxMode
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetRxPacketPtr
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetRxMode
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetHopIncr
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetCrcInit
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetAccessAddr
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmInitTo0
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start
</UL>

<P><STRONG><a name="[3df]"></a>LL_eadv_Blue_Rx</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, ll_ext_adv.o(i.LL_eadv_Blue_Rx), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetTimerTrigRcv
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetTimer2Active
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetTimeout
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetRxReady
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetPllTrig
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetNextTxMode
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetNextSlot
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetNextPtr
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetKeepsemareq
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetIntRcvOk
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetIntDone
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetDataPtr
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetAdvPduFormat
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketInitTo0
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketClrPllTrig
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketClrIncChan
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_start_legacy
</UL>

<P><STRONG><a name="[3e0]"></a>LL_eadv_Blue_Tx</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, ll_ext_adv.o(i.LL_eadv_Blue_Tx), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetTxReady
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetTimerTrigRcv
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetTimerTrigDone
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetTimer2Active
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetTimeout
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetPllTrig
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetNextSlot
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetNextRxMode
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetNextPtr
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetKeepsemareq
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetIntDone
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetDataPtr
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetAdvPduFormat
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketInitTo0
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketClrIncChan
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_start_legacy
</UL>

<P><STRONG><a name="[4df]"></a>LL_eadv_initializedata_data_struc</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_ext_adv.o(i.LL_eadv_initializedata_data_struc), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_set_advertising_data_ptr
</UL>

<P><STRONG><a name="[321]"></a>LL_eadv_initializedata_data_struc_not_enable</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_ext_adv.o(i.LL_eadv_initializedata_data_struc_not_enable), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters
</UL>

<P><STRONG><a name="[4dd]"></a>LL_eadv_max_supported_data_check_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_ext_adv.o(i.LL_eadv_max_supported_data_check_ucfg_weak), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_set_advertising_data_ptr
</UL>

<P><STRONG><a name="[564]"></a>LL_eadv_max_supported_data_check_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_ext_adv.o(i.LL_eadv_max_supported_data_check_ucfg_weak), UNUSED)

<P><STRONG><a name="[1dc]"></a>LL_eadv_start_extended_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_ext_adv.o(i.LL_eadv_start_extended_ucfg_weak), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start
</UL>

<P><STRONG><a name="[565]"></a>LL_eadv_start_extended_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_ext_adv.o(i.LL_eadv_start_extended_ucfg_weak), UNUSED)

<P><STRONG><a name="[115]"></a>LL_eadv_switchbackupdata_data_struc</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, ll_ext_adv.o(i.LL_eadv_switchbackupdata_data_struc))
<BR><BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_adv_scan_resp_data_update_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
</UL>

<P><STRONG><a name="[4de]"></a>LL_eadv_switchdata_data_struc</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_ext_adv.o(i.LL_eadv_switchdata_data_struc), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_set_advertising_data_ptr
</UL>

<P><STRONG><a name="[3c]"></a>LL_encryption</STRONG> (Thumb, 1506 bytes, Stack size unknown bytes, ll_cpf_encryption.o(i.LL_encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LL_encryption &rArr; LL_conn_disconnect_link_from_CPF &rArr; LL_sched_check_and_call_sched &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_tx_acl_blocked
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_stop_enc
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_start_enc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_rx_acl_blocked
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_nack_flag
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_enc_params
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_is_slave
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_handle
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_enc_on
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_disconnect_link_from_CPF
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_tx_acl_blocked
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_rx_acl_blocked
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_nack_flag
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number32
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_prepare_tx_pdu
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cntxt
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_clr_active
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le4ByteToInt32
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le3ByteToInt32
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_push
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_push
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_blocked
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_cpe.o(i.LL_cpe_init)
</UL>
<P><STRONG><a name="[1ce]"></a>LL_ext_scan_get_cntxt_p</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_ext_scan.o(i.LL_ext_scan_get_cntxt_p))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_force_chsel_1
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_sel_algo2
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Set_Random_Address
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_set_legacy_advertising_data_ptr
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_set_advertising_data_ptr
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator_LL
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCAN_INIT
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_periodicscan_get_overall_context_ptr
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_offline_callbackr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_notallow_resolvinglistaccess_function
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Advertising_Set_Random_Address
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Context_Test_Advertising_Handle
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_Offline_Callback
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Context_ReturnFree
</UL>

<P><STRONG><a name="[3e]"></a>LL_feature_exchange</STRONG> (Thumb, 496 bytes, Stack size unknown bytes, ll_cpf_feature_exchange.o(i.LL_feature_exchange))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_upd_csr_ucfg
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic_csr_ucfg
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcl_csr_ucfg
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_adv_scan_enabled_ucfg
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cte_csr_ucfg
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_controller_privacy_csr_ucfg
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_sel_algo2
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_is_slave
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_handle
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_prepare_tx_pdu
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cntxt
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_clr_active
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_remote_used_features_complete_event_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_cpe.o(i.LL_cpe_init)
</UL>
<P><STRONG><a name="[2d0]"></a>LL_force_chsel_1</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, ll_ext_adv.o(i.LL_force_chsel_1))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ext_scan_get_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
</UL>

<P><STRONG><a name="[1cd]"></a>LL_get_control_pdu_size</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_routines.o(i.LL_get_control_pdu_size))
<BR><BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_per_init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator_LL
</UL>

<P><STRONG><a name="[f7]"></a>LL_get_rx_common_buffer_p</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_routines.o(i.LL_get_rx_common_buffer_p))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_start_legacy
</UL>

<P><STRONG><a name="[10f]"></a>LL_get_tx_common_buffer_p</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_routines.o(i.LL_get_tx_common_buffer_p))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_createslot
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_start_legacy
</UL>

<P><STRONG><a name="[375]"></a>LL_past_default_params_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_cpf_past_procedure.o(i.LL_past_default_params_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
</UL>

<P><STRONG><a name="[566]"></a>LL_past_default_params_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_past_procedure.o(i.LL_past_default_params_ucfg_weak), UNUSED)

<P><STRONG><a name="[4d5]"></a>LL_past_initialize_connect_context_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_cpf_past_procedure.o(i.LL_past_initialize_connect_context_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_handle_isr_disconnect
</UL>

<P><STRONG><a name="[567]"></a>LL_past_initialize_connect_context_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_cpf_past_procedure.o(i.LL_past_initialize_connect_context_ucfg_weak), UNUSED)

<P><STRONG><a name="[1d1]"></a>LL_periodicadv_init_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_periodicadv.o(i.LL_periodicadv_init_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator_LL
</UL>

<P><STRONG><a name="[568]"></a>LL_periodicadv_init_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_periodicadv.o(i.LL_periodicadv_init_ucfg_weak), UNUSED)

<P><STRONG><a name="[3eb]"></a>LL_periodicscan_get_overall_context_ptr</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_periodicscan.o(i.LL_periodicscan_get_overall_context_ptr))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ext_scan_get_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_notallow_resolvinglistaccess_function
</UL>

<P><STRONG><a name="[1d2]"></a>LL_periodicscan_init_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_periodicscan.o(i.LL_periodicscan_init_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator_LL
</UL>

<P><STRONG><a name="[569]"></a>LL_periodicscan_init_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_periodicscan.o(i.LL_periodicscan_init_ucfg_weak), UNUSED)

<P><STRONG><a name="[3af]"></a>LL_phy_upd_pending_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_connect.o(i.LL_phy_upd_pending_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
</UL>

<P><STRONG><a name="[56a]"></a>LL_phy_upd_pending_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_connect.o(i.LL_phy_upd_pending_ucfg_weak), UNUSED)

<P><STRONG><a name="[368]"></a>LL_phy_update_init_per_st_data_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_cpf_phy_update.o(i.LL_phy_update_init_per_st_data_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
</UL>

<P><STRONG><a name="[56b]"></a>LL_phy_update_init_per_st_data_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_cpf_phy_update.o(i.LL_phy_update_init_per_st_data_ucfg_weak), UNUSED)

<P><STRONG><a name="[38e]"></a>LL_phy_update_init_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_cpf_phy_update.o(i.LL_phy_update_init_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_init
</UL>

<P><STRONG><a name="[56c]"></a>LL_phy_update_init_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_cpf_phy_update.o(i.LL_phy_update_init_ucfg_weak), UNUSED)

<P><STRONG><a name="[3ec]"></a>LL_priv_AddAddrInEachList</STRONG> (Thumb, 368 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_priv_AddAddrInEachList))
<BR><BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_SearchAddrReturnMatchAndNextSlot
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_Innerlist_size
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_add_to_ConnIDList
</UL>

<P><STRONG><a name="[3ef]"></a>LL_priv_Init_ResolvedPart_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_priv_Init_ResolvedPart_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_PRIVWHIT_vInit_Struct
</UL>

<P><STRONG><a name="[56d]"></a>LL_priv_Init_ResolvedPart_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_priv_Init_ResolvedPart_ucfg_weak), UNUSED)

<P><STRONG><a name="[1d3]"></a>LL_priv_PRIVWHIT_vInit_Struct</STRONG> (Thumb, 256 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_priv_PRIVWHIT_vInit_Struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_priv_PRIVWHIT_vInit_Struct &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_Init_ResolvedPart_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator_LL
</UL>

<P><STRONG><a name="[3f0]"></a>LL_priv_SearchAddrReturnMatch</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_priv_SearchAddrReturnMatch))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_test_address_in_ConnIDList
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_add_to_ConnIDList
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_u32ProcessAdvPacket_ucfg_weak
</UL>

<P><STRONG><a name="[3ed]"></a>LL_priv_SearchAddrReturnMatchAndNextSlot</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_priv_SearchAddrReturnMatchAndNextSlot))
<BR><BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_remove_from_ConnIDList
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_AddAddrInEachList
</UL>

<P><STRONG><a name="[31d]"></a>LL_priv_SynchPeerIDList_And_WhiteIDList_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_priv_SynchPeerIDList_And_WhiteIDList_ucfg_weak), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertise_Enable
</UL>

<P><STRONG><a name="[56e]"></a>LL_priv_SynchPeerIDList_And_WhiteIDList_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_priv_SynchPeerIDList_And_WhiteIDList_ucfg_weak), UNUSED)

<P><STRONG><a name="[104]"></a>LL_priv_add_to_ConnIDList</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_priv_add_to_ConnIDList))
<BR><BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_AddAddrInEachList
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_SearchAddrReturnMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[2b]"></a>LL_priv_notallow_resolvinglistaccess_function</STRONG> (Thumb, 102 bytes, Stack size unknown bytes, ll_ext_adv.o(i.LL_priv_notallow_resolvinglistaccess_function))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ext_scan_get_cntxt_p
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_periodicscan_get_overall_context_ptr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_ext_adv.o(i.EADV_init)
</UL>
<P><STRONG><a name="[3f1]"></a>LL_priv_remove_from_ConnIDList</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_priv_remove_from_ConnIDList))
<BR><BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_SearchAddrReturnMatchAndNextSlot
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_RemoveAddrInEachListIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_handle_isr_disconnect
</UL>

<P><STRONG><a name="[ff]"></a>LL_priv_test_address_in_ConnIDList</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_priv_test_address_in_ConnIDList))
<BR><BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_p
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_SearchAddrReturnMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[fe]"></a>LL_priv_u32ProcessAdvPacket_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_priv_u32ProcessAdvPacket_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[3f3]"></a>LL_priv_u32ProcessAdvPacket_ucfg_weak</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_priv_u32ProcessAdvPacket_ucfg_weak), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_SearchAddrReturnMatch
</UL>

<P><STRONG><a name="[5c]"></a>LL_priv_u8OfflineProcessing_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_priv_u8OfflineProcessing_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[56f]"></a>LL_priv_u8OfflineProcessing_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_priv_u8OfflineProcessing_ucfg_weak), UNUSED)

<P><STRONG><a name="[1d5]"></a>LL_priv_vOwnPrivateAddress_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_priv_vOwnPrivateAddress_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_Offline_Callback
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start
</UL>

<P><STRONG><a name="[570]"></a>LL_priv_vOwnPrivateAddress_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_priv_vOwnPrivateAddress_ucfg_weak), UNUSED)

<P><STRONG><a name="[1d6]"></a>LL_priv_vPeerPrivateAddress_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_priv_vPeerPrivateAddress_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_Offline_Callback
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start
</UL>

<P><STRONG><a name="[571]"></a>LL_priv_vPeerPrivateAddress_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_priv_vPeerPrivateAddress_ucfg_weak), UNUSED)

<P><STRONG><a name="[3ac]"></a>LL_sched_anchorstretch</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_anchorstretch))
<BR><BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_program_next_taskslot
</UL>

<P><STRONG><a name="[1e3]"></a>LL_sched_check_and_call_sched</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_check_and_call_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LL_sched_check_and_call_sched &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_GetCurrentSysTime
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_is_scheduler_call_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_disconnect_link_from_CPF
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_stop
</UL>

<P><STRONG><a name="[350]"></a>LL_sched_delete_taskslot</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_delete_taskslot))
<BR><BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_disconnect_link_from_CPF
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[3e2]"></a>LL_sched_enable_taskslot</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_enable_taskslot), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_start_legacy
</UL>

<P><STRONG><a name="[105]"></a>LL_sched_engine</STRONG> (Thumb, 520 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_engine))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_SetRadioTimerValue
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_GetCurrentSysTime
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_ClearRadioTimerValue
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SetRadioCloseTimeout
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobWriteSlot
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobEnableBlue
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobDisableBlue
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_ClearSemareq
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_return_token
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_common_p
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine_manage_skip_cancel_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_check_and_call_sched
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_latency_cancelation
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start
</UL>

<P><STRONG><a name="[112]"></a>LL_sched_engine_return_actual_scheduler_margin</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_engine_return_actual_scheduler_margin))
<BR><BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
</UL>

<P><STRONG><a name="[172]"></a>LL_sched_get_cntxt_task</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_get_cntxt_task))
<BR><BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[170]"></a>LL_sched_get_current_taskslot_no</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_get_current_taskslot_no))
<BR><BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[173]"></a>LL_sched_get_done_cb</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_get_done_cb))
<BR><BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[325]"></a>LL_sched_get_next_anchor</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_get_next_anchor))
<BR><BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_sleep_latency_cancellation
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>

<P><STRONG><a name="[327]"></a>LL_sched_get_next_taskslot</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_get_next_taskslot))
<BR><BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>

<P><STRONG><a name="[171]"></a>LL_sched_get_per_state</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_get_per_state))
<BR><BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[fa]"></a>LL_sched_get_priority_min</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_get_priority_min))
<BR><BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[317]"></a>LL_sched_init</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_init))
<BR><BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[1e0]"></a>LL_sched_is_scheduler_call_pending</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_is_scheduler_call_pending))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_time_t1_ge_t2
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_check_and_call_sched
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start
</UL>

<P><STRONG><a name="[1de]"></a>LL_sched_release_taskslot</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_release_taskslot), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start
</UL>

<P><STRONG><a name="[1d9]"></a>LL_sched_reserve_taskslot</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_reserve_taskslot), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start
</UL>

<P><STRONG><a name="[11a]"></a>LL_sched_set_anchor</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_set_anchor))
<BR><BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start
</UL>

<P><STRONG><a name="[1e2]"></a>LL_sched_set_cancel_request</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_set_cancel_request))
<BR><BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_stop_isr
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_stop
</UL>

<P><STRONG><a name="[38b]"></a>LL_sched_set_params</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_set_params))
<BR><BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
</UL>

<P><STRONG><a name="[fb]"></a>LL_sched_set_priority</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_set_priority))
<BR><BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[3bc]"></a>LL_sched_set_taskslot_length_anchor</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_set_taskslot_length_anchor))
<BR><BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_latency_cancelation
</UL>

<P><STRONG><a name="[3b2]"></a>LL_sched_set_taskslot_length_interval_anchor</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_set_taskslot_length_interval_anchor))
<BR><BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
</UL>

<P><STRONG><a name="[113]"></a>LL_sched_time_t1_ge_t2</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_time_t1_ge_t2))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine_manage_skip_cancel_slot
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_is_scheduler_call_pending
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
</UL>

<P><STRONG><a name="[3f]"></a>LL_version_exchange</STRONG> (Thumb, 342 bytes, Stack size unknown bytes, ll_cpf_version_exchange.o(i.LL_version_exchange))
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_handle
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_prepare_tx_pdu
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cntxt
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_clr_active
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_version_exchange_set_cached
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_version_exchange_cached
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_remote_version_information_complete_event_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_cpe.o(i.LL_cpe_init)
</UL>
<P><STRONG><a name="[17]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.LPUART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[24]"></a>MR_BLE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.MR_BLE_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[123]"></a>Make_Connection</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, serial_port.o(i.Make_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Make_Connection &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_advertising_enable
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Tick
</UL>

<P><STRONG><a name="[2f7]"></a>Mem_Buff_append</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_append))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_receive_data
</UL>

<P><STRONG><a name="[34c]"></a>Mem_Buff_block_copy</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_block_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Mem_Buff_block_copy &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_copy_tx_data_packet
</UL>

<P><STRONG><a name="[3a7]"></a>Mem_Buff_block_write</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_block_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Mem_Buff_block_write &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[403]"></a>Mem_Buff_cmp</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Mem_Buff_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Pckt_Cmp
</UL>

<P><STRONG><a name="[425]"></a>Mem_Buff_get</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_get))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>

<P><STRONG><a name="[426]"></a>Mem_Buff_get_chain_count</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_get_chain_count))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>

<P><STRONG><a name="[427]"></a>Mem_Buff_get_chain_size</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_get_chain_size))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Resize_Pckt_Pdu_Size
</UL>

<P><STRONG><a name="[404]"></a>Mem_Buff_init</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_init))
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_signal_resource_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Init
</UL>

<P><STRONG><a name="[405]"></a>Mem_Buff_read</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_read))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>

<P><STRONG><a name="[406]"></a>Mem_Buff_release</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_release))
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_signal_resource_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>

<P><STRONG><a name="[407]"></a>Mem_Buff_resize</STRONG> (Thumb, 174 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_resize))
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_signal_resource_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Resize_Pckt_Pdu_Size
</UL>

<P><STRONG><a name="[408]"></a>Mem_Buff_write</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_write))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
</UL>

<P><STRONG><a name="[409]"></a>ModulesInit</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ble_serialport_main.o(i.ModulesInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ModulesInit &rArr; HAL_VTIMER_Init &rArr; _start_timer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_Init
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKAMGR_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_Init
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AESMGR_Init
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNGMGR_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_InitGlobal
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40d]"></a>ModulesTick</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_serialport_main.o(i.ModulesTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 2552 + Unknown Stack Size
<LI>Call Chain = ModulesTick &rArr; NVMDB_Tick &rArr; NVMDB_CleanDB &rArr; CleanLargeDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_Tick
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Tick
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Tick
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40f]"></a>MrBleBiasTrimConfig</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, system_bluenrg_lp.o(i.MrBleBiasTrimConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MrBleBiasTrimConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRFClockSource
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRC64MPLLPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[9]"></a>NMI_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bluenrg_lp_it.o(i.NMI_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CrashHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[15b]"></a>NVMDB_AppendRecord</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, nvm_db.o(i.NVMDB_AppendRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = NVMDB_AppendRecord &rArr; NVMDB_AppendRecordNoCache &rArr; WriteRecord &rArr; write_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleWriteOperation
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_AppendRecordNoCache
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheFindOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmAdd
</UL>

<P><STRONG><a name="[415]"></a>NVMDB_CleanDB</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nvm_db.o(i.NVMDB_CleanDB))
<BR><BR>[Stack]<UL><LI>Max Depth = 2472 + Unknown Stack Size
<LI>Call Chain = NVMDB_CleanDB &rArr; CleanLargeDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDBType
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanPage
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLargeDB
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Tick
</UL>

<P><STRONG><a name="[15d]"></a>NVMDB_CompareCurrentRecord</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, nvm_db.o(i.NVMDB_CompareCurrentRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = NVMDB_CompareCurrentRecord &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecordInCache
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheFindOperation
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmCompare
</UL>

<P><STRONG><a name="[160]"></a>NVMDB_DeleteRecord</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, nvm_db.o(i.NVMDB_DeleteRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = NVMDB_DeleteRecord &rArr; NVMDB_DeleteRecordNoCache &rArr; InvalidateRecord &rArr; NVMDB_TimeCheck &rArr; HAL_VTIMER_GetCurrentSysTime &rArr; TIMER_GetCurrentSysTime &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_DeleteRecordNoCache
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheRequestBuffer
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheInsertData
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmDiscard
</UL>

<P><STRONG><a name="[15f]"></a>NVMDB_Erase</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, nvm_db.o(i.NVMDB_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 2432 + Unknown Stack Size
<LI>Call Chain = NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulePageEraseOperation
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveCacheOp
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_get_info
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDBType
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseWithTimeCheck
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSmallDB
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheRequestBuffer
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheInsertData
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmDiscard
</UL>

<P><STRONG><a name="[159]"></a>NVMDB_HandleInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nvm_db.o(i.NVMDB_HandleInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVMDB_HandleInit
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Tick
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmGet
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSmallDB
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanPage
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLargeDB
</UL>

<P><STRONG><a name="[158]"></a>NVMDB_Init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nvm_db.o(i.NVMDB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVMDB_Init &rArr; NVMDB_get_info
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_get_info
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_Init
</UL>

<P><STRONG><a name="[162]"></a>NVMDB_ReadCurrentRecord</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nvm_db.o(i.NVMDB_ReadCurrentRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = NVMDB_ReadCurrentRecord &rArr; ReadCurrentRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentRecordNoLock
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmGet
</UL>

<P><STRONG><a name="[163]"></a>NVMDB_ReadNextRecord</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, nvm_db.o(i.NVMDB_ReadNextRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNextRecordNoLock
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmGet
</UL>

<P><STRONG><a name="[40e]"></a>NVMDB_Tick</STRONG> (Thumb, 370 bytes, Stack size 72 bytes, nvm_db.o(i.NVMDB_Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 2544 + Unknown Stack Size
<LI>Call Chain = NVMDB_Tick &rArr; NVMDB_CleanDB &rArr; CleanLargeDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_HandleInit
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_CleanDB
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveCacheOp
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_get_info
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_CleanCheck
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_AppendRecordNoCache
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRecord
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseWithTimeCheck
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSmallDB
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinueCleanLargeDB
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulesTick
</UL>

<P><STRONG><a name="[1c0]"></a>NVMDB_TimeCheck</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nvm_db_upper_layer.o(i.NVMDB_TimeCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = NVMDB_TimeCheck &rArr; HAL_VTIMER_GetCurrentSysTime &rArr; TIMER_GetCurrentSysTime &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_GetCurrentSysTime
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_ReadNextRadioActivity
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecord
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRecord
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseWithTimeCheck
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSmallDB
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinueCleanLargeDB
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanPage
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLargeDB
</UL>

<P><STRONG><a name="[41e]"></a>OTA_Jump_To_Service_Manager_Application</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ota_btl.o(i.OTA_Jump_To_Service_Manager_Application))
<BR><BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19d]"></a>Osal_MemCmp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, osal.o(i.Osal_MemCmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_cmp_128bits
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_cmp
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_from_nvm
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_generate_hash
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_repeated_attacks_protection_start
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_AddRecord
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_notify_rejectlist_penalty_timer_expiration
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_validate_signed_packet
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_oob_check_is_remote_data_present
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_is_peer_rejectlisted
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Long_Term_Key
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_GetRecord
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_cmp
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Resolve_Private_Address
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_GATT_SeekRecord
</UL>

<P><STRONG><a name="[141]"></a>Osal_MemSet</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, osal.o(i.Osal_MemSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_connection
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_init
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_HAL_Init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_char_descriptor
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmInitTo0
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketInitTo0
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_char_sanity_check
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_store_to_nvm
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_generate_hash
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Protocol_Timer_cb
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_process_abort
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_connection_complete_handler
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_add_pairing_record_to_bonding_database
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_SR_Compute_c1_Confirm_Value
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Long_Term_Key
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_generate_EDIV_recovery_DIV
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_PRIVWHIT_vInit_Struct
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCAN_INIT
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters_Default
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_repeated_attacks_timer_cb
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_Calculate_Hash
</UL>

<P><STRONG><a name="[40a]"></a>PKAMGR_Init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pka_manager.o(i.PKAMGR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PKAMGR_Init &rArr; PKAMGR_PrivateInit
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKAMGR_PrivateInit
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulesInit
</UL>

<P><STRONG><a name="[420]"></a>PKAMGR_PrivateInit</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, pka_manager_bluenrg_lp.o(i.PKAMGR_PrivateInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PKAMGR_PrivateInit
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKAMGR_Init
</UL>

<P><STRONG><a name="[421]"></a>PKAMGR_Unlock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pka_manager.o(i.PKAMGR_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_IRQHandler
</UL>

<P><STRONG><a name="[1b]"></a>PKA_IRQHandler</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, pka_manager_bluenrg_lp.o(i.PKA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PKA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PKA_VerifyProcess
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PKA_GetData
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKAMGR_Unlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[261]"></a>PM_Copy_Pckt_Data</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, pm.o(i.PM_Copy_Pckt_Data))
<BR><BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data_event_copy
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_command_reject_event_copy
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event_copy
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_copy
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event_copy
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_prepare_write_req_event_copy
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_resp_event_copy
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_multiple_resp_event_copy
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_type_resp_event_copy
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_group_type_resp_event_copy
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_blob_resp_event_copy
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_prepare_write_resp_event_copy
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_info_resp_event_copy
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_by_type_value_resp_event_copy
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_receive_data
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_extract_write_packet_data
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_validate_signed_packet
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_pairing_phase_3_keys_receiving
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_exc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
</UL>

<P><STRONG><a name="[2cc]"></a>PM_Eng_Config</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, pm.o(i.PM_Eng_Config))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
</UL>

<P><STRONG><a name="[2f6]"></a>PM_Extract_Pdu_MBuff</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, pm.o(i.PM_Extract_Pdu_MBuff))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_receive_data
</UL>

<P><STRONG><a name="[244]"></a>PM_Get_Available_Buffer</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, pm.o(i.PM_Get_Available_Buffer))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_tx_pool_evt_tsk
</UL>

<P><STRONG><a name="[2e6]"></a>PM_Get_Pckt</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, pm.o(i.PM_Get_Pckt))
<BR><BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_get
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Check_And_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_receive_data
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_build_command_reject_pdu
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_2octets_packet_send
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Host_Pckt
</UL>

<P><STRONG><a name="[1ac]"></a>PM_Init</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, pm.o(i.PM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PM_Init &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Eng_Config
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator_PM
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[265]"></a>PM_Pckt_Cmp</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, pm.o(i.PM_Pckt_Cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PM_Pckt_Cmp &rArr; Mem_Buff_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_pairing_phase_3_keys_receiving
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
</UL>

<P><STRONG><a name="[22d]"></a>PM_Release_Acl_Pckt</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, pm.o(i.PM_Release_Acl_Pckt))
<BR><BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_release
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_get_chain_count
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_hci_disconnection_complete_evt_hndl
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_disconnection
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_close_event
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_acl_data_hndl
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_receive_data
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_acl_cframe_signaling_hndl
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_discard_accumulated_acl_data
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_build_command_reject_pdu
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_release_unexpected_acl_packet
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_resp
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_flush_user_pending_list
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_hvtx
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_rcv
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_flush_rx_queues
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_process_pending_rx_packets_tsk
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data_event_push
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_flush_rx_pckts
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_unexpect_rx
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event_cb
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_cb
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event_cb
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_prepare_write_req_event_cb
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_resp_event_cb
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_multiple_resp_event_cb
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_type_resp_event_cb
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_group_type_resp_event_cb
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_blob_resp_event_cb
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_prepare_write_resp_event_cb
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_info_resp_event_cb
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_by_type_value_resp_event_cb
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_acl_data_done
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data
</UL>

<P><STRONG><a name="[23d]"></a>PM_Resize_Pckt_Pdu_Size</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, pm.o(i.PM_Resize_Pckt_Pdu_Size))
<BR><BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_resize
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_get_chain_size
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Check_And_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_receive_data
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_send
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_send_response
</UL>

<P><STRONG><a name="[266]"></a>PM_Write_Pckt_Data</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, pm.o(i.PM_Write_Pckt_Data))
<BR><BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_receive_data
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_build_command_reject_pdu
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_hvtx
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_exc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_prep_wr_exc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
</UL>

<P><STRONG><a name="[3e8]"></a>PRIV_controller_privacy_csr_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hci_privacy.o(i.PRIV_controller_privacy_csr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_buffer_size_value
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
</UL>

<P><STRONG><a name="[572]"></a>PRIV_controller_privacy_csr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci_privacy.o(i.PRIV_controller_privacy_csr_ucfg_weak), UNUSED)

<P><STRONG><a name="[2a]"></a>PRIV_offline_callbackr</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, ll_ext_adv.o(i.PRIV_offline_callbackr))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ext_scan_get_cntxt_p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_ext_adv.o(i.EADV_init)
</UL>
<P><STRONG><a name="[10]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.PVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.PendSV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[49]"></a>Process_InputData</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, serial_port.o(i.Process_InputData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Process_InputData &rArr; BSP_COM_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_serialport_main.o(i.main)
</UL>
<P><STRONG><a name="[23]"></a>RADIO_CTRL_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.RADIO_CTRL_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[322]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rf_driver_ll_rcc.o(i.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetSystemClockFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.RCC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[8]"></a>RESET_HANDLER</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.RESET_HANDLER))
<BR><BR>[Stack]<UL><LI>Max Depth = 2552 + Unknown Stack Size
<LI>Call Chain = RESET_HANDLER &rArr; main &rArr; ModulesTick &rArr; NVMDB_Tick &rArr; NVMDB_CleanDB &rArr; CleanLargeDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[2d4]"></a>RNGMGR_GetRandom16</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rng_manager_bluenrg_lp.o(i.RNGMGR_GetRandom16))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
</UL>

<P><STRONG><a name="[40b]"></a>RNGMGR_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rng_manager_bluenrg_lp.o(i.RNGMGR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RNGMGR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulesInit
</UL>

<P><STRONG><a name="[19]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[42a]"></a>RadioClockConfig</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, system_bluenrg_lp.o(i.RadioClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RadioClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRFClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1cf]"></a>SCAN_INIT</STRONG> (Thumb, 170 bytes, Stack size unknown bytes, ll_ext_scan.o(i.SCAN_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SCAN_INIT &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ext_scan_get_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator_LL
</UL>

<P><STRONG><a name="[42c]"></a>SDB_Find_Matching_LTK</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, sdb.o(i.SDB_Find_Matching_LTK))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = SDB_Find_Matching_LTK &rArr; BleNvm_SEC_Dump &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_DumpInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_Dump
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_generate_EDIV_recovery_DIV
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_get_security_data_record
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Long_Term_Key
</UL>

<P><STRONG><a name="[431]"></a>SDB_Find_Record</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, sdb.o(i.SDB_Find_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = SDB_Find_Record &rArr; BleNvm_SEC_GetRecord &rArr; BleNvm_SEC_Dump &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_GetRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_check_is_device_bonded
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_read_peer_bonded_data
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[432]"></a>SDB_get_records_count</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, sdb.o(i.SDB_get_records_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = SDB_get_records_count &rArr; BleNvm_SEC_GetRecordNumber &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_GetRecordNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[42f]"></a>SDB_get_security_data_record</STRONG> (Thumb, 200 bytes, Stack size unknown bytes, sdb.o(i.SDB_get_security_data_record))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>

<P><STRONG><a name="[2a3]"></a>SDB_read_peer_bonded_data</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, sdb.o(i.SDB_read_peer_bonded_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = SDB_read_peer_bonded_data &rArr; SDB_Find_Record &rArr; BleNvm_SEC_GetRecord &rArr; BleNvm_SEC_Dump &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_GATT_GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_from_nvm
</UL>

<P><STRONG><a name="[2a9]"></a>SDB_write_gatt_client_data</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, sdb.o(i.SDB_write_gatt_client_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = SDB_write_gatt_client_data &rArr; BleNvm_SEC_RemoveRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_RemoveRecord
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_GetRecord
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_GATT_UpdateData
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_store_to_nvm
</UL>

<P><STRONG><a name="[430]"></a>SMA_Diversify</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, smp_algo_sap.o(i.SMA_Diversify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SMA_Diversify &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_IRK
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_CSRK
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Long_Term_Key
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_generate_EDIV_recovery_DIV
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>

<P><STRONG><a name="[434]"></a>SMA_Generate_CSRK</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, smp_algo_sap.o(i.SMA_Generate_CSRK))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SMA_Generate_CSRK &rArr; SMA_Diversify &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
</UL>

<P><STRONG><a name="[435]"></a>SMA_Generate_IRK</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, smp_algo_sap.o(i.SMA_Generate_IRK))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SMA_Generate_IRK &rArr; SMA_Diversify &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Resolvable_Private_Address
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
</UL>

<P><STRONG><a name="[436]"></a>SMA_LP_s1_Generate_STK</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, smp_algo_sap.o(i.SMA_LP_s1_Generate_STK))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SMA_LP_s1_Generate_STK &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
</UL>

<P><STRONG><a name="[42e]"></a>SMA_generate_EDIV_recovery_DIV</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, smp_algo_sap.o(i.SMA_generate_EDIV_recovery_DIV))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SMA_generate_EDIV_recovery_DIV &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Long_Term_Key
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>

<P><STRONG><a name="[1af]"></a>SMP_Init</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, smp_common.o(i.SMP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMP_Init &rArr; smp_dynamic_allocator &rArr; csmem_mem_assign &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_init
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dynamic_allocator
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_init_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[439]"></a>SMP_Protocol_Timer_cb</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, smp_common.o(i.SMP_Protocol_Timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMP_Protocol_Timer_cb &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_update_statistics_on_pairing_complete
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_timers_callback
</UL>

<P><STRONG><a name="[2ef]"></a>SMP_acl_data_hndl</STRONG> (Thumb, 240 bytes, Stack size unknown bytes, smp_common.o(i.SMP_acl_data_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = SMP_acl_data_hndl &rArr; smp_Keys_Distribution_Complete &rArr; smp_pairing_completed &rArr; smp_add_pairing_record_to_bonding_database &rArr; BleNvm_SEC_AddRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_insert_tail
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_mux_acl_packet
</UL>

<P><STRONG><a name="[28e]"></a>SMP_check_encryption_key_size</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, smp_common.o(i.SMP_check_encryption_key_size))
<BR><BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_sec_perm
</UL>

<P><STRONG><a name="[2a5]"></a>SMP_check_is_device_bonded</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, smp_common.o(i.SMP_check_is_device_bonded))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = SMP_check_is_device_bonded &rArr; SDB_Find_Record &rArr; BleNvm_SEC_GetRecord &rArr; BleNvm_SEC_Dump &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_is_bonded
</UL>

<P><STRONG><a name="[236]"></a>SMP_forget_device_by_conn_handle</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, smp_common.o(i.SMP_forget_device_by_conn_handle))
<BR><BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_disconnection
</UL>

<P><STRONG><a name="[28d]"></a>SMP_get_link_status</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, smp_common.o(i.SMP_get_link_status))
<BR><BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_sec_perm
</UL>

<P><STRONG><a name="[28c]"></a>SMP_get_remote_device_list_item</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, smp_common.o(i.SMP_get_remote_device_list_item))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_long_term_key_request_evt_hndl
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_encryption_change_evt_hndl
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_disconnection_complete_evt_hndl
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_acl_data_hndl
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_link_status
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_check_is_device_bonded
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_check_encryption_key_size
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_write_gatt_client_data
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_read_peer_bonded_data
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_sec_perm
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_forget_device_by_conn_handle
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_validate_signed_packet
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_process_pending_rx_packets_tsk
</UL>

<P><STRONG><a name="[43f]"></a>SMP_hci_disconnection_complete_evt_hndl</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, smp_common.o(i.SMP_hci_disconnection_complete_evt_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SMP_hci_disconnection_complete_evt_hndl &rArr; SMP_reset_timer &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_update_statistics_on_pairing_complete
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_flush_rx_queues
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_find_remote_device_index
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_reset_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event_int_cb
</UL>

<P><STRONG><a name="[443]"></a>SMP_hci_encryption_change_evt_hndl</STRONG> (Thumb, 298 bytes, Stack size unknown bytes, smp_common.o(i.SMP_hci_encryption_change_evt_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SMP_hci_encryption_change_evt_hndl &rArr; SMP_reset_timer &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_find_remote_device_index
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_reset_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_int_cb
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_int_cb
</UL>

<P><STRONG><a name="[444]"></a>SMP_hci_le_connection_complete_evt_hndl</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, smp_common.o(i.SMP_hci_le_connection_complete_evt_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMP_hci_le_connection_complete_evt_hndl &rArr; SMP_connection_complete_handler &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_current_address
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_connection_complete_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_int_cb
</UL>

<P><STRONG><a name="[445]"></a>SMP_hci_le_enhanced_connection_complete_evt_hndl</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, smp_common.o(i.SMP_hci_le_enhanced_connection_complete_evt_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMP_hci_le_enhanced_connection_complete_evt_hndl &rArr; SMP_connection_complete_handler &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Address_Initialized
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_current_address
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_connection_complete_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_int_cb
</UL>

<P><STRONG><a name="[447]"></a>SMP_hci_le_long_term_key_request_evt_hndl</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, smp_common.o(i.SMP_hci_le_long_term_key_request_evt_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = SMP_hci_le_long_term_key_request_evt_hndl &rArr; smp_le_long_term_key_response &rArr; smp_Get_Long_Term_Key &rArr; SDB_Find_Matching_LTK &rArr; BleNvm_SEC_Dump &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_le_long_term_key_response
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_event_int_cb
</UL>

<P><STRONG><a name="[5a]"></a>SMP_process_pending_rx_packets_tsk</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, securitymgr.o(i.SMP_process_pending_rx_packets_tsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = SMP_process_pending_rx_packets_tsk &rArr; smp_Process_Rx_Packet_wrt_Current_State &rArr; smp_cmn_pairing_phase_3_keys_receiving &rArr; smp_pairing_completed &rArr; smp_add_pairing_record_to_bonding_database &rArr; BleNvm_SEC_AddRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_remove_head
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_send
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_receive
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_insert_head
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>SMP_process_sc_ecc_pk_generation_tsk_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, securitymgr.o(i.SMP_process_sc_ecc_pk_generation_tsk_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[573]"></a>SMP_process_sc_ecc_pk_generation_tsk_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, securitymgr.o(i.SMP_process_sc_ecc_pk_generation_tsk_ucfg_weak), UNUSED)

<P><STRONG><a name="[59]"></a>SMP_process_state_transition_actions_tsk</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, securitymgr.o(i.SMP_process_state_transition_actions_tsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = SMP_process_state_transition_actions_tsk &rArr; smp_Execute_Actions_wrt_Current_State &rArr; smp_pairing_completed &rArr; smp_add_pairing_record_to_bonding_database &rArr; BleNvm_SEC_AddRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[441]"></a>SMP_reset_timer</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, smp_common.o(i.SMP_reset_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SMP_reset_timer &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_stop
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_start
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_encryption_change_evt_hndl
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_disconnection_complete_evt_hndl
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_repeated_attacks_protection_start
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_process_abort
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_le_long_term_key_response
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State_SR_excerpt
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_rejectlist_start_probation_timer2
</UL>

<P><STRONG><a name="[2cd]"></a>SMP_sc_force_debug_key_usage</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, smp_scv42_sap.o(i.SMP_sc_force_debug_key_usage))
<BR><BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_is_another_sc_pairing_ongoing
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_init_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
</UL>

<P><STRONG><a name="[278]"></a>SMP_validate_signed_packet</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, smp_common.o(i.SMP_validate_signed_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SMP_validate_signed_packet &rArr; sma_CMAC_generate_tag &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_CSRK
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_exc
</UL>

<P><STRONG><a name="[1f8]"></a>SM_Generate_Resolvable_Private_Address</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, smp_algo_sap.o(i.SM_Generate_Resolvable_Private_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SM_Generate_Resolvable_Private_Address &rArr; SMA_Generate_IRK &rArr; SMA_Diversify &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_IRK
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_Calculate_Hash
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_generate_new_rpa
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
</UL>

<P><STRONG><a name="[1a3]"></a>SM_Resolve_Private_Address</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, smp_algo_sap.o(i.SM_Resolve_Private_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SM_Resolve_Private_Address &rArr; sma_Calculate_Hash &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_Calculate_Hash
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_GetRecord
</UL>

<P><STRONG><a name="[13]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.SPI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[14]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.SPI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[15]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.SPI3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[b]"></a>SVC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg_lp_it.o(i.SVC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[124]"></a>Send_Data_Over_BLE</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, serial_port.o(i.Send_Data_Over_BLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Send_Data_Over_BLE &rArr; aci_gatt_srv_notify &rArr; GAT_srv_notify &rArr; GAT_att_srv_hvtx &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_notify
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Tick
</UL>

<P><STRONG><a name="[453]"></a>Serial_port_DeviceInit</STRONG> (Thumb, 252 bytes, Stack size 88 bytes, serial_port.o(i.Serial_port_DeviceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = Serial_port_DeviceInit &rArr; aci_gap_init &rArr; GAP_Init &rArr; IDD_Initialize_Device_IDs &rArr; BleNvm_DEV_ID_DATA_GetRecord &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_init
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_advertising_data
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_advertising_configuration
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_set_dev_name
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Serial_port_Service
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45b]"></a>SysCount_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock.o(i.SysCount_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_IRQHandler
</UL>

<P><STRONG><a name="[d]"></a>SysTick_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bluenrg_lp_it.o(i.SysTick_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCount_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[45c]"></a>SystemClockConfig</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, system_bluenrg_lp.o(i.SystemClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemClockConfig &rArr; SystemTimer_TimeoutConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutExpired
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutConfig
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRC64MPLLPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[45d]"></a>SystemInit</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, system_bluenrg_lp.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SystemInit &rArr; SystemClockConfig &rArr; SystemTimer_TimeoutConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInterruptPriority
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioClockConfig
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MrBleBiasTrimConfig
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpsTrimConfig
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3fe]"></a>SystemTimer_TimeoutConfig</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, system_bluenrg_lp.o(i.SystemTimer_TimeoutConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemTimer_TimeoutConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpsTrimConfig
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSConfig
</UL>

<P><STRONG><a name="[3ff]"></a>SystemTimer_TimeoutExpired</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.SystemTimer_TimeoutExpired))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpsTrimConfig
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSConfig
</UL>

<P><STRONG><a name="[18]"></a>TIM1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.TIM1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[2b8]"></a>TIMER_ClearRadioTimerValue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rf_driver_ll_timer.o(i.TIMER_ClearRadioTimerValue))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_ClearRadioTimerValue
</UL>

<P><STRONG><a name="[2bb]"></a>TIMER_Enable_CPU_WKUP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rf_driver_ll_timer.o(i.TIMER_Enable_CPU_WKUP))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_Init
</UL>

<P><STRONG><a name="[16f]"></a>TIMER_GetAnchorPoint</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rf_driver_ll_timer.o(i.TIMER_GetAnchorPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER_GetAnchorPoint &rArr; TIMER_GetPastSysTime &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetPastSysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[2be]"></a>TIMER_GetCurrentCalibrationData</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rf_driver_ll_timer.o(i.TIMER_GetCurrentCalibrationData))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_Tick
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_Init
</UL>

<P><STRONG><a name="[1b4]"></a>TIMER_GetCurrentSysTime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rf_driver_ll_timer.o(i.TIMER_GetCurrentSysTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER_GetCurrentSysTime &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_time_and_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_Tick
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_SetRadioTimerValue
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_GetCurrentSysTime
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_ClearRadioTimerValue
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_user_timeout
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_radio_activity
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cst_sharedCallback
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_start
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartFirstActive_sysT
</UL>

<P><STRONG><a name="[45f]"></a>TIMER_GetPastSysTime</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, rf_driver_ll_timer.o(i.TIMER_GetPastSysTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIMER_GetPastSysTime &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_time_and_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetAnchorPoint
</UL>

<P><STRONG><a name="[2bd]"></a>TIMER_Init</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, rf_driver_ll_timer.o(i.TIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER_Init &rArr; update_cal_delay &rArr; us_to_machinetime
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_to_systime
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cal_delay
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_xtal_startup_time
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_calibrate
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_Init
</UL>

<P><STRONG><a name="[2c8]"></a>TIMER_IsCalibrationRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rf_driver_ll_timer.o(i.TIMER_IsCalibrationRunning))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_Tick
</UL>

<P><STRONG><a name="[2bf]"></a>TIMER_MachineTimeToSysTime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rf_driver_ll_timer.o(i.TIMER_MachineTimeToSysTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_MachineTimeToSysTime
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_Init
</UL>

<P><STRONG><a name="[109]"></a>TIMER_SetRadioCloseTimeout</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rf_driver_ll_timer.o(i.TIMER_SetRadioCloseTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[465]"></a>TIMER_SetRadioHostWakeupTime</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rf_driver_ll_timer.o(i.TIMER_SetRadioHostWakeupTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_SetRadioHostWakeupTime
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_user_timeout
</UL>

<P><STRONG><a name="[466]"></a>TIMER_SetRadioTimerValue</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, rf_driver_ll_timer.o(i.TIMER_SetRadioTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_time_and_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_radio_activity
</UL>

<P><STRONG><a name="[467]"></a>TIMER_StartCalibration</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rf_driver_ll_timer.o(i.TIMER_StartCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_StartCalibration
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_start_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_callback
</UL>

<P><STRONG><a name="[2c9]"></a>TIMER_UpdateCalibrationData</STRONG> (Thumb, 142 bytes, Stack size 80 bytes, rf_driver_ll_timer.o(i.TIMER_UpdateCalibrationData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIMER_UpdateCalibrationData &rArr; update_cal_delay &rArr; us_to_machinetime
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_system_time
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cal_delay
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_xtal_startup_time
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_calibration_data
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_Tick
</UL>

<P><STRONG><a name="[1c]"></a>UPCONV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.UPCONV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[16]"></a>USART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bluenrg_lp_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_IRQHandler &rArr; BSP_COM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[fc]"></a>UTIL_AdvConvStringToSrambledIntWithType</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, ll_ext_scan.o(i.UTIL_AdvConvStringToSrambledIntWithType))
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Set_Random_Address
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_Offline_Callback
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start
</UL>

<P><STRONG><a name="[298]"></a>UUID_cmp</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, uuid.o(i.UUID_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = UUID_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_attr_p
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
</UL>

<P><STRONG><a name="[2a6]"></a>UUID_cmp_128bits</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, uuid.o(i.UUID_cmp_128bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = UUID_cmp_128bits &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_is_supported_grouping_type
</UL>

<P><STRONG><a name="[269]"></a>UUID_get_value_p</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, uuid.o(i.UUID_get_value_p))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
</UL>

<P><STRONG><a name="[29b]"></a>UUID_write_to_flat</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, uuid.o(i.UUID_write_to_flat))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_chr_decl_val
</UL>

<P><STRONG><a name="[16c]"></a>_BlueNRG_Stack_Initialization</STRONG> (Thumb, 140 bytes, Stack size unknown bytes, bluenrg_main_func.o(i._BlueNRG_Stack_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _BlueNRG_Stack_Initialization &rArr; HAL_VTIMER_ClearRadioTimerValue &rArr; TIMER_GetCurrentSysTime &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_ClearRadioTimerValue
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_upd_csr_ucfg
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic_csr_ucfg
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcl_csr_ucfg
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_csr_ucfg
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_cos_csr_ucfg
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_adv_scan_enabled_ucfg
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cte_csr_ucfg
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_controller_privacy_csr_ucfg
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_connections_csr_ucfg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobDisableBlue
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_ClearInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Init
</UL>

<P><STRONG><a name="[222]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lps22hh_reg.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Tick
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_type
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_perms
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_opcode
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_first_opcode
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_machine
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_exec_fn_id_by_op
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_check_packet
</UL>

<P><STRONG><a name="[2b9]"></a>__TIMER_GetSysRfSetupTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rf_driver_ll_timer.o(i.__TIMER_GetSysRfSetupTime))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_ClearRadioTimerValue
</UL>

<P><STRONG><a name="[429]"></a>__low_level_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, system_bluenrg_lp.o(i.__low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __low_level_init
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_contextRestore
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
</UL>

<P><STRONG><a name="[e6]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[473]"></a>aci_att_clt_exec_write_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_exec_write_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_exec_write_resp_event_cb
</UL>

<P><STRONG><a name="[a3]"></a>aci_att_clt_exec_write_resp_event_cb</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_exec_write_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_exec_write_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[475]"></a>aci_att_clt_find_by_type_value_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_find_by_type_value_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_by_type_value_resp_event_cb
</UL>

<P><STRONG><a name="[9c]"></a>aci_att_clt_find_by_type_value_resp_event_cb</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_find_by_type_value_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_by_type_value_resp_event_copy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_by_type_value_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[474]"></a>aci_att_clt_find_by_type_value_resp_event_copy</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, events.o(i.aci_att_clt_find_by_type_value_resp_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_by_type_value_resp_event_cb
</UL>

<P><STRONG><a name="[477]"></a>aci_att_clt_find_info_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_find_info_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_info_resp_event_cb
</UL>

<P><STRONG><a name="[9b]"></a>aci_att_clt_find_info_resp_event_cb</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_find_info_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_info_resp_event_copy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_info_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[476]"></a>aci_att_clt_find_info_resp_event_copy</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, events.o(i.aci_att_clt_find_info_resp_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_info_resp_event_cb
</UL>

<P><STRONG><a name="[479]"></a>aci_att_clt_prepare_write_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_prepare_write_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_prepare_write_resp_event_cb
</UL>

<P><STRONG><a name="[a2]"></a>aci_att_clt_prepare_write_resp_event_cb</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_prepare_write_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_prepare_write_resp_event_copy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_prepare_write_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[478]"></a>aci_att_clt_prepare_write_resp_event_copy</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, events.o(i.aci_att_clt_prepare_write_resp_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_prepare_write_resp_event_cb
</UL>

<P><STRONG><a name="[47b]"></a>aci_att_clt_read_blob_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_read_blob_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_blob_resp_event_cb
</UL>

<P><STRONG><a name="[9f]"></a>aci_att_clt_read_blob_resp_event_cb</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_read_blob_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_blob_resp_event_copy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_blob_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[47a]"></a>aci_att_clt_read_blob_resp_event_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, events.o(i.aci_att_clt_read_blob_resp_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_blob_resp_event_cb
</UL>

<P><STRONG><a name="[47d]"></a>aci_att_clt_read_by_group_type_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_read_by_group_type_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_group_type_resp_event_cb
</UL>

<P><STRONG><a name="[a1]"></a>aci_att_clt_read_by_group_type_resp_event_cb</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_read_by_group_type_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_group_type_resp_event_copy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_group_type_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[47c]"></a>aci_att_clt_read_by_group_type_resp_event_copy</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, events.o(i.aci_att_clt_read_by_group_type_resp_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_group_type_resp_event_cb
</UL>

<P><STRONG><a name="[47f]"></a>aci_att_clt_read_by_type_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_read_by_type_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_type_resp_event_cb
</UL>

<P><STRONG><a name="[9d]"></a>aci_att_clt_read_by_type_resp_event_cb</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_read_by_type_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_type_resp_event_copy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_type_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[47e]"></a>aci_att_clt_read_by_type_resp_event_copy</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, events.o(i.aci_att_clt_read_by_type_resp_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_type_resp_event_cb
</UL>

<P><STRONG><a name="[481]"></a>aci_att_clt_read_multiple_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_read_multiple_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_multiple_resp_event_cb
</UL>

<P><STRONG><a name="[a0]"></a>aci_att_clt_read_multiple_resp_event_cb</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_read_multiple_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_multiple_resp_event_copy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_multiple_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[480]"></a>aci_att_clt_read_multiple_resp_event_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, events.o(i.aci_att_clt_read_multiple_resp_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_multiple_resp_event_cb
</UL>

<P><STRONG><a name="[483]"></a>aci_att_clt_read_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_read_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_resp_event_cb
</UL>

<P><STRONG><a name="[9e]"></a>aci_att_clt_read_resp_event_cb</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_read_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_resp_event_copy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[482]"></a>aci_att_clt_read_resp_event_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, events.o(i.aci_att_clt_read_resp_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_resp_event_cb
</UL>

<P><STRONG><a name="[484]"></a>aci_att_exchange_mtu_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_exchange_mtu_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_exchange_mtu_resp_event_cb
</UL>

<P><STRONG><a name="[9a]"></a>aci_att_exchange_mtu_resp_event_cb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_exchange_mtu_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_exchange_mtu_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[485]"></a>aci_att_srv_exec_write_req_event</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, events.o(i.aci_att_srv_exec_write_req_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = aci_att_srv_exec_write_req_event &rArr; GAT_srv_resp &rArr; GAT_att_srv_resp &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_exec_write_req_event_cb
</UL>

<P><STRONG><a name="[ae]"></a>aci_att_srv_exec_write_req_event_cb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_srv_exec_write_req_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = aci_att_srv_exec_write_req_event_cb &rArr; aci_att_srv_exec_write_req_event &rArr; GAT_srv_resp &rArr; GAT_att_srv_resp &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_exec_write_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[486]"></a>aci_att_srv_prepare_write_req_event</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, events.o(i.aci_att_srv_prepare_write_req_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = aci_att_srv_prepare_write_req_event &rArr; GAT_srv_resp &rArr; GAT_att_srv_resp &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_prepare_write_req_event_cb
</UL>

<P><STRONG><a name="[ad]"></a>aci_att_srv_prepare_write_req_event_cb</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_srv_prepare_write_req_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = aci_att_srv_prepare_write_req_event_cb &rArr; aci_att_srv_prepare_write_req_event &rArr; GAT_srv_resp &rArr; GAT_att_srv_resp &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_prepare_write_req_event
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_prepare_write_req_event_copy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[487]"></a>aci_att_srv_prepare_write_req_event_copy</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, events.o(i.aci_att_srv_prepare_write_req_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_prepare_write_req_event_cb
</UL>

<P><STRONG><a name="[127]"></a>aci_event_fifo_push</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, events.o(i.aci_event_fifo_push))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_limited_discoverable_event_check
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_encryption_change_evt_hndl
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Tx_Cmpl_Pkt_Handler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Rcv_Pkt_Handler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_push
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_push
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_acl_data_hndl
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_timeout_handler_signalling
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_process_basic_mode_command
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_discard_accumulated_acl_data
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_attribute_modified_event_push
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_tx_pool_evt_tsk
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_handle_disconnec_iterate_f
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_discoverability_mode
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_wrapper
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_le_long_term_key_response
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Set_Key_Association_Method
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State_SR_excerpt
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_cb
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_scan_request_received_event_push
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_push
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_push
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_set_terminated_event_push
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_adv_scan_resp_data_update_event_push
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_push
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_push
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_handle_isr_disconnect
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data_event_push
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_of_completed_packets_event_push
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_read_event_push
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_exc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_prep_wr_exc
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_exec_wr_exc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_exchange_mtu_exc
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_confirm_exc
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_rcv_srv_initiated
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_remote_version_information_complete_event_push
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_remote_used_features_complete_event_push
</UL>

<P><STRONG><a name="[126]"></a>aci_event_fifo_push_header</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, events.o(i.aci_event_fifo_push_header))
<BR><BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifoBuf_getFreeHeader
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_limited_discoverable_event_check
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_encryption_change_evt_hndl
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Tx_Cmpl_Pkt_Handler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Rcv_Pkt_Handler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_push
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_push
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_acl_data_hndl
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_timeout_handler_signalling
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_process_basic_mode_command
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_discard_accumulated_acl_data
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_attribute_modified_event_push
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_tx_pool_evt_tsk
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_handle_disconnec_iterate_f
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_discoverability_mode
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_wrapper
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_le_long_term_key_response
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Set_Key_Association_Method
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State_SR_excerpt
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_cb
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_scan_request_received_event_push
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_push
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_push
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_set_terminated_event_push
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_adv_scan_resp_data_update_event_push
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_push
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_push
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpf_conn_upd
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_handle_isr_disconnect
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data_event_push
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_of_completed_packets_event_push
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_read_event_push
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_exc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_prep_wr_exc
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_exec_wr_exc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_exchange_mtu_exc
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_confirm_exc
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_rcv_srv_initiated
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_remote_version_information_complete_event_push
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_remote_used_features_complete_event_push
</UL>

<P><STRONG><a name="[48a]"></a>aci_gap_addr_not_resolved_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gap.o(i.aci_gap_addr_not_resolved_event))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_addr_not_resolved_event_cb
</UL>

<P><STRONG><a name="[8c]"></a>aci_gap_addr_not_resolved_event_cb</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, events_gap.o(i.aci_gap_addr_not_resolved_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_addr_not_resolved_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[48b]"></a>aci_gap_bond_lost_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_smp.o(i.aci_gap_bond_lost_event))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_bond_lost_event_cb
</UL>

<P><STRONG><a name="[8a]"></a>aci_gap_bond_lost_event_cb</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, events_smp.o(i.aci_gap_bond_lost_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_bond_lost_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[457]"></a>aci_gap_init</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, aci_gap.o(i.aci_gap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = aci_gap_init &rArr; GAP_Init &rArr; IDD_Initialize_Device_IDs &rArr; BleNvm_DEV_ID_DATA_GetRecord &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_get_handles
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_port_DeviceInit
</UL>

<P><STRONG><a name="[8e]"></a>aci_gap_keypress_notification_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_smp.o(i.aci_gap_keypress_notification_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[574]"></a>aci_gap_keypress_notification_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_smp.o(i.aci_gap_keypress_notification_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[48c]"></a>aci_gap_limited_discoverable_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gap.o(i.aci_gap_limited_discoverable_event))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event_cb
</UL>

<P><STRONG><a name="[86]"></a>aci_gap_limited_discoverable_event_cb</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, events_gap.o(i.aci_gap_limited_discoverable_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>aci_gap_numeric_comparison_value_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_smp.o(i.aci_gap_numeric_comparison_value_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[575]"></a>aci_gap_numeric_comparison_value_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_smp.o(i.aci_gap_numeric_comparison_value_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[48d]"></a>aci_gap_pairing_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_smp.o(i.aci_gap_pairing_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_cb
</UL>

<P><STRONG><a name="[87]"></a>aci_gap_pairing_complete_event_cb</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, events_smp.o(i.aci_gap_pairing_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[48e]"></a>aci_gap_pass_key_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_smp.o(i.aci_gap_pass_key_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pass_key_req_event_cb
</UL>

<P><STRONG><a name="[88]"></a>aci_gap_pass_key_req_event_cb</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, events_smp.o(i.aci_gap_pass_key_req_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pass_key_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[48f]"></a>aci_gap_proc_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gap.o(i.aci_gap_proc_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_cb
</UL>

<P><STRONG><a name="[8b]"></a>aci_gap_proc_complete_event_cb</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, events_gap.o(i.aci_gap_proc_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[490]"></a>aci_gap_proc_complete_event_copy</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, events.o(i.aci_gap_proc_complete_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_wrapper
</UL>

<P><STRONG><a name="[211]"></a>aci_gap_proc_complete_event_wrapper</STRONG> (Thumb, 166 bytes, Stack size unknown bytes, gap_common.o(i.aci_gap_proc_complete_event_wrapper))
<BR><BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_copy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_name_disc_proc_connected_check
</UL>

<P><STRONG><a name="[458]"></a>aci_gap_set_advertising_configuration</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, aci_gap_slave.o(i.aci_gap_set_advertising_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = aci_gap_set_advertising_configuration &rArr; GAP_generate_new_rpa &rArr; CST_start &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_advertising_configuration_ucfg
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_generate_new_rpa
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_check_discoverability_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_port_DeviceInit
</UL>

<P><STRONG><a name="[459]"></a>aci_gap_set_advertising_data</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, aci_gap_slave.o(i.aci_gap_set_advertising_data))
<BR><BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_advertising_data_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_port_DeviceInit
</UL>

<P><STRONG><a name="[402]"></a>aci_gap_set_advertising_enable</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, aci_gap_slave.o(i.aci_gap_set_advertising_enable))
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_advertising_enable_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Connection
</UL>

<P><STRONG><a name="[494]"></a>aci_gap_slave_security_initiated_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_smp.o(i.aci_gap_slave_security_initiated_event))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_slave_security_initiated_event_cb
</UL>

<P><STRONG><a name="[89]"></a>aci_gap_slave_security_initiated_event_cb</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, events_smp.o(i.aci_gap_slave_security_initiated_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_slave_security_initiated_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[495]"></a>aci_gap_terminate</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, aci_gap.o(i.aci_gap_terminate))
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Terminate_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event
</UL>

<P><STRONG><a name="[496]"></a>aci_gatt_clt_disc_read_char_by_uuid_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_clt_disc_read_char_by_uuid_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_disc_read_char_by_uuid_resp_event_cb
</UL>

<P><STRONG><a name="[a8]"></a>aci_gatt_clt_disc_read_char_by_uuid_resp_event_cb</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_clt_disc_read_char_by_uuid_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_disc_read_char_by_uuid_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[497]"></a>aci_gatt_clt_error_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_clt_error_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_error_resp_event_cb
</UL>

<P><STRONG><a name="[a7]"></a>aci_gatt_clt_error_resp_event_cb</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_clt_error_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_error_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[499]"></a>aci_gatt_clt_indication_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_clt_indication_event))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event_cb
</UL>

<P><STRONG><a name="[a4]"></a>aci_gatt_clt_indication_event_cb</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_clt_indication_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event_copy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[498]"></a>aci_gatt_clt_indication_event_copy</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, events.o(i.aci_gatt_clt_indication_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event_cb
</UL>

<P><STRONG><a name="[49b]"></a>aci_gatt_clt_notification_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_clt_notification_event))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_cb
</UL>

<P><STRONG><a name="[a5]"></a>aci_gatt_clt_notification_event_cb</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_clt_notification_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_copy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[49a]"></a>aci_gatt_clt_notification_event_copy</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, events.o(i.aci_gatt_clt_notification_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_cb
</UL>

<P><STRONG><a name="[49c]"></a>aci_gatt_clt_proc_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_clt_proc_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_proc_complete_event_cb
</UL>

<P><STRONG><a name="[a6]"></a>aci_gatt_clt_proc_complete_event_cb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_clt_proc_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_proc_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[49d]"></a>aci_gatt_proc_timeout_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_proc_timeout_event))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_timeout_event_cb
</UL>

<P><STRONG><a name="[99]"></a>aci_gatt_proc_timeout_event_cb</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_proc_timeout_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_timeout_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[2ad]"></a>aci_gatt_srv_add_char</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, aci_gatt.o(i.aci_gatt_srv_add_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_add_char &rArr; GAT_srv_add_characteristic &rArr; GAT_srv_add_char_descriptor &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_characteristic
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_init
</UL>

<P><STRONG><a name="[12c]"></a>aci_gatt_srv_add_service</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, aci_gatt.o(i.aci_gatt_srv_add_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_add_service &rArr; GAT_srv_add_service &rArr; GAT_srv_add_characteristic &rArr; GAT_srv_add_char_descriptor &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Serial_port_Service
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_profile_init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_init
</UL>

<P><STRONG><a name="[49e]"></a>aci_gatt_srv_attribute_modified_event</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, serial_port.o(i.aci_gatt_srv_attribute_modified_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_attribute_modified_event &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_attribute_modified_event_cb
</UL>

<P><STRONG><a name="[98]"></a>aci_gatt_srv_attribute_modified_event_cb</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_srv_attribute_modified_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_attribute_modified_event_cb &rArr; aci_gatt_srv_attribute_modified_event &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_attribute_modified_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[49f]"></a>aci_gatt_srv_confirmation_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_srv_confirmation_event))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_confirmation_event_cb
</UL>

<P><STRONG><a name="[aa]"></a>aci_gatt_srv_confirmation_event_cb</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_srv_confirmation_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_confirmation_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>aci_gatt_srv_get_char_decl_handle</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, aci_gatt.o(i.aci_gatt_srv_get_char_decl_handle))
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_char_decl_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_set_dev_name
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Serial_port_Service
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_set_char_value
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_get_handles
</UL>

<P><STRONG><a name="[2ab]"></a>aci_gatt_srv_get_service_handle</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, aci_gatt.o(i.aci_gatt_srv_get_service_handle))
<BR><BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_service_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gap_profile_get_handles
</UL>

<P><STRONG><a name="[456]"></a>aci_gatt_srv_init</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, aci_gatt.o(i.aci_gatt_srv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_init &rArr; Gatt_profile_init &rArr; aci_gatt_srv_add_service &rArr; GAT_srv_add_service &rArr; GAT_srv_add_characteristic &rArr; GAT_srv_add_char_descriptor &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_profile_init
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_port_DeviceInit
</UL>

<P><STRONG><a name="[452]"></a>aci_gatt_srv_notify</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, aci_gatt.o(i.aci_gatt_srv_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_notify &rArr; GAT_srv_notify &rArr; GAT_att_srv_hvtx &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_Over_BLE
</UL>

<P><STRONG><a name="[4a0]"></a>aci_gatt_srv_read_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, serial_port.o(i.aci_gatt_srv_read_event))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_read_event_cb
</UL>

<P><STRONG><a name="[ab]"></a>aci_gatt_srv_read_event_cb</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_srv_read_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_read_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[4a1]"></a>aci_gatt_srv_resp</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, aci_gatt.o(i.aci_gatt_srv_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_resp &rArr; GAT_srv_resp &rArr; GAT_att_srv_resp &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event
</UL>

<P><STRONG><a name="[4a2]"></a>aci_gatt_srv_write_event</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, serial_port.o(i.aci_gatt_srv_write_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_write_event &rArr; aci_gatt_srv_resp &rArr; GAT_srv_resp &rArr; GAT_att_srv_resp &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_resp
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event_cb
</UL>

<P><STRONG><a name="[ac]"></a>aci_gatt_srv_write_event_cb</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_srv_write_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_write_event_cb &rArr; aci_gatt_srv_write_event &rArr; aci_gatt_srv_resp &rArr; GAT_srv_resp &rArr; GAT_att_srv_resp &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event_copy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[4a3]"></a>aci_gatt_srv_write_event_copy</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, events.o(i.aci_gatt_srv_write_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event_cb
</UL>

<P><STRONG><a name="[4a4]"></a>aci_gatt_tx_pool_available_event</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, serial_port.o(i.aci_gatt_tx_pool_available_event))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_tx_pool_available_event_cb
</UL>

<P><STRONG><a name="[a9]"></a>aci_gatt_tx_pool_available_event_cb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_tx_pool_available_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_tx_pool_available_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[4a5]"></a>aci_hal_adv_scan_resp_data_update_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_llc.o(i.aci_hal_adv_scan_resp_data_update_event))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_adv_scan_resp_data_update_event_cb
</UL>

<P><STRONG><a name="[75]"></a>aci_hal_adv_scan_resp_data_update_event_cb</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, events_llc.o(i.aci_hal_adv_scan_resp_data_update_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_adv_scan_resp_data_update_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[4af]"></a>aci_hal_end_of_radio_activity_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, serial_port.o(i.aci_hal_end_of_radio_activity_event))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_radio_activity_state_callback_check
</UL>

<P><STRONG><a name="[4a6]"></a>aci_hal_fw_error_event</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_serialport_main.o(i.aci_hal_fw_error_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_hal_fw_error_event
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_terminate
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_cb
</UL>

<P><STRONG><a name="[74]"></a>aci_hal_fw_error_event_cb</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, events_llc.o(i.aci_hal_fw_error_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_hal_fw_error_event_cb &rArr; aci_hal_fw_error_event
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>aci_hal_scan_req_report_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_llc.o(i.aci_hal_scan_req_report_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[576]"></a>aci_hal_scan_req_report_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_llc.o(i.aci_hal_scan_req_report_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[455]"></a>aci_hal_set_tx_power_level</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, aci_hal.o(i.aci_hal_set_tx_power_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = aci_hal_set_tx_power_level &rArr; HAL_Set_TX_Power_Level &rArr; BLEPLAT_SetHighPower &rArr; HAL_SetHighPower
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Set_TX_Power_Level
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_port_DeviceInit
</UL>

<P><STRONG><a name="[454]"></a>aci_hal_write_config_data</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, aci_hal.o(i.aci_hal_write_config_data))
<BR><BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_port_DeviceInit
</UL>

<P><STRONG><a name="[92]"></a>aci_l2cap_cfc_connection_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_cfc_connection_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[577]"></a>aci_l2cap_cfc_connection_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_cfc_connection_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[4a7]"></a>aci_l2cap_command_reject_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_command_reject_event))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_command_reject_event_cb
</UL>

<P><STRONG><a name="[95]"></a>aci_l2cap_command_reject_event_cb</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_command_reject_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_command_reject_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[2f4]"></a>aci_l2cap_command_reject_event_copy</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, events.o(i.aci_l2cap_command_reject_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_process_basic_mode_command
</UL>

<P><STRONG><a name="[4a8]"></a>aci_l2cap_connection_update_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_connection_update_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_req_event_cb
</UL>

<P><STRONG><a name="[91]"></a>aci_l2cap_connection_update_req_event_cb</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_connection_update_req_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[2f3]"></a>aci_l2cap_connection_update_req_event_copy</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, events.o(i.aci_l2cap_connection_update_req_event_copy))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_process_basic_mode_command
</UL>

<P><STRONG><a name="[4a9]"></a>aci_l2cap_connection_update_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_connection_update_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_resp_event_cb
</UL>

<P><STRONG><a name="[8f]"></a>aci_l2cap_connection_update_resp_event_cb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_connection_update_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>aci_l2cap_disconnection_complete_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_disconnection_complete_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[578]"></a>aci_l2cap_disconnection_complete_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_disconnection_complete_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[94]"></a>aci_l2cap_flow_control_credit_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_flow_control_credit_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[579]"></a>aci_l2cap_flow_control_credit_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_flow_control_credit_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[4ab]"></a>aci_l2cap_proc_timeout_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_proc_timeout_event))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_proc_timeout_event_cb
</UL>

<P><STRONG><a name="[90]"></a>aci_l2cap_proc_timeout_event_cb</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_proc_timeout_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_proc_timeout_event_copy
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_proc_timeout_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[4aa]"></a>aci_l2cap_proc_timeout_event_copy</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, events.o(i.aci_l2cap_proc_timeout_event_copy))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_proc_timeout_event_cb
</UL>

<P><STRONG><a name="[97]"></a>aci_l2cap_sdu_data_rx_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_sdu_data_rx_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[57a]"></a>aci_l2cap_sdu_data_rx_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_sdu_data_rx_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[96]"></a>aci_l2cap_sdu_data_tx_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_sdu_data_tx_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[57b]"></a>aci_l2cap_sdu_data_tx_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_sdu_data_tx_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[31a]"></a>ble_HAL_Init</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_hal.o(i.ble_HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_HAL_Init &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_pcl_hal_cntxt_init_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[5e]"></a>channel_Update_Offline_Processing</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, ll_cpf_channel_map_update.o(i.channel_Update_Offline_Processing))
<BR><BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_is_slave
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ch_classification_pending
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_wait_resource_idx
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reclassify_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[1e4]"></a>channel_sel_algo2</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_ext_adv.o(i.channel_sel_algo2))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ext_scan_get_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_vPrepareAdvOrRspLegacyPacket
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
</UL>

<P><STRONG><a name="[314]"></a>char_copy</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, stacklib_utils.o(i.char_copy))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_process_enc_params
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_version_exchange
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_map_update
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_LTK
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_version_exchange_set_cached
</UL>

<P><STRONG><a name="[2d1]"></a>configBitmapSet</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, aci_hal.o(i.configBitmapSet))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
</UL>

<P><STRONG><a name="[29a]"></a>copy_swap_buffer</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, stacklib_utils.o(i.copy_swap_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_generate_hash
</UL>

<P><STRONG><a name="[1a9]"></a>csmem_init</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, mem_alloc.o(i.csmem_init))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[1cc]"></a>csmem_mem_0_assign</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, mem_alloc.o(i.csmem_mem_0_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = csmem_mem_0_assign &rArr; csmem_mem_assign &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator_LL
</UL>

<P><STRONG><a name="[1a7]"></a>csmem_mem_assign</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, mem_alloc.o(i.csmem_mem_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = csmem_mem_assign &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_dynamic_allocator
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator_EVNT
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_ConfigData
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_dynamic_allocator
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_init
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_rejectlist_init
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dynamic_allocator
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator_PM
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_0_assign
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator_LL
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_init
</UL>

<P><STRONG><a name="[242]"></a>cst_sharedCallback</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, stacklib_timers.o(i.cst_sharedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = cst_sharedCallback &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCurrentSysTime
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_TryStartFirstActive
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_timers_callback_wrapper
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_timeout_cb_wrapper
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_timers_callback_wrapper
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_timers_callback_wrapper
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_timers_callback_wrapper
</UL>

<P><STRONG><a name="[390]"></a>cte_csr_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hci_cte.o(i.cte_csr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_buffer_size_value
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_init_cmn_len_upd_params
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_dtm_init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_opcode
</UL>

<P><STRONG><a name="[57c]"></a>cte_csr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci_cte.o(i.cte_csr_ucfg_weak), UNUSED)

<P><STRONG><a name="[2cb]"></a>data_length_extension_csr_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hci_length_update.o(i.data_length_extension_csr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_buffer_size_value
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_receive_data
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_per_init
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_init_data_len_pdu_params
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_init_cmn_len_upd_params
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_opcode
</UL>

<P><STRONG><a name="[57d]"></a>data_length_extension_csr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci_length_update.o(i.data_length_extension_csr_ucfg_weak), UNUSED)

<P><STRONG><a name="[1ef]"></a>ext_adv_scan_enabled_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_ext_adv.o(i.ext_adv_scan_enabled_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_limited_discoverable_event_check
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_buffer_size_value
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_extended_scan_supported
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LimDiscTimeoutcb
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
</UL>

<P><STRONG><a name="[57e]"></a>ext_adv_scan_enabled_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_ext_adv.o(i.ext_adv_scan_enabled_ucfg_weak), UNUSED)

<P><STRONG><a name="[28]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, bluenrg_lp_evb_com.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fputc &rArr; BSP_COM_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[1fd]"></a>gap_extended_scan_supported</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gap_common.o(i.gap_extended_scan_supported))
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_adv_scan_enabled_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_check_adv_status
</UL>

<P><STRONG><a name="[46]"></a>gap_timers_callback</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, gap_common.o(i.gap_timers_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = gap_timers_callback &rArr; GAP_PrivateAddrTimercb &rArr; CST_start &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DiscProcTimeoutcb_ucfg
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LimDiscTimeoutcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_common.o(i.gap_timers_callback_wrapper)
</UL>
<P><STRONG><a name="[2d]"></a>gap_timers_callback_wrapper</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, gap_common.o(i.gap_timers_callback_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = gap_timers_callback_wrapper &rArr; cst_sharedCallback &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cst_sharedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gap_common.o(i.GAP_init_context)
</UL>
<P><STRONG><a name="[393]"></a>get_rf_rx_path_compensation_db</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_routines.o(i.get_rf_rx_path_compensation_db))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr
</UL>

<P><STRONG><a name="[1e8]"></a>hal_radio_activity_state_callback_check</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, aci_hal.o(i.hal_radio_activity_state_callback_check))
<BR><BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_end_of_radio_activity_event
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_radio_activity_state
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_Q
</UL>

<P><STRONG><a name="[1e9]"></a>hal_radio_activity_state_init</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, aci_hal.o(i.hal_radio_activity_state_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_init
</UL>

<P><STRONG><a name="[4ae]"></a>hal_read_radio_activity_state</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, aci_hal.o(i.hal_read_radio_activity_state))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_radio_activity_state_callback_check
</UL>

<P><STRONG><a name="[2d3]"></a>hci_acl_Init</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, hci_acl_data.o(i.hci_acl_Init))
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
</UL>

<P><STRONG><a name="[5b]"></a>hci_acl_Process_Q</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, hci_acl_data.o(i.hci_acl_Process_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = hci_acl_Process_Q &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stacklib_tasks.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>hci_acl_data_ind_event_int_cb</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, acl.o(i.hci_acl_data_ind_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = hci_acl_data_ind_event_int_cb &rArr; L2C_receive_data &rArr; L2C_mux_acl_packet &rArr; SMP_acl_data_hndl &rArr; smp_Keys_Distribution_Complete &rArr; smp_pairing_completed &rArr; smp_add_pairing_record_to_bonding_database &rArr; BleNvm_SEC_AddRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_receive_data
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>hci_acl_data_tx_cmpl_event_int_cb</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, acl.o(i.hci_acl_data_tx_cmpl_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = hci_acl_data_tx_cmpl_event_int_cb &rArr; L2C_mux_acl_packet &rArr; SMP_acl_data_hndl &rArr; smp_Keys_Distribution_Complete &rArr; smp_pairing_completed &rArr; smp_add_pairing_record_to_bonding_database &rArr; BleNvm_SEC_AddRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_mux_acl_packet
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_acl_data_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[4b2]"></a>hci_authenticated_payload_timeout_expired_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_authenticated_payload_timeout_expired_event))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_authenticated_payload_timeout_expired_event_cb
</UL>

<P><STRONG><a name="[72]"></a>hci_authenticated_payload_timeout_expired_event_cb</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, events_hci.o(i.hci_authenticated_payload_timeout_expired_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_authenticated_payload_timeout_expired_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[4b3]"></a>hci_data_buffer_overflow_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_data_buffer_overflow_event))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_data_buffer_overflow_event_cb
</UL>

<P><STRONG><a name="[71]"></a>hci_data_buffer_overflow_event_cb</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, events_hci.o(i.hci_data_buffer_overflow_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_data_buffer_overflow_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[4b4]"></a>hci_disconnection_complete_event</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, serial_port.o(i.hci_disconnection_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = hci_disconnection_complete_event &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event_cb
</UL>

<P><STRONG><a name="[62]"></a>hci_disconnection_complete_event_cb</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, events_hci.o(i.hci_disconnection_complete_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = hci_disconnection_complete_event_cb &rArr; hci_disconnection_complete_event &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>hci_disconnection_complete_event_int_cb</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, events.o(i.hci_disconnection_complete_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = hci_disconnection_complete_event_int_cb &rArr; GAT_att_cmn_disconnection &rArr; GAT_att_srv_disconnection &rArr; GAT_srv_disconnection &rArr; GAT_srv_store_to_nvm &rArr; SDB_write_gatt_client_data &rArr; BleNvm_SEC_RemoveRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_disconnection_complete_evt_hndl
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_hci_disconnection_complete_evt_hndl
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_disconnection
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_hci_disconnection_complete_evt_hndl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[4b6]"></a>hci_encryption_change_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_encryption_change_event))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_cb
</UL>

<P><STRONG><a name="[63]"></a>hci_encryption_change_event_cb</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, events_hci.o(i.hci_encryption_change_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>hci_encryption_change_event_int_cb</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, events.o(i.hci_encryption_change_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = hci_encryption_change_event_int_cb &rArr; SMP_hci_encryption_change_evt_hndl &rArr; SMP_reset_timer &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_encryption_change_evt_hndl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[4b7]"></a>hci_encryption_key_refresh_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_encryption_key_refresh_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_cb
</UL>

<P><STRONG><a name="[64]"></a>hci_encryption_key_refresh_complete_event_cb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, events_hci.o(i.hci_encryption_key_refresh_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>hci_encryption_key_refresh_complete_event_int_cb</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, events.o(i.hci_encryption_key_refresh_complete_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = hci_encryption_key_refresh_complete_event_int_cb &rArr; SMP_hci_encryption_change_evt_hndl &rArr; SMP_reset_timer &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_encryption_change_evt_hndl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[4c3]"></a>hci_get_set_legacy_ext_flag</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, hci_common.o(i.hci_get_set_legacy_ext_flag), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_set_advertising_data_ptr
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_parameters
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_enable
</UL>

<P><STRONG><a name="[1e7]"></a>hci_hardware_error_event</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ble_serialport_main.o(i.hci_hardware_error_event))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_Q
</UL>

<P><STRONG><a name="[66]"></a>hci_le_advertising_report_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_advertising_report_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[57f]"></a>hci_le_advertising_report_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_advertising_report_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[b5]"></a>hci_le_advertising_report_event_int_cb</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, events.o(i.hci_le_advertising_report_event_int_cb))
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_hci_le_advertising_report_evt_hndl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>hci_le_advertising_set_terminated_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_advertising_set_terminated_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[580]"></a>hci_le_advertising_set_terminated_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_advertising_set_terminated_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[bd]"></a>hci_le_advertising_set_terminated_event_int_cb</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, events.o(i.hci_le_advertising_set_terminated_event_int_cb))
<BR><BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_hci_le_advertising_set_terminated_evt_hndl_ucfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[4b9]"></a>hci_le_channel_selection_algorithm_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_channel_selection_algorithm_event))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_channel_selection_algorithm_event_cb
</UL>

<P><STRONG><a name="[7e]"></a>hci_le_channel_selection_algorithm_event_cb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_channel_selection_algorithm_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_channel_selection_algorithm_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[4c4]"></a>hci_le_check_own_address_type_max_value_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hci_ext_advertising.o(i.hci_le_check_own_address_type_max_value_ucfg_weak), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_parameters
</UL>

<P><STRONG><a name="[581]"></a>hci_le_check_own_address_type_max_value_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci_ext_advertising.o(i.hci_le_check_own_address_type_max_value_ucfg_weak), UNUSED)

<P><STRONG><a name="[4ba]"></a>hci_le_connection_complete_event</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, serial_port.o(i.hci_le_connection_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = hci_le_connection_complete_event &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_cb
</UL>

<P><STRONG><a name="[65]"></a>hci_le_connection_complete_event_cb</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_connection_complete_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = hci_le_connection_complete_event_cb &rArr; hci_le_connection_complete_event &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>hci_le_connection_complete_event_int_cb</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, events.o(i.hci_le_connection_complete_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = hci_le_connection_complete_event_int_cb &rArr; GAT_att_cmn_connection &rArr; GAT_att_srv_connection &rArr; GAT_srv_connection &rArr; GAT_srv_is_bonded &rArr; SMP_check_is_device_bonded &rArr; SDB_Find_Record &rArr; BleNvm_SEC_GetRecord &rArr; BleNvm_SEC_Dump &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_connection_complete_evt_hndl
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_hci_le_connection_complete_evt_hndl
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_connection
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_hci_le_connection_complete_evt_hndl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>hci_le_connection_iq_report_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_connection_iq_report_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[582]"></a>hci_le_connection_iq_report_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_connection_iq_report_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[4bb]"></a>hci_le_connection_update_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_connection_update_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_update_complete_event_cb
</UL>

<P><STRONG><a name="[76]"></a>hci_le_connection_update_complete_event_cb</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_connection_update_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_update_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>hci_le_connectionless_iq_report_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_connectionless_iq_report_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[583]"></a>hci_le_connectionless_iq_report_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_connectionless_iq_report_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[81]"></a>hci_le_cte_request_failed_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_cte_request_failed_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[584]"></a>hci_le_cte_request_failed_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_cte_request_failed_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[78]"></a>hci_le_data_length_change_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_data_length_change_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[585]"></a>hci_le_data_length_change_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_data_length_change_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[6b]"></a>hci_le_direct_advertising_report_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_direct_advertising_report_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[586]"></a>hci_le_direct_advertising_report_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_direct_advertising_report_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[ba]"></a>hci_le_direct_advertising_report_event_int_cb</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, events.o(i.hci_le_direct_advertising_report_event_int_cb))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[433]"></a>hci_le_encrypt</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, hci_encryption_pka.o(i.hci_le_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_aes128_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_LP_s1_Generate_STK
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_SR_Compute_c1_Confirm_Value
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_generate_EDIV_recovery_DIV
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_generate_subkeys
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_Calculate_Hash
</UL>

<P><STRONG><a name="[4bc]"></a>hci_le_enhanced_connection_complete_event</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, serial_port.o(i.hci_le_enhanced_connection_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = hci_le_enhanced_connection_complete_event &rArr; hci_le_connection_complete_event &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_cb
</UL>

<P><STRONG><a name="[6a]"></a>hci_le_enhanced_connection_complete_event_cb</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_enhanced_connection_complete_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = hci_le_enhanced_connection_complete_event_cb &rArr; hci_le_enhanced_connection_complete_event &rArr; hci_le_connection_complete_event &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>hci_le_enhanced_connection_complete_event_int_cb</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, events.o(i.hci_le_enhanced_connection_complete_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = hci_le_enhanced_connection_complete_event_int_cb &rArr; GAT_att_cmn_connection &rArr; GAT_att_srv_connection &rArr; GAT_srv_connection &rArr; GAT_srv_is_bonded &rArr; SMP_check_is_device_bonded &rArr; SDB_Find_Record &rArr; BleNvm_SEC_GetRecord &rArr; BleNvm_SEC_Dump &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_enhanced_connection_complete_evt_hndl
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_hci_le_connection_complete_evt_hndl
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_connection
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_hci_le_connection_complete_evt_hndl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>hci_le_extended_advertising_report_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_extended_advertising_report_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[587]"></a>hci_le_extended_advertising_report_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_extended_advertising_report_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[bb]"></a>hci_le_extended_advertising_report_event_int_cb</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, events.o(i.hci_le_extended_advertising_report_event_int_cb))
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_hci_le_advertising_report_evt_hndl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>hci_le_generate_dhkey_complete_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_generate_dhkey_complete_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[588]"></a>hci_le_generate_dhkey_complete_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_generate_dhkey_complete_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[b8]"></a>hci_le_generate_dhkey_complete_event_int_cb</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, events.o(i.hci_le_generate_dhkey_complete_event_int_cb))
<BR><BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_hci_le_generate_dhkey_complete_evt_hndl_ucfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[4be]"></a>hci_le_long_term_key_request_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_long_term_key_request_event))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_event_cb
</UL>

<P><STRONG><a name="[67]"></a>hci_le_long_term_key_request_event_cb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_long_term_key_request_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>hci_le_long_term_key_request_event_int_cb</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, events.o(i.hci_le_long_term_key_request_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = hci_le_long_term_key_request_event_int_cb &rArr; SMP_hci_le_long_term_key_request_evt_hndl &rArr; smp_le_long_term_key_response &rArr; smp_Get_Long_Term_Key &rArr; SDB_Find_Matching_LTK &rArr; BleNvm_SEC_Dump &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_long_term_key_request_evt_hndl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[4bf]"></a>hci_le_long_term_key_request_reply</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, hci_encryption_pka.o(i.hci_le_long_term_key_request_reply))
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_conn_idx
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_LTK
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_le_long_term_key_response
</UL>

<P><STRONG><a name="[4c0]"></a>hci_le_long_term_key_requested_negative_reply</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, hci_encryption_pka.o(i.hci_le_long_term_key_requested_negative_reply))
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_conn_idx
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_LTK
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_le_long_term_key_response
</UL>

<P><STRONG><a name="[83]"></a>hci_le_path_loss_threshold_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_path_loss_threshold_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[589]"></a>hci_le_path_loss_threshold_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_path_loss_threshold_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[7b]"></a>hci_le_periodic_advertising_report_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_periodic_advertising_report_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[58a]"></a>hci_le_periodic_advertising_report_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_periodic_advertising_report_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[7a]"></a>hci_le_periodic_advertising_sync_established_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_periodic_advertising_sync_established_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[58b]"></a>hci_le_periodic_advertising_sync_established_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_periodic_advertising_sync_established_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[7c]"></a>hci_le_periodic_advertising_sync_lost_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_periodic_advertising_sync_lost_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[58c]"></a>hci_le_periodic_advertising_sync_lost_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_periodic_advertising_sync_lost_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[82]"></a>hci_le_periodic_advertising_sync_transfer_received_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_periodic_advertising_sync_transfer_received_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[58d]"></a>hci_le_periodic_advertising_sync_transfer_received_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_periodic_advertising_sync_transfer_received_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[79]"></a>hci_le_phy_update_complete_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_phy_update_complete_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[58e]"></a>hci_le_phy_update_complete_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_phy_update_complete_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[68]"></a>hci_le_read_local_p256_public_key_complete_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_read_local_p256_public_key_complete_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[58f]"></a>hci_le_read_local_p256_public_key_complete_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_read_local_p256_public_key_complete_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[b7]"></a>hci_le_read_local_p256_public_key_complete_event_int_cb</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, events.o(i.hci_le_read_local_p256_public_key_complete_event_int_cb))
<BR><BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[4c2]"></a>hci_le_read_remote_used_features_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_read_remote_used_features_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_remote_used_features_complete_event_cb
</UL>

<P><STRONG><a name="[77]"></a>hci_le_read_remote_used_features_complete_event_cb</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_read_remote_used_features_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_remote_used_features_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>hci_le_scan_request_received_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_scan_request_received_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[590]"></a>hci_le_scan_request_received_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_scan_request_received_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[6d]"></a>hci_le_scan_timeout_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_scan_timeout_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[591]"></a>hci_le_scan_timeout_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_scan_timeout_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[bc]"></a>hci_le_scan_timeout_event_int_cb</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, events.o(i.hci_le_scan_timeout_event_int_cb))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[21e]"></a>hci_le_set_advertising_enable</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, hci_advertising.o(i.hci_le_set_advertising_enable), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_get_set_legacy_ext_flag
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertise_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_legacy_advertising_enable
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_suspend_resume_active_advertising_sets_ucfg_weak
</UL>

<P><STRONG><a name="[21c]"></a>hci_le_set_advertising_parameters</STRONG> (Thumb, 162 bytes, Stack size unknown bytes, hci_advertising.o(i.hci_le_set_advertising_parameters), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_check_own_address_type_max_value_ucfg
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_get_set_legacy_ext_flag
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_legacy_advertising_configuration
</UL>

<P><STRONG><a name="[1f1]"></a>hci_le_set_event_mask</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, hci_common.o(i.hci_le_set_event_mask))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[219]"></a>hci_le_set_random_address</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, hci_common.o(i.hci_le_set_random_address), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Advertising_Set_Random_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_controller_random_address_ucfg_weak
</UL>

<P><STRONG><a name="[84]"></a>hci_le_transmit_power_reporting_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_transmit_power_reporting_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[592]"></a>hci_le_transmit_power_reporting_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_transmit_power_reporting_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[4c6]"></a>hci_number_of_completed_packets_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_number_of_completed_packets_event))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_of_completed_packets_event_cb
</UL>

<P><STRONG><a name="[70]"></a>hci_number_of_completed_packets_event_cb</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, events_hci.o(i.hci_number_of_completed_packets_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_of_completed_packets_event_copy
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_of_completed_packets_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[4c5]"></a>hci_number_of_completed_packets_event_copy</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, events.o(i.hci_number_of_completed_packets_event_copy))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_of_completed_packets_event_cb
</UL>

<P><STRONG><a name="[4c8]"></a>hci_read_remote_version_information_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_read_remote_version_information_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_remote_version_information_complete_event_cb
</UL>

<P><STRONG><a name="[6f]"></a>hci_read_remote_version_information_complete_event_cb</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, events_hci.o(i.hci_read_remote_version_information_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_remote_version_information_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[4c9]"></a>hci_read_remote_version_information_complete_event_copy</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, events.o(i.hci_read_remote_version_information_complete_event_copy))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_remote_version_information_complete_event_push
</UL>

<P><STRONG><a name="[4b0]"></a>hci_rx_acl_data</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, hci_acl_data.o(i.hci_rx_acl_data))
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_ind_event_int_cb
</UL>

<P><STRONG><a name="[4cb]"></a>hci_rx_acl_data_event</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, events_hci.o(i.hci_rx_acl_data_event))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data_event_cb
</UL>

<P><STRONG><a name="[85]"></a>hci_rx_acl_data_event_cb</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, events_hci.o(i.hci_rx_acl_data_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[4cc]"></a>hci_rx_acl_data_event_copy</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, events.o(i.hci_rx_acl_data_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data_event_push
</UL>

<P><STRONG><a name="[1f2]"></a>hci_set_event_mask</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, hci_common.o(i.hci_set_event_mask))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[4b1]"></a>hci_tx_acl_data_done</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, hci_acl_data.o(i.hci_tx_acl_data_done))
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_of_completed_packets_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_tx_cmpl_event_int_cb
</UL>

<P><STRONG><a name="[2d6]"></a>is_Buffer_All_Set_To</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, stacklib_utils.o(i.is_Buffer_All_Set_To))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
</UL>

<P><STRONG><a name="[3ad]"></a>isr_Acl_Data_Indication_Queue_Full</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, acl.o(i.isr_Acl_Data_Indication_Queue_Full))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_receive_data
</UL>

<P><STRONG><a name="[3a4]"></a>isr_Acl_Data_TX_Cmpl_Queue_Full</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, acl.o(i.isr_Acl_Data_TX_Cmpl_Queue_Full))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[46f]"></a>l2c_cos_csr_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, l2c_cos_common.o(i.l2c_cos_csr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_buffer_size_value
</UL>

<P><STRONG><a name="[593]"></a>l2c_cos_csr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, l2c_cos_common.o(i.l2c_cos_csr_ucfg_weak), UNUSED)

<P><STRONG><a name="[47]"></a>l2cap_timers_callback</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, l2cap.o(i.l2cap_timers_callback))
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_timeout_handler_signalling
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cap.o(i.l2cap_timers_callback_wrapper)
</UL>
<P><STRONG><a name="[35]"></a>l2cap_timers_callback_wrapper</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, l2cap.o(i.l2cap_timers_callback_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = l2cap_timers_callback_wrapper &rArr; cst_sharedCallback &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cst_sharedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cap.o(i.L2C_Init)
</UL>
<P><STRONG><a name="[39f]"></a>ll_cpe_get_cpid_from_opcode</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_get_cpid_from_opcode))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_rxctrlpdu_checkreject
</UL>

<P><STRONG><a name="[3c9]"></a>ll_cpe_set_unknown_rsp_pending</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_set_unknown_rsp_pending))
<BR><BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_data_p
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_ctrl_flds_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[4dc]"></a>ll_set_advertising_data_ptr</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, ll_ext_adv.o(i.ll_set_advertising_data_ptr), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ext_scan_get_cntxt_p
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_get_set_legacy_ext_flag
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_max_supported_data_check_ucfg
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_switchdata_data_struc
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_initializedata_data_struc
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Context_Test_Advertising_Handle
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_adv_scan_resp_data_update_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_set_legacy_advertising_data_ptr
</UL>

<P><STRONG><a name="[21d]"></a>ll_set_legacy_advertising_data_ptr</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, ll_ext_adv.o(i.ll_set_legacy_advertising_data_ptr), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ext_scan_get_cntxt_p
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_set_advertising_data_ptr
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Context_Test_Advertising_Handle
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters_Default
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Context_ReturnFree
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_legacy_advertising_data
</UL>

<P><STRONG><a name="[2ce]"></a>ll_write_supported_data_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_routines.o(i.ll_write_supported_data_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
</UL>

<P><STRONG><a name="[594]"></a>ll_write_supported_data_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_routines.o(i.ll_write_supported_data_ucfg_weak), UNUSED)

<P><STRONG><a name="[48]"></a>llc_timers_callback</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, ll_routines.o(i.llc_timers_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = llc_timers_callback &rArr; LLC_authenticated_payload_timeout_cb &rArr; CST_start &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_routines.o(i.llc_timers_callback_wrapper)
</UL>
<P><STRONG><a name="[36]"></a>llc_timers_callback_wrapper</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_routines.o(i.llc_timers_callback_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = llc_timers_callback_wrapper &rArr; cst_sharedCallback &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cst_sharedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_routines.o(i.LL_Init)
</UL>
<P><STRONG><a name="[d8]"></a>main</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ble_serialport_main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2552 + Unknown Stack Size
<LI>Call Chain = main &rArr; ModulesTick &rArr; NVMDB_Tick &rArr; NVMDB_CleanDB &rArr; CleanLargeDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_Init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_port_DeviceInit
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_Jump_To_Service_Manager_Application
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KENDOL2_main
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KENDOL2_HAL_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Tick
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulesTick
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModulesInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[470]"></a>master_csr_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hci_scan_connect.o(i.master_csr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_buffer_size_value
</UL>

<P><STRONG><a name="[595]"></a>master_csr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci_scan_connect.o(i.master_csr_ucfg_weak), UNUSED)

<P><STRONG><a name="[3e9]"></a>pcl_csr_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hci_pcl.o(i.pcl_csr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_buffer_size_value
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_opcode
</UL>

<P><STRONG><a name="[596]"></a>pcl_csr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci_pcl.o(i.pcl_csr_ucfg_weak), UNUSED)

<P><STRONG><a name="[1f0]"></a>periodic_csr_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ll_periodicadv.o(i.periodic_csr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_buffer_size_value
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_per_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_opcode
</UL>

<P><STRONG><a name="[597]"></a>periodic_csr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_periodicadv.o(i.periodic_csr_ucfg_weak), UNUSED)

<P><STRONG><a name="[10c]"></a>phy_map</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, ll_routines.o(i.phy_map))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_createslot
</UL>

<P><STRONG><a name="[35f]"></a>phy_upd_csr_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hci_phy_update.o(i.phy_upd_csr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_buffer_size_value
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_phy_upd_cntx_per_p
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_init_cmn_len_upd_params
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_opcode
</UL>

<P><STRONG><a name="[598]"></a>phy_upd_csr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci_phy_update.o(i.phy_upd_csr_ucfg_weak), UNUSED)

<P><STRONG><a name="[471]"></a>secure_connections_csr_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, smp_scv42_sap.o(i.secure_connections_csr_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_buffer_size_value
</UL>

<P><STRONG><a name="[599]"></a>secure_connections_csr_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, smp_scv42_sap.o(i.secure_connections_csr_ucfg_weak), UNUSED)

<P><STRONG><a name="[45e]"></a>setInterruptPriority</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, system_bluenrg_lp.o(i.setInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4a]"></a>sm_timers_callback</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, smp_common.o(i.sm_timers_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = sm_timers_callback &rArr; smp_cmn_repeated_attacks_timer_cb &rArr; smp_cmn_rejectlist_start_probation_timer2 &rArr; SMP_reset_timer &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Protocol_Timer_cb
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_repeated_attacks_timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smp_common.o(i.sm_timers_callback_wrapper)
</UL>
<P><STRONG><a name="[45]"></a>sm_timers_callback_wrapper</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, smp_common.o(i.sm_timers_callback_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = sm_timers_callback_wrapper &rArr; cst_sharedCallback &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cst_sharedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smp_common.o(i.SMP_Init)
</UL>
<P><STRONG><a name="[450]"></a>sma_CMAC_generate_tag</STRONG> (Thumb, 198 bytes, Stack size unknown bytes, smp_algo_sap.o(i.sma_CMAC_generate_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = sma_CMAC_generate_tag &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_generate_subkeys
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_validate_signed_packet
</UL>

<P><STRONG><a name="[4e5]"></a>smp_Execute_Actions_wrt_Current_State_MI_excerpt_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Execute_Actions_wrt_Current_State_MI_excerpt_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[59a]"></a>smp_Execute_Actions_wrt_Current_State_MI_excerpt_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Execute_Actions_wrt_Current_State_MI_excerpt_ucfg_weak), UNUSED)

<P><STRONG><a name="[4ee]"></a>smp_MI_Start_Encryption_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, securitymgr.o(i.smp_MI_Start_Encryption_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Complete
</UL>

<P><STRONG><a name="[59b]"></a>smp_MI_Start_Encryption_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, securitymgr.o(i.smp_MI_Start_Encryption_ucfg_weak), UNUSED)

<P><STRONG><a name="[4f6]"></a>smp_Process_Rx_Packet_Exception_Cases_sc_excerpt_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Process_Rx_Packet_Exception_Cases_sc_excerpt_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[59c]"></a>smp_Process_Rx_Packet_Exception_Cases_sc_excerpt_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Process_Rx_Packet_Exception_Cases_sc_excerpt_ucfg_weak), UNUSED)

<P><STRONG><a name="[4f7]"></a>smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[59d]"></a>smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt_ucfg_weak), UNUSED)

<P><STRONG><a name="[4f3]"></a>smp_Process_Rx_Packet_wrt_Current_State_sc_excerpt_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Process_Rx_Packet_wrt_Current_State_sc_excerpt_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[59e]"></a>smp_Process_Rx_Packet_wrt_Current_State_sc_excerpt_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Process_Rx_Packet_wrt_Current_State_sc_excerpt_ucfg_weak), UNUSED)

<P><STRONG><a name="[4fe]"></a>smp_add_pairing_record_to_bonding_database</STRONG> (Thumb, 292 bytes, Stack size unknown bytes, smp_common.o(i.smp_add_pairing_record_to_bonding_database))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = smp_add_pairing_record_to_bonding_database &rArr; BleNvm_SEC_AddRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_AddRecord
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
</UL>

<P><STRONG><a name="[43e]"></a>smp_cmn_is_peer_rejectlisted</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, smp_cmn_rejectlist.o(i.smp_cmn_is_peer_rejectlisted))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_cmn_is_peer_rejectlisted &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_connection_complete_handler
</UL>

<P><STRONG><a name="[505]"></a>smp_cmn_notify_rejectlist_penalty_timer_expiration</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, smp_common.o(i.smp_cmn_notify_rejectlist_penalty_timer_expiration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_cmn_notify_rejectlist_penalty_timer_expiration &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_repeated_attacks_timer_cb
</UL>

<P><STRONG><a name="[4f5]"></a>smp_cmn_pairing_phase_3_keys_receiving</STRONG> (Thumb, 272 bytes, Stack size unknown bytes, smp_common.o(i.smp_cmn_pairing_phase_3_keys_receiving))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = smp_cmn_pairing_phase_3_keys_receiving &rArr; smp_pairing_completed &rArr; smp_add_pairing_record_to_bonding_database &rArr; BleNvm_SEC_AddRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_send
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_keys_distribution_start
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Pckt_Cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[506]"></a>smp_cmn_rejectlist_init</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, smp_cmn_rejectlist.o(i.smp_cmn_rejectlist_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_cmn_rejectlist_init &rArr; csmem_mem_assign &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_dynamic_allocator
</UL>

<P><STRONG><a name="[507]"></a>smp_cmn_rejectlist_start_probation_timer2</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, smp_cmn_rejectlist.o(i.smp_cmn_rejectlist_start_probation_timer2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = smp_cmn_rejectlist_start_probation_timer2 &rArr; SMP_reset_timer &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_reset_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_repeated_attacks_timer_cb
</UL>

<P><STRONG><a name="[508]"></a>smp_cmn_repeated_attacks_protection_start</STRONG> (Thumb, 212 bytes, Stack size unknown bytes, smp_cmn_rejectlist.o(i.smp_cmn_repeated_attacks_protection_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = smp_cmn_repeated_attacks_protection_start &rArr; SMP_reset_timer &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_reset_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_process_abort
</UL>

<P><STRONG><a name="[4e1]"></a>smp_cmn_repeated_attacks_timer_cb</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, smp_cmn_rejectlist.o(i.smp_cmn_repeated_attacks_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = smp_cmn_repeated_attacks_timer_cb &rArr; smp_cmn_rejectlist_start_probation_timer2 &rArr; SMP_reset_timer &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_notify_rejectlist_penalty_timer_expiration
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_rejectlist_start_probation_timer2
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_timers_callback
</UL>

<P><STRONG><a name="[4ea]"></a>smp_execute_actions_wrt_state_sc_phase1to2_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, securitymgr.o(i.smp_execute_actions_wrt_state_sc_phase1to2_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[59f]"></a>smp_execute_actions_wrt_state_sc_phase1to2_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, securitymgr.o(i.smp_execute_actions_wrt_state_sc_phase1to2_ucfg_weak), UNUSED)

<P><STRONG><a name="[4e6]"></a>smp_execute_actions_wrt_state_sc_phase2as2_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, securitymgr.o(i.smp_execute_actions_wrt_state_sc_phase2as2_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[5a0]"></a>smp_execute_actions_wrt_state_sc_phase2as2_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, securitymgr.o(i.smp_execute_actions_wrt_state_sc_phase2as2_ucfg_weak), UNUSED)

<P><STRONG><a name="[440]"></a>smp_find_remote_device_index</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, smp_common.o(i.smp_find_remote_device_index))
<BR><BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_encryption_change_evt_hndl
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_disconnection_complete_evt_hndl
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_process_abort
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_le_long_term_key_response
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State_SR_excerpt
</UL>

<P><STRONG><a name="[44f]"></a>smp_get_CSRK</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, smp_common.o(i.smp_get_CSRK))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_validate_signed_packet
</UL>

<P><STRONG><a name="[4ef]"></a>smp_get_local_identity_address</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, smp_common.o(i.smp_get_local_identity_address))
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_static_random_address
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_public_address
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
</UL>

<P><STRONG><a name="[4ec]"></a>smp_keys_distribution_start</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, smp_common.o(i.smp_keys_distribution_start))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_pairing_phase_3_keys_receiving
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[448]"></a>smp_le_long_term_key_response</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, securitymgr.o(i.smp_le_long_term_key_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = smp_le_long_term_key_response &rArr; smp_Get_Long_Term_Key &rArr; SDB_Find_Matching_LTK &rArr; BleNvm_SEC_Dump &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_find_remote_device_index
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_requested_negative_reply
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_reply
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_reset_timer
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Long_Term_Key
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_long_term_key_request_evt_hndl
</UL>

<P><STRONG><a name="[502]"></a>smp_oob_check_is_remote_data_present</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, smp_common.o(i.smp_oob_check_is_remote_data_present))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_oob_check_is_remote_data_present &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
</UL>

<P><STRONG><a name="[509]"></a>smp_pairing_2octets_packet_send</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, smp_common.o(i.smp_pairing_2octets_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = smp_pairing_2octets_packet_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_send
</UL>

<P><STRONG><a name="[4e9]"></a>smp_pairing_completed</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, smp_common.o(i.smp_pairing_completed))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = smp_pairing_completed &rArr; smp_add_pairing_record_to_bonding_database &rArr; BleNvm_SEC_AddRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_update_statistics_on_pairing_complete
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_process_abort
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_find_remote_device_index
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_add_pairing_record_to_bonding_database
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_reset_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Complete
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_pairing_phase_3_keys_receiving
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[44a]"></a>smp_pairing_failed_receive</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, smp_common.o(i.smp_pairing_failed_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = smp_pairing_failed_receive &rArr; smp_pairing_process_abort &rArr; smp_cmn_repeated_attacks_protection_start &rArr; SMP_reset_timer &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_process_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_process_pending_rx_packets_tsk
</UL>

<P><STRONG><a name="[449]"></a>smp_pairing_failed_send</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, smp_common.o(i.smp_pairing_failed_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = smp_pairing_failed_send &rArr; smp_pairing_2octets_packet_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_2octets_packet_send
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_process_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_pairing_phase_3_keys_receiving
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_process_pending_rx_packets_tsk
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State_SR_excerpt
</UL>

<P><STRONG><a name="[4fc]"></a>smp_sc_SR_PairingConfirm_Receive_sc_excerpt_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, securitymgr.o(i.smp_sc_SR_PairingConfirm_Receive_sc_excerpt_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
</UL>

<P><STRONG><a name="[5a1]"></a>smp_sc_SR_PairingConfirm_Receive_sc_excerpt_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, securitymgr.o(i.smp_sc_SR_PairingConfirm_Receive_sc_excerpt_ucfg_weak), UNUSED)

<P><STRONG><a name="[4fd]"></a>smp_sc_SR_PairingRandom_Receive_sc_excerpt_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, securitymgr.o(i.smp_sc_SR_PairingRandom_Receive_sc_excerpt_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
</UL>

<P><STRONG><a name="[5a2]"></a>smp_sc_SR_PairingRandom_Receive_sc_excerpt_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, securitymgr.o(i.smp_sc_SR_PairingRandom_Receive_sc_excerpt_ucfg_weak), UNUSED)

<P><STRONG><a name="[4eb]"></a>smp_sc_SR_Pairing_Phase_2AS1_Start_sc_excerpt_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, securitymgr.o(i.smp_sc_SR_Pairing_Phase_2AS1_Start_sc_excerpt_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[5a3]"></a>smp_sc_SR_Pairing_Phase_2AS1_Start_sc_excerpt_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, securitymgr.o(i.smp_sc_SR_Pairing_Phase_2AS1_Start_sc_excerpt_ucfg_weak), UNUSED)

<P><STRONG><a name="[501]"></a>smp_sc_continue_on_exclusive_sc_pairing_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, smp_scv42_caf.o(i.smp_sc_continue_on_exclusive_sc_pairing_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
</UL>

<P><STRONG><a name="[5a4]"></a>smp_sc_continue_on_exclusive_sc_pairing_ucfg_weak</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, smp_scv42_caf.o(i.smp_sc_continue_on_exclusive_sc_pairing_ucfg_weak), UNUSED)

<P><STRONG><a name="[4bd]"></a>smp_sc_hci_le_generate_dhkey_complete_evt_hndl_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, smp_scv42_sap.o(i.smp_sc_hci_le_generate_dhkey_complete_evt_hndl_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_complete_event_int_cb
</UL>

<P><STRONG><a name="[5a5]"></a>smp_sc_hci_le_generate_dhkey_complete_evt_hndl_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, smp_scv42_sap.o(i.smp_sc_hci_le_generate_dhkey_complete_evt_hndl_ucfg_weak), UNUSED)

<P><STRONG><a name="[4c1]"></a>smp_sc_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, smp_scv42_sap.o(i.smp_sc_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_complete_event_int_cb
</UL>

<P><STRONG><a name="[5a6]"></a>smp_sc_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, smp_scv42_sap.o(i.smp_sc_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg_weak), UNUSED)

<P><STRONG><a name="[438]"></a>smp_sc_init_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, smp_scv42_caf.o(i.smp_sc_init_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_sc_force_debug_key_usage
</UL>

<P><STRONG><a name="[5a7]"></a>smp_sc_init_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, smp_scv42_caf.o(i.smp_sc_init_ucfg_weak), UNUSED)

<P><STRONG><a name="[44e]"></a>smp_sc_is_another_sc_pairing_ongoing</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, smp_scv42_caf.o(i.smp_sc_is_another_sc_pairing_ongoing))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_sc_force_debug_key_usage
</UL>

<P><STRONG><a name="[50b]"></a>smp_sc_update_statistics_on_pairing_complete_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, smp_scv42_caf.o(i.smp_sc_update_statistics_on_pairing_complete_ucfg_weak))
<BR><BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_update_statistics_on_pairing_complete
</UL>

<P><STRONG><a name="[5a8]"></a>smp_sc_update_statistics_on_pairing_complete_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, smp_scv42_caf.o(i.smp_sc_update_statistics_on_pairing_complete_ucfg_weak), UNUSED)

<P><STRONG><a name="[4f0]"></a>smp_send_packet</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, securitymgr.o(i.smp_send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = smp_send_packet &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_send_frame
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_find_remote_device_index
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_reset_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
</UL>

<P><STRONG><a name="[1aa]"></a>tsk_init</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, stacklib_tasks.o(i.tsk_init))
<BR><BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_bitmap_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[178]"></a>tsk_notify_idx</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, stacklib_tasks.o(i.tsk_notify_idx))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_encryption_change_evt_hndl
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_disconnection_complete_evt_hndl
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_Q
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_service
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_characteristic
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_service
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_characteristic
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_char_descriptor
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_disconnect
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_init_le_ping_params
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_tx_ctrl_pdu_state
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_isr_active
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_acl_data_hndl
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_hvtx
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_send_srv_change_tsk
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_hash_tsk
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_from_nvm
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_tx_pool_evt_tsk
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_timer_expire_tsk
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_timeout_cb
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_send
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_name_disc_proc_connected_check
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_notify_rejectlist_penalty_timer_expiration
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_connection_complete_handler
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_keys_distribution_start
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_process_pending_rx_packets_tsk
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_prepare_tx_pdu
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_update_le_ping_params
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4rsp
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_rcv_corrupted
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_disconnection
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_Process_Q
</UL>

<P><STRONG><a name="[17a]"></a>tsk_scheduler</STRONG> (Thumb, 110 bytes, Stack size unknown bytes, stacklib_tasks.o(i.tsk_scheduler))
<BR><BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_bitmap_merge
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsbit
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Tick
</UL>

<P><STRONG><a name="[396]"></a>tsk_signal_resource_idx</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, stacklib_tasks.o(i.tsk_signal_resource_idx))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_resize
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_release
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_init
</UL>

<P><STRONG><a name="[245]"></a>tsk_wait_resource_idx</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, stacklib_tasks.o(i.tsk_wait_resource_idx))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_tx_pool_evt_tsk
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_start_le_ping
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_Update_Offline_Processing
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_offline_control_procedures_processing
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_processing
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[193]"></a>LL_AHB_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bluenrg_lp_evb_button.o(i.LL_AHB_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>

<P><STRONG><a name="[196]"></a>LL_EXTI_SetTrigger</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, bluenrg_lp_evb_button.o(i.LL_EXTI_SetTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>

<P><STRONG><a name="[191]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bluenrg_lp_evb_button.o(i.LL_GPIO_IsInputPinSet))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
</UL>

<P><STRONG><a name="[194]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bluenrg_lp_evb_button.o(i.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>

<P><STRONG><a name="[195]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, bluenrg_lp_evb_button.o(i.LL_GPIO_SetPinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>

<P><STRONG><a name="[198]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bluenrg_lp_evb_button.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>

<P><STRONG><a name="[197]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, bluenrg_lp_evb_button.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>

<P><STRONG><a name="[17e]"></a>LL_AHB_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bluenrg_lp_evb_com.o(i.LL_AHB_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
</UL>

<P><STRONG><a name="[183]"></a>LL_GPIO_SetAFPin_8_15</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bluenrg_lp_evb_com.o(i.LL_GPIO_SetAFPin_8_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetAFPin_8_15
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
</UL>

<P><STRONG><a name="[17f]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bluenrg_lp_evb_com.o(i.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
</UL>

<P><STRONG><a name="[181]"></a>LL_GPIO_SetPinOutputType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bluenrg_lp_evb_com.o(i.LL_GPIO_SetPinOutputType))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
</UL>

<P><STRONG><a name="[182]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, bluenrg_lp_evb_com.o(i.LL_GPIO_SetPinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
</UL>

<P><STRONG><a name="[180]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bluenrg_lp_evb_com.o(i.LL_GPIO_SetPinSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetPinSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
</UL>

<P><STRONG><a name="[186]"></a>LL_PWR_EnablePDA</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bluenrg_lp_evb_io.o(i.LL_PWR_EnablePDA))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_Init
</UL>

<P><STRONG><a name="[188]"></a>LL_PWR_EnablePDB</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bluenrg_lp_evb_io.o(i.LL_PWR_EnablePDB))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_Init
</UL>

<P><STRONG><a name="[187]"></a>LL_PWR_EnablePUA</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bluenrg_lp_evb_io.o(i.LL_PWR_EnablePUA))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_Init
</UL>

<P><STRONG><a name="[189]"></a>LL_PWR_EnablePUB</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bluenrg_lp_evb_io.o(i.LL_PWR_EnablePUB))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IO_Init
</UL>

<P><STRONG><a name="[18b]"></a>LL_AHB_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bluenrg_lp_evb_led.o(i.LL_AHB_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[18c]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bluenrg_lp_evb_led.o(i.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[18e]"></a>LL_GPIO_SetPinOutputType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bluenrg_lp_evb_led.o(i.LL_GPIO_SetPinOutputType))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[18f]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, bluenrg_lp_evb_led.o(i.LL_GPIO_SetPinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[18d]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bluenrg_lp_evb_led.o(i.LL_GPIO_SetPinSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetPinSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[410]"></a>LL_RCC_SetRC64MPLLPrescaler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.LL_RCC_SetRC64MPLLPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MrBleBiasTrimConfig
</UL>

<P><STRONG><a name="[411]"></a>LL_RCC_SetRFClockSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.LL_RCC_SetRFClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioClockConfig
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MrBleBiasTrimConfig
</UL>

<P><STRONG><a name="[3fd]"></a>LSConfig</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, system_bluenrg_lp.o(i.LSConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LSConfig &rArr; SystemTimer_TimeoutConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutExpired
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[45a]"></a>SmpsTrimConfig</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, system_bluenrg_lp.o(i.SmpsTrimConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SmpsTrimConfig &rArr; SystemTimer_TimeoutConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutExpired
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4e0]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInterruptPriority
</UL>

<P><STRONG><a name="[2bc]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rf_driver_hal_vtimer.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_Init
</UL>

<P><STRONG><a name="[2c4]"></a>_check_radio_activity</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, rf_driver_hal_vtimer.o(i._check_radio_activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SetRadioTimerValue
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCurrentSysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_WakeUpCallback
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_Tick
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_SetRadioTimerValue
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_user_timeout
</UL>

<P><STRONG><a name="[2c0]"></a>_start_timer</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rf_driver_hal_vtimer.o(i._start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _start_timer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_user_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_Tick
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_StartTimerSysTime
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_Init
</UL>

<P><STRONG><a name="[2c1]"></a>_update_user_timeout</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, rf_driver_hal_vtimer.o(i._update_user_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SetRadioHostWakeupTime
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCurrentSysTime
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_radio_activity
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_Tick
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_StopTimer
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_RadioTimerIsr
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_start_timer
</UL>

<P><STRONG><a name="[2c3]"></a>_virtualTimeBaseEnable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rf_driver_hal_vtimer.o(i._virtualTimeBaseEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_StopTimer
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_StartTimerSysTime
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_SetRadioTimerValue
</UL>

<P><STRONG><a name="[34]"></a>calibration_callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rf_driver_hal_vtimer.o(i.calibration_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = calibration_callback &rArr; TIMER_StartCalibration
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_StartCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_Tick
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_virtualTimeBaseEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf_driver_hal_vtimer.o(i.HAL_VTIMER_Init)
</UL>
<P><STRONG><a name="[310]"></a>LL_FLASH_GetFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rf_driver_ll_flash.o(i.LL_FLASH_GetFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_Program
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_Erase
</UL>

<P><STRONG><a name="[469]"></a>_get_calibration_data</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, rf_driver_ll_timer.o(i._get_calibration_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_calibration_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_UpdateCalibrationData
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_calibrate
</UL>

<P><STRONG><a name="[461]"></a>_timer_calibrate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rf_driver_ll_timer.o(i._timer_calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _timer_calibrate &rArr; _get_calibration_data
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_start_calibration
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_calibration_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>

<P><STRONG><a name="[468]"></a>_timer_start_calibration</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rf_driver_ll_timer.o(i._timer_start_calibration))
<BR><BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_StartCalibration
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_calibrate
</UL>

<P><STRONG><a name="[462]"></a>_update_xtal_startup_time</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rf_driver_ll_timer.o(i._update_xtal_startup_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _update_xtal_startup_time
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_UpdateCalibrationData
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>

<P><STRONG><a name="[460]"></a>get_system_time_and_machine</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rf_driver_ll_timer.o(i.get_system_time_and_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SetRadioTimerValue
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCurrentSysTime
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetPastSysTime
</UL>

<P><STRONG><a name="[463]"></a>update_cal_delay</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rf_driver_ll_timer.o(i.update_cal_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = update_cal_delay &rArr; us_to_machinetime
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_to_machinetime
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_UpdateCalibrationData
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>

<P><STRONG><a name="[46a]"></a>update_system_time</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rf_driver_ll_timer.o(i.update_system_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_system_time
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_UpdateCalibrationData
</UL>

<P><STRONG><a name="[50f]"></a>us_to_machinetime</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rf_driver_ll_timer.o(i.us_to_machinetime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = us_to_machinetime
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_to_systime
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cal_delay
</UL>

<P><STRONG><a name="[464]"></a>us_to_systime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rf_driver_ll_timer.o(i.us_to_systime))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_to_machinetime
</UL>

<P><STRONG><a name="[143]"></a>LL_RADIO_SetAdvertise</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.LL_RADIO_SetAdvertise), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetAdvPduFormat
</UL>

<P><STRONG><a name="[14a]"></a>LL_RADIO_SetAllTableDataReady</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.LL_RADIO_SetAllTableDataReady))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetTxReady
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetRxReady
</UL>

<P><STRONG><a name="[145]"></a>LL_RADIO_SetCRCInitializationSelector</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.LL_RADIO_SetCRCInitializationSelector))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetCrcinitSel
</UL>

<P><STRONG><a name="[147]"></a>LL_RADIO_SetNextTxMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.LL_RADIO_SetNextTxMode))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetNextTxMode
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetNextRxMode
</UL>

<P><STRONG><a name="[150]"></a>LL_RADIO_SetPacketCounterRx_39_24</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.LL_RADIO_SetPacketCounterRx_39_24))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetRxCountDirectionBit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetRxCount
</UL>

<P><STRONG><a name="[153]"></a>LL_RADIO_SetPacketCounterTx_39_32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.LL_RADIO_SetPacketCounterTx_39_32))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetTxCountDirectionBit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetTxCount
</UL>

<P><STRONG><a name="[cd]"></a>mul32</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, blue_unit_conversion.o(. text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
</UL>

<P><STRONG><a name="[2b3]"></a>LL_GetRAMSize</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_miscutil.o(i.LL_GetRAMSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GetRAMSize
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetPartInfo
</UL>

<P><STRONG><a name="[2b5]"></a>LL_PWR_SetSMPSOutputLevel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_miscutil.o(i.LL_PWR_SetSMPSOutputLevel))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetHighPower
</UL>

<P><STRONG><a name="[2b4]"></a>LL_PWR_SetSMPSPrechargeMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_miscutil.o(i.LL_PWR_SetSMPSPrechargeMode))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetHighPower
</UL>

<P><STRONG><a name="[1b8]"></a>CacheFindOperation</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, nvm_db.o(i.CacheFindOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_CompareCurrentRecord
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_AppendRecord
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveCacheOp
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecordInCache
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentRecordNoLock
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextRecordNoLock
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanPage
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLargeDB
</UL>

<P><STRONG><a name="[1bb]"></a>CacheGetDataSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nvm_db.o(i.CacheGetDataSize))
<BR><BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveCacheOp
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheRequestBuffer
</UL>

<P><STRONG><a name="[1b9]"></a>CacheInsertData</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nvm_db.o(i.CacheInsertData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CacheInsertData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Erase
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_DeleteRecord
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleWriteOperation
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulePageEraseOperation
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLargeDB
</UL>

<P><STRONG><a name="[1ba]"></a>CacheRequestBuffer</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nvm_db.o(i.CacheRequestBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CacheRequestBuffer &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheGetDataSize
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Erase
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_DeleteRecord
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleWriteOperation
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulePageEraseOperation
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLargeDB
</UL>

<P><STRONG><a name="[1bf]"></a>CalculateFlashTimeOperation</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nvm_db.o(i.CalculateFlashTimeOperation))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecord
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRecord
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseWithTimeCheck
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSmallDB
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinueCleanLargeDB
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanPage
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLargeDB
</UL>

<P><STRONG><a name="[1bc]"></a>CleanLargeDB</STRONG> (Thumb, 370 bytes, Stack size 2168 bytes, nvm_db.o(i.CleanLargeDB))
<BR><BR>[Stack]<UL><LI>Max Depth = 2456 + Unknown Stack Size
<LI>Call Chain = CleanLargeDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_TimeCheck
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_HandleInit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBufferToFlash
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulePageEraseOperation
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_get_info
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDBToRAM
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitReadState
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseWithTimeCheck
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateFlashTimeOperation
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheRequestBuffer
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheInsertData
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheFindOperation
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_CleanDB
</UL>

<P><STRONG><a name="[1c5]"></a>CleanPage</STRONG> (Thumb, 264 bytes, Stack size 2104 bytes, nvm_db.o(i.CleanPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 2392 + Unknown Stack Size
<LI>Call Chain = CleanPage &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_TimeCheck
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_HandleInit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBufferToFlash
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_get_info
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDBToRAM
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitReadState
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateFlashTimeOperation
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheFindOperation
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_CleanDB
</UL>

<P><STRONG><a name="[1c8]"></a>ContinueCleanLargeDB</STRONG> (Thumb, 214 bytes, Stack size 2112 bytes, nvm_db.o(i.ContinueCleanLargeDB))
<BR><BR>[Stack]<UL><LI>Max Depth = 2400 + Unknown Stack Size
<LI>Call Chain = ContinueCleanLargeDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_TimeCheck
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBufferToFlash
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulePageEraseOperation
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_get_info
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDBToRAM
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseWithTimeCheck
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateFlashTimeOperation
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Tick
</UL>

<P><STRONG><a name="[1e5]"></a>EraseSmallDB</STRONG> (Thumb, 158 bytes, Stack size 2112 bytes, nvm_db.o(i.EraseSmallDB))
<BR><BR>[Stack]<UL><LI>Max Depth = 2400 + Unknown Stack Size
<LI>Call Chain = EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_TimeCheck
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_HandleInit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBufferToFlash
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDBToRAM
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitReadState
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateFlashTimeOperation
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Tick
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Erase
</UL>

<P><STRONG><a name="[1c2]"></a>EraseWithTimeCheck</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nvm_db.o(i.EraseWithTimeCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = EraseWithTimeCheck &rArr; NVMDB_TimeCheck &rArr; HAL_VTIMER_GetCurrentSysTime &rArr; TIMER_GetCurrentSysTime &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_Erase
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_TimeCheck
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateFlashTimeOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Tick
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Erase
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinueCleanLargeDB
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLargeDB
</UL>

<P><STRONG><a name="[416]"></a>GetDBType</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nvm_db.o(i.GetDBType))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Erase
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_CleanDB
</UL>

<P><STRONG><a name="[1bd]"></a>InitReadState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nvm_db.o(i.InitReadState))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSmallDB
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanPage
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLargeDB
</UL>

<P><STRONG><a name="[2d7]"></a>InvalidateRecord</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nvm_db.o(i.InvalidateRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = InvalidateRecord &rArr; NVMDB_TimeCheck &rArr; HAL_VTIMER_GetCurrentSysTime &rArr; TIMER_GetCurrentSysTime &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_Program
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_TimeCheck
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateFlashTimeOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Tick
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_DeleteRecordNoCache
</UL>

<P><STRONG><a name="[1be]"></a>LoadDBToRAM</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, nvm_db.o(i.LoadDBToRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNextRecordNoLock
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentRecordNoLock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSmallDB
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinueCleanLargeDB
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanPage
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLargeDB
</UL>

<P><STRONG><a name="[413]"></a>NVMDB_AppendRecordNoCache</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, nvm_db.o(i.NVMDB_AppendRecordNoCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = NVMDB_AppendRecordNoCache &rArr; WriteRecord &rArr; write_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Tick
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_AppendRecord
</UL>

<P><STRONG><a name="[41b]"></a>NVMDB_CleanCheck</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nvm_db.o(i.NVMDB_CleanCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVMDB_CleanCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Tick
</UL>

<P><STRONG><a name="[419]"></a>NVMDB_DeleteRecordNoCache</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, nvm_db.o(i.NVMDB_DeleteRecordNoCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = NVMDB_DeleteRecordNoCache &rArr; InvalidateRecord &rArr; NVMDB_TimeCheck &rArr; HAL_VTIMER_GetCurrentSysTime &rArr; TIMER_GetCurrentSysTime &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvalidateRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_DeleteRecord
</UL>

<P><STRONG><a name="[1c3]"></a>NVMDB_get_info</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, nvm_db.o(i.NVMDB_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVMDB_get_info
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Tick
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Erase
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinueCleanLargeDB
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanPage
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLargeDB
</UL>

<P><STRONG><a name="[41d]"></a>NextRecordNoLock</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, nvm_db.o(i.NextRecordNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecordInCache
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheFindOperation
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNextRecordNoLock
</UL>

<P><STRONG><a name="[401]"></a>ReadCurrentRecordNoLock</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, nvm_db.o(i.ReadCurrentRecordNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ReadCurrentRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecordInCache
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheFindOperation
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_ReadCurrentRecord
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDBToRAM
</UL>

<P><STRONG><a name="[400]"></a>ReadNextRecordNoLock</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, nvm_db.o(i.ReadNextRecordNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextRecordNoLock
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_ReadNextRecord
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDBToRAM
</UL>

<P><STRONG><a name="[417]"></a>ReadRecordInCache</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, nvm_db.o(i.ReadRecordInCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheFindOperation
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_CompareCurrentRecord
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentRecordNoLock
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextRecordNoLock
</UL>

<P><STRONG><a name="[41a]"></a>RemoveCacheOp</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, nvm_db.o(i.RemoveCacheOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RemoveCacheOp &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheGetDataSize
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheFindOperation
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Tick
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Erase
</UL>

<P><STRONG><a name="[1c4]"></a>SchedulePageEraseOperation</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nvm_db.o(i.SchedulePageEraseOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SchedulePageEraseOperation &rArr; CacheRequestBuffer &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheRequestBuffer
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheInsertData
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_Erase
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinueCleanLargeDB
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLargeDB
</UL>

<P><STRONG><a name="[412]"></a>ScheduleWriteOperation</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, nvm_db.o(i.ScheduleWriteOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ScheduleWriteOperation &rArr; CacheRequestBuffer &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheRequestBuffer
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheInsertData
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_AppendRecord
</UL>

<P><STRONG><a name="[1c1]"></a>WriteBufferToFlash</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nvm_db.o(i.WriteBufferToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteBufferToFlash &rArr; LL_FLASH_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_Program
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_Erase
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSmallDB
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinueCleanLargeDB
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanPage
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanLargeDB
</UL>

<P><STRONG><a name="[414]"></a>WriteRecord</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, nvm_db.o(i.WriteRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = WriteRecord &rArr; write_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_Program
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_TimeCheck
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateFlashTimeOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMDB_AppendRecordNoCache
</UL>

<P><STRONG><a name="[46d]"></a>write_data</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nvm_db.o(i.write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = write_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_Program
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecord
</UL>

<P><STRONG><a name="[41f]"></a>__NVIC_SystemReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ota_btl.o(i.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_Jump_To_Service_Manager_Application
</UL>

<P><STRONG><a name="[1a6]"></a>BlueNRG_Stack_Initialize_ConfigData</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Initialize_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BlueNRG_Stack_Initialize_ConfigData &rArr; BLEPLAT_get_part_info &rArr; HAL_GetPartInfo &rArr; LL_GetRAMSize
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_get_part_info
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[1a8]"></a>BlueNRG_Stack_Initialize_Layers</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Initialize_Layers))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BlueNRG_Stack_Initialize_Layers &rArr; BlueNRG_Stack_Initialize_ConfigData &rArr; BLEPLAT_get_part_info &rArr; HAL_GetPartInfo &rArr; LL_GetRAMSize
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_init_context
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[16b]"></a>total_buffer_size_value</STRONG> (Thumb, 324 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.total_buffer_size_value))
<BR><BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_upd_csr_ucfg
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic_csr_ucfg
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcl_csr_ucfg
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_csr_ucfg
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_cos_csr_ucfg
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_adv_scan_enabled_ucfg
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cte_csr_ucfg
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_controller_privacy_csr_ucfg
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_connections_csr_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_Init
</UL>

<P><STRONG><a name="[1ca]"></a>Dynamic_allocator_EVNT</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, events.o(i.Dynamic_allocator_EVNT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Dynamic_allocator_EVNT &rArr; csmem_mem_assign &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_init
</UL>

<P><STRONG><a name="[1ea]"></a>aci_event_fifo_init</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, events.o(i.aci_event_fifo_init))
<BR><BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifoCtrl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_init
</UL>

<P><STRONG><a name="[489]"></a>fifoBuf_getFreeHeader</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, events.o(i.fifoBuf_getFreeHeader))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>

<P><STRONG><a name="[488]"></a>fifoCtrl_init</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, events.o(i.fifoCtrl_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_init
</UL>

<P><STRONG><a name="[200]"></a>GAP_dynamic_allocator</STRONG> (Thumb, 142 bytes, Stack size unknown bytes, gap_common.o(i.GAP_dynamic_allocator))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAP_dynamic_allocator &rArr; csmem_mem_assign &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_init_context
</UL>

<P><STRONG><a name="[20f]"></a>GAP_limited_discoverable_event_check</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, gap_common.o(i.GAP_limited_discoverable_event_check), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_adv_scan_enabled_ucfg
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_slave_connection_complete_handler_ucfg_weak
</UL>

<P><STRONG><a name="[21a]"></a>GAP_set_discoverability_mode</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, gap_slave.o(i.GAP_set_discoverability_mode), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_stop
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_start
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_set_legacy_advertising_enable
</UL>

<P><STRONG><a name="[285]"></a>GAT_srv_aes_cmac_append</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_aes_cmac_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GAT_srv_aes_cmac_append &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Append
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_hash_attr
</UL>

<P><STRONG><a name="[286]"></a>GAT_srv_attr_direct_value_write</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_attr_direct_value_write))
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_extract_write_packet_data
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_attribute_modified_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
</UL>

<P><STRONG><a name="[28b]"></a>GAT_srv_check_sec_perm</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_check_sec_perm))
<BR><BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_link_status
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_check_encryption_key_size
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_perms
</UL>

<P><STRONG><a name="[297]"></a>GAT_srv_find_from_handle_p</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_find_from_handle_p))
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_from_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_disconnection
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_store_to_nvm
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_from_nvm
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_generate_hash
</UL>

<P><STRONG><a name="[294]"></a>GAT_srv_generate_hash</STRONG> (Thumb, 158 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_generate_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = GAT_srv_generate_hash &rArr; AES_CMAC_Encrypt_Finish &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_swap_buffer
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_next
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Finish
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Append
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_hash_attr
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_from_handle_p
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_for_each_conn_descr
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_db_hash_tsk
</UL>

<P><STRONG><a name="[29d]"></a>GAT_srv_get_chr_decl_val</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_chr_decl_val))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_write_to_flat
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
</UL>

<P><STRONG><a name="[29f]"></a>GAT_srv_get_chr_descr_val</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_chr_descr_val))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_val
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_fast_buffer_val
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
</UL>

<P><STRONG><a name="[29e]"></a>GAT_srv_get_chr_val</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_chr_val))
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_zip_val
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_fast_buffer_val
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
</UL>

<P><STRONG><a name="[2a2]"></a>GAT_srv_get_fast_buffer_val</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_fast_buffer_val))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_chr_val
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_chr_descr_val
</UL>

<P><STRONG><a name="[293]"></a>GAT_srv_get_from_nvm</STRONG> (Thumb, 254 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_from_nvm))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = GAT_srv_get_from_nvm &rArr; SDB_read_peer_bonded_data &rArr; SDB_Find_Record &rArr; BleNvm_SEC_GetRecord &rArr; BleNvm_SEC_Dump &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_read_peer_bonded_data
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_next
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_attr_p
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_zip_val
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_cccd_val
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_zip_val
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_from_handle_p
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_descr_p
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_connection
</UL>

<P><STRONG><a name="[29c]"></a>GAT_srv_get_incl_srv_val</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_incl_srv_val))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_handle
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attribute_handle
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_att_group_end_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
</UL>

<P><STRONG><a name="[288]"></a>GAT_srv_get_zip_val</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_zip_val))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_val
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_tx_service_change
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_store_to_nvm
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_from_nvm
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_chr_val
</UL>

<P><STRONG><a name="[299]"></a>GAT_srv_hash_attr</STRONG> (Thumb, 158 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_hash_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GAT_srv_hash_attr &rArr; GAT_srv_aes_cmac_append &rArr; AES_CMAC_Encrypt_Append &rArr; AES_128_HW_enc &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_type
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_aes_cmac_append
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_generate_hash
</UL>

<P><STRONG><a name="[292]"></a>GAT_srv_is_bonded</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_is_bonded))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = GAT_srv_is_bonded &rArr; SMP_check_is_device_bonded &rArr; SDB_Find_Record &rArr; BleNvm_SEC_GetRecord &rArr; BleNvm_SEC_Dump &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_check_is_device_bonded
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_disconnection
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_connection
</UL>

<P><STRONG><a name="[28a]"></a>GAT_srv_set_cccd_val</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_set_cccd_val))
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_zip_val
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_disconnection
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_from_nvm
</UL>

<P><STRONG><a name="[32]"></a>GAT_srv_set_change_unaware</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_set_change_unaware))
<BR>[Address Reference Count : 1]<UL><LI> gat_srv.o(i.GAT_srv_generate_hash)
</UL>
<P><STRONG><a name="[289]"></a>GAT_srv_set_zip_val</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_set_zip_val))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_disconnection
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_store_to_nvm
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_cccd_val
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_from_nvm
</UL>

<P><STRONG><a name="[296]"></a>GAT_srv_store_to_nvm</STRONG> (Thumb, 244 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_store_to_nvm))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = GAT_srv_store_to_nvm &rArr; SDB_write_gatt_client_data &rArr; BleNvm_SEC_RemoveRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_write_gatt_client_data
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_next
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_val
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_zip_val
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_zip_val
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_from_handle_p
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_descr_p
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_disconnection
</UL>

<P><STRONG><a name="[33]"></a>GAT_srv_tx_service_change</STRONG> (Thumb, 158 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_tx_service_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GAT_srv_tx_service_change &rArr; GAT_att_srv_hvtx &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_hvtx
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_val
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_attr_p
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_zip_val
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_srv.o(i.GAT_srv_send_srv_change_tsk)
</UL>
<P><STRONG><a name="[287]"></a>aci_gatt_srv_attribute_modified_event_push</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, gat_srv.o(i.aci_gatt_srv_attribute_modified_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_direct_value_write
</UL>

<P><STRONG><a name="[280]"></a>GAT_srv_char_sanity_check</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, gat_srv_api.o(i.GAT_srv_char_sanity_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_srv_char_sanity_check &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_characteristic
</UL>

<P><STRONG><a name="[27e]"></a>GAT_srv_check_group_size</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, gat_srv_api.o(i.GAT_srv_check_group_size))
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_last_attr_of_type
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_att_group_end_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_characteristic
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_char_descriptor
</UL>

<P><STRONG><a name="[28f]"></a>GAT_srv_checks_for_notify</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, gat_srv_api.o(i.GAT_srv_checks_for_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_srv_checks_for_notify &rArr; GAT_srv_get_cccd_attr_p &rArr; UUID_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_handle
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_val
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_attr_p
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_perms
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_descr_p
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_notify
</UL>

<P><STRONG><a name="[27c]"></a>GAT_srv_db_update_allowed</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, gat_srv_api.o(i.GAT_srv_db_update_allowed))
<BR><BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_request_user_pending
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_flush_user_pending_list
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_confirmation_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_service
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_rm_characteristic
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_service
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_characteristic
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_char_descriptor
</UL>

<P><STRONG><a name="[27d]"></a>GAT_srv_descr_sanity_check</STRONG> (Thumb, 102 bytes, Stack size unknown bytes, gat_srv_api.o(i.GAT_srv_descr_sanity_check))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_add_char_descriptor
</UL>

<P><STRONG><a name="[2ea]"></a>L2C_discard_accumulated_acl_data</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, l2cap.o(i.L2C_discard_accumulated_acl_data))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_receive_data
</UL>

<P><STRONG><a name="[2dd]"></a>L2C_dynamic_allocator</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, l2cap.o(i.L2C_dynamic_allocator))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = L2C_dynamic_allocator &rArr; csmem_mem_assign &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Init
</UL>

<P><STRONG><a name="[2e0]"></a>L2C_get_link_control_block_index</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, l2cap.o(i.L2C_get_link_control_block_index))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_hci_disconnection_complete_evt_hndl
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_acl_cframe_signaling_hndl
</UL>

<P><STRONG><a name="[2e3]"></a>L2C_process_basic_mode_command</STRONG> (Thumb, 268 bytes, Stack size unknown bytes, l2cap.o(i.L2C_process_basic_mode_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = L2C_process_basic_mode_command &rArr; L2C_build_command_reject_pdu &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_req_event_copy
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_command_reject_event_copy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_pre_process_incoming_response_packet
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_post_process_incoming_request_packet
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_build_command_reject_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_acl_cframe_signaling_hndl
</UL>

<P><STRONG><a name="[39d]"></a>LLC_conn_get_opcode</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_connect.o(i.LLC_conn_get_opcode))
<BR><BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[338]"></a>LL_channel_selection_algorithm_2</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, ll_connect.o(i.LL_channel_selection_algorithm_2))
<BR><BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmGetChannelMap
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_pseudo_rand_num_gen
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_modulo_37
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_check_unmapped_channel_in_ch_map
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_latency_cancelation
</UL>

<P><STRONG><a name="[33d]"></a>LL_conn_CSA_2_update_remapped_table</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_CSA_2_update_remapped_table))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
</UL>

<P><STRONG><a name="[33e]"></a>LL_conn_calc_data_packet_time_st</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_calc_data_packet_time_st))
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_guard_time_for_close_conn_event
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[33c]"></a>LL_conn_check_unmapped_channel_in_ch_map</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_check_unmapped_channel_in_ch_map))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_selection_algorithm_2
</UL>

<P><STRONG><a name="[33f]"></a>LL_conn_close_event</STRONG> (Thumb, 150 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_close_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LL_conn_close_event &rArr; LL_conn_reschedule_taskslot_params &rArr; BLECNTR_SmSetChannelMap
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketGetDataPtr
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_active_status
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_tx_done
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[32d]"></a>LL_conn_copy_tx_data_packet</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_copy_tx_data_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_conn_copy_tx_data_packet &rArr; Mem_Buff_block_copy &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_block_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_program_next_taskslot
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[34d]"></a>LL_conn_decrement_enc_count_rx</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_decrement_enc_count_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LL_conn_decrement_enc_count_rx &rArr; BLECNTR_SmSetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetRxCount
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmGetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[343]"></a>LL_conn_get_ctrl_flds_instant</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_ctrl_flds_instant))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_instant_reached
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_instant_passed
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_instant_reached_passed
</UL>

<P><STRONG><a name="[358]"></a>LL_conn_get_ctrl_flds_isr_p</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_ctrl_flds_isr_p))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_enc_on
</UL>

<P><STRONG><a name="[347]"></a>LL_conn_get_ctrl_pdu_ctrl_fld_p</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_ctrl_pdu_ctrl_fld_p))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_tx_ctrl_pdu_state
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_tx_ctrl_pdu_has_instant
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_tx_acl_blocked
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_stop_enc
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_start_enc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_rx_acl_blocked
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_tx_ctrl_pdu_state
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_tx_acl_blocked
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_stop_enc
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_start_enc
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_rx_ctrl_pdu_full
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_rx_acl_blocked
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_tx_acl_blocked
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_stop_enc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_start_enc
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_rx_ctrl_pdu_full
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_rx_acl_blocked
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[38d]"></a>LL_conn_init_cmn_len_upd_params</STRONG> (Thumb, 198 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_init_cmn_len_upd_params))
<BR><BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_upd_csr_ucfg
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cte_csr_ucfg
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_init
</UL>

<P><STRONG><a name="[392]"></a>LL_conn_isr_rx_done</STRONG> (Thumb, 1800 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_isr_rx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = LL_conn_isr_rx_done &rArr; HAL_VTIMER_ClearRadioTimerValue &rArr; TIMER_GetCurrentSysTime &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_GetCurrentSysTime
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_ClearRadioTimerValue
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_upd_csr_ucfg
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmToggleNesn
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetTxCountDirectionBit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetTxCount
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmGetTxPhy
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmGetRxPhy
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmGetRemapChan
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmEncOn
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmEncOff
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetDataPtr
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetCteSamplingEn
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketGetDataPtr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketClrPllTrig
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketClrIncChan
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketClrCteSamplingEn
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_IntGetIntStatusTxOk
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_IntGetIntStatusTimeout
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_IntGetIntStatusRxOk
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_IntGetIntStatusLenErr
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_IntGetIntStatusEncErr
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_IntGetIntStatusCrcErr
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobEnableBlue
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_DemodDelaySt
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_conn_process_rx_cte_ucfg
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_cpid_from_opcode
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_Acl_Data_TX_Cmpl_Queue_Full
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_block_write
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_delete_taskslot
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_pcl_incr_rx_packets_ucfg
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Tx_Cmpl_Pkt_Handler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Rcv_Pkt_Handler
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_tx_ctrl_pdu_state
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_instant_active
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_disconnect_reason
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_receive_data
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_is_slave
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_tx_ctrl_pdu_state
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_tx_acl_blocked
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_stop_enc
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_start_enc
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_rx_ctrl_pdu_full
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_rx_acl_blocked
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_enc_on
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_data_p
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_stop_enc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_start_enc
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le2ByteToInt16
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_get_anchor_point
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_ctrl_fld_p
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_decrement_enc_count_rx
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_copy_tx_data_packet
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_close_event
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_calc_data_packet_time_st
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_conn_get_opcode
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_remove_head
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr
</UL>

<P><STRONG><a name="[391]"></a>LL_conn_isr_tx_done</STRONG> (Thumb, 416 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_isr_tx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = LL_conn_isr_tx_done &rArr; HAL_VTIMER_ClearRadioTimerValue &rArr; TIMER_GetCurrentSysTime &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_GetCurrentSysTime
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_ClearRadioTimerValue
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_upd_csr_ucfg
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetRxCountDirectionBit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetRxCount
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmGetTxPhy
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmGetRxPhy
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmEncOn
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmEncOff
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SetRcvLen
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketGetDataPtr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketClrPllTrig
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketClrIncChan
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_DemodDelaySt
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_delete_taskslot
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_disconnect_reason
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_tx_ctrl_pdu_state
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_stop_enc
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_start_enc
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_stop_enc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_start_enc
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_rx_acl_blocked
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_close_event
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_calc_data_packet_time_st
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_conn_get_opcode
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr
</UL>

<P><STRONG><a name="[33a]"></a>LL_conn_modulo_37</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_modulo_37))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_latency_cancelation
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_selection_algorithm_2
</UL>

<P><STRONG><a name="[328]"></a>LL_conn_slave_latency_cancelation</STRONG> (Thumb, 240 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_slave_latency_cancelation))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetUnmappedChan
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmGetHopIncr
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmGetAccessAddr
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_taskslot_length_anchor
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_calculate_ww
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_modulo_37
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_selection_algorithm_2
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_sleep_latency_cancellation
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>

<P><STRONG><a name="[326]"></a>LL_conn_time_t1_lessthan_t2</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_time_t1_lessthan_t2))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_sleep_latency_cancellation
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>

<P><STRONG><a name="[3b0]"></a>LL_conn_update_cmd_rsp_timer</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_update_cmd_rsp_timer))
<BR><BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_active_status
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_conn_exception_opcode_from_sm
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reschedule_taskslot_params
</UL>

<P><STRONG><a name="[36d]"></a>LL_get_anchor_point</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_connect.o(i.LL_get_anchor_point))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[339]"></a>LL_pseudo_rand_num_gen</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, ll_connect.o(i.LL_pseudo_rand_num_gen))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_selection_algorithm_2
</UL>

<P><STRONG><a name="[374]"></a>hci_le_connection_complete_event_push</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, ll_connect.o(i.hci_le_connection_complete_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
</UL>

<P><STRONG><a name="[373]"></a>hci_le_enhanced_connection_complete_event_push</STRONG> (Thumb, 152 bytes, Stack size unknown bytes, ll_connect.o(i.hci_le_enhanced_connection_complete_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
</UL>

<P><STRONG><a name="[367]"></a>le2ByteToInt16</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_connect.o(i.le2ByteToInt16))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_go_to_connect
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_isr_rx_done
</UL>

<P><STRONG><a name="[3dd]"></a>LL_dtm_get_cntxt_p</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_dtm.o(i.LL_dtm_get_cntxt_p))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_dtm_init
</UL>

<P><STRONG><a name="[1d7]"></a>EADV_start</STRONG> (Thumb, 304 bytes, Stack size unknown bytes, ll_ext_adv.o(i.EADV_start), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_GetCurrentSysTime
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetDataLength
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_reserve_conn_idx
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_release_conn_idx
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_start_extended_ucfg
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_AdvConvStringToSrambledIntWithType
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_release_taskslot
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_is_scheduler_call_pending
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_vPeerPrivateAddress_ucfg
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_vOwnPrivateAddress_ucfg
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_BLUE_SM
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_start_legacy
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_anchor
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_reserve_taskslot
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
</UL>

<P><STRONG><a name="[1e1]"></a>EADV_stop</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, ll_ext_adv.o(i.EADV_stop), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_check_and_call_sched
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_release_conn_idx
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_cancel_request
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Enable
</UL>

<P><STRONG><a name="[119]"></a>EADV_stop_isr</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, ll_ext_adv.o(i.EADV_stop_isr))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_release_conn_idx
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_cancel_request
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
</UL>

<P><STRONG><a name="[30b]"></a>LL_Context_ReturnFree</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, ll_ext_adv.o(i.LL_Context_ReturnFree), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ext_scan_get_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Extented_Advertising_Set_Random_Address
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_set_legacy_advertising_data_ptr
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters
</UL>

<P><STRONG><a name="[31c]"></a>LL_LE_Set_Advertising_Parameters_Default</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, ll_ext_adv.o(i.LL_LE_Set_Advertising_Parameters_Default), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertising_Parameters
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Context_Test_Advertising_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_set_legacy_advertising_data_ptr
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Advertising_Set_Random_Address
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Advertise_Enable
</UL>

<P><STRONG><a name="[1df]"></a>LL_eadv_start_legacy</STRONG> (Thumb, 146 bytes, Stack size unknown bytes, ll_ext_adv.o(i.LL_eadv_start_legacy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_GetCurrentSysTime
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GeTimer2TimeoutForIfs
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_get_tx_common_buffer_p
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_get_rx_common_buffer_p
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Tx
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_Blue_Rx
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_enable_taskslot
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_start
</UL>

<P><STRONG><a name="[106]"></a>UTIL_u8GetNextAdvChannel</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, ll_ext_adv.o(i.UTIL_u8GetNextAdvChannel))
<BR><BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[3e3]"></a>aci_hal_adv_scan_resp_data_update_event_push</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, ll_ext_adv.o(i.aci_hal_adv_scan_resp_data_update_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_set_advertising_data_ptr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_eadv_switchbackupdata_data_struc
</UL>

<P><STRONG><a name="[118]"></a>hci_le_advertising_set_terminated_event_push</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, ll_ext_adv.o(i.hci_le_advertising_set_terminated_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
</UL>

<P><STRONG><a name="[116]"></a>hci_le_connection_complete_event_push</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, ll_ext_adv.o(i.hci_le_connection_complete_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
</UL>

<P><STRONG><a name="[117]"></a>hci_le_enhanced_connection_complete_event_push</STRONG> (Thumb, 152 bytes, Stack size unknown bytes, ll_ext_adv.o(i.hci_le_enhanced_connection_complete_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_skiproutine
</UL>

<P><STRONG><a name="[101]"></a>hci_le_scan_request_received_event_push</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, ll_ext_adv.o(i.hci_le_scan_request_received_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADV_ISR
</UL>

<P><STRONG><a name="[1cb]"></a>Dynamic_allocator_LL</STRONG> (Thumb, 1032 bytes, Stack size unknown bytes, ll_routines.o(i.Dynamic_allocator_LL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Dynamic_allocator_LL &rArr; csmem_mem_assign &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ext_scan_get_cntxt_p
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_get_control_pdu_size
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_0_assign
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_PRIVWHIT_vInit_Struct
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_periodicscan_init_ucfg
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_periodicadv_init_ucfg
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCAN_INIT
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADV_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[3fb]"></a>LL_sched_calculate_priority</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_calculate_priority))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_return_token
</UL>

<P><STRONG><a name="[3f6]"></a>LL_sched_engine_manage_skip_cancel_slot</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_engine_manage_skip_cancel_slot))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_time_t1_ge_t2
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>

<P><STRONG><a name="[3f4]"></a>LL_sched_get_cntxt_common_p</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_get_cntxt_common_p))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_current_taskslot_no
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_next_taskslot
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_next_anchor
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_anchorstretch
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_is_scheduler_call_pending
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine_return_actual_scheduler_margin
</UL>

<P><STRONG><a name="[3f5]"></a>LL_sched_get_cntxt_per_p</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_get_cntxt_per_p))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_per_state
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_done_cb
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_task
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_taskslot_length_interval_anchor
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_taskslot_length_anchor
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_params
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_delete_taskslot
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_return_token
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine_manage_skip_cancel_slot
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_priority
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_cancel_request
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_release_taskslot
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_priority_min
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_anchor
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_reserve_taskslot
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_enable_taskslot
</UL>

<P><STRONG><a name="[3f7]"></a>LL_sched_return_token</STRONG> (Thumb, 272 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_return_token))
<BR><BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_time_t1_lessthan_t2
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_calculate_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>

<P><STRONG><a name="[3fa]"></a>LL_sched_time_t1_lessthan_t2</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_time_t1_lessthan_t2))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_return_token
</UL>

<P><STRONG><a name="[1d4]"></a>Dynamic_allocator_PM</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, pm.o(i.Dynamic_allocator_PM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Dynamic_allocator_PM &rArr; csmem_mem_assign &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Init
</UL>

<P><STRONG><a name="[424]"></a>PM_Check_And_Set</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, pm.o(i.PM_Check_And_Set))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Resize_Pckt_Pdu_Size
</UL>

<P><STRONG><a name="[4f2]"></a>int32ToLe4Byte</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, securitymgr.o(i.int32ToLe4Byte))
<BR><BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_SR_Compute_c1_Confirm_Value
</UL>

<P><STRONG><a name="[500]"></a>smp_Build_AuthReq_Field</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Build_AuthReq_Field))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
</UL>

<P><STRONG><a name="[504]"></a>smp_Build_Pairing_ReqResp_Packet</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Build_Pairing_ReqResp_Packet))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
</UL>

<P><STRONG><a name="[4ff]"></a>smp_Check_Incoming_Pairing_Parameters</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Check_Incoming_Pairing_Parameters))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
</UL>

<P><STRONG><a name="[4e4]"></a>smp_Determine_Key_Association_Method</STRONG> (Thumb, 150 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Determine_Key_Association_Method))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Set_Key_Association_Method
</UL>

<P><STRONG><a name="[44d]"></a>smp_Execute_Actions_wrt_Current_State</STRONG> (Thumb, 320 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Execute_Actions_wrt_Current_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = smp_Execute_Actions_wrt_Current_State &rArr; smp_pairing_completed &rArr; smp_add_pairing_record_to_bonding_database &rArr; BleNvm_SEC_AddRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapIsPrivacySupported
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_SR_Pairing_Phase_2AS1_Start_sc_excerpt_ucfg
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_execute_actions_wrt_state_sc_phase2as2_ucfg
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_execute_actions_wrt_state_sc_phase1to2_ucfg
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State_MI_excerpt_ucfg
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_keys_distribution_start
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_get_security_data_record
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_get_records_count
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_process_state_transition_actions_tsk
</UL>

<P><STRONG><a name="[4ed]"></a>smp_Get_Long_Term_Key</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Get_Long_Term_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = smp_Get_Long_Term_Key &rArr; SDB_Find_Matching_LTK &rArr; BleNvm_SEC_Dump &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_generate_EDIV_recovery_DIV
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_le_long_term_key_response
</UL>

<P><STRONG><a name="[503]"></a>smp_Get_Pairing_Parameters_From_Peer_Packet</STRONG> (Thumb, 134 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Get_Pairing_Parameters_From_Peer_Packet))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
</UL>

<P><STRONG><a name="[4e8]"></a>smp_Keys_Distribution_Send</STRONG> (Thumb, 284 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Keys_Distribution_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = smp_Keys_Distribution_Send &rArr; smp_send_packet &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_IRK
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_local_identity_address
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_CSRK
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_generate_EDIV_recovery_DIV
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[4f1]"></a>smp_LP_SR_Compute_c1_Confirm_Value</STRONG> (Thumb, 342 bytes, Stack size unknown bytes, securitymgr.o(i.smp_LP_SR_Compute_c1_Confirm_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = smp_LP_SR_Compute_c1_Confirm_Value &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_get_current_address
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32ToLe4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
</UL>

<P><STRONG><a name="[44b]"></a>smp_Process_Rx_Packet_wrt_Current_State</STRONG> (Thumb, 102 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Process_Rx_Packet_wrt_Current_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = smp_Process_Rx_Packet_wrt_Current_State &rArr; smp_cmn_pairing_phase_3_keys_receiving &rArr; smp_pairing_completed &rArr; smp_add_pairing_record_to_bonding_database &rArr; BleNvm_SEC_AddRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State_sc_excerpt_ucfg
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt_ucfg
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_Exception_Cases_sc_excerpt_ucfg
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_pairing_phase_3_keys_receiving
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State_SR_excerpt
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_process_pending_rx_packets_tsk
</UL>

<P><STRONG><a name="[4f4]"></a>smp_Process_Rx_Packet_wrt_Current_State_SR_excerpt</STRONG> (Thumb, 260 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Process_Rx_Packet_wrt_Current_State_SR_excerpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = smp_Process_Rx_Packet_wrt_Current_State_SR_excerpt &rArr; smp____SR_PairingRequest_Receive &rArr; smp_add_pairing_record_to_bonding_database &rArr; BleNvm_SEC_AddRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_send
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_find_remote_device_index
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_reset_timer
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[4fb]"></a>smp_Set_Key_Association_Method</STRONG> (Thumb, 106 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Set_Key_Association_Method))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Determine_Key_Association_Method
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
</UL>

<P><STRONG><a name="[4f9]"></a>smp____SR_PairingConfirm_Receive</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, securitymgr.o(i.smp____SR_PairingConfirm_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = smp____SR_PairingConfirm_Receive &rArr; smp_send_packet &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_SR_PairingConfirm_Receive_sc_excerpt_ucfg
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_SR_Compute_c1_Confirm_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State_SR_excerpt
</UL>

<P><STRONG><a name="[4fa]"></a>smp____SR_PairingRandom_Receive</STRONG> (Thumb, 284 bytes, Stack size unknown bytes, securitymgr.o(i.smp____SR_PairingRandom_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = smp____SR_PairingRandom_Receive &rArr; smp_pairing_failed_send &rArr; smp_pairing_2octets_packet_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_SR_PairingRandom_Receive_sc_excerpt_ucfg
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_LP_s1_Generate_STK
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_SR_Compute_c1_Confirm_Value
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32ToLe4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State_SR_excerpt
</UL>

<P><STRONG><a name="[4f8]"></a>smp____SR_PairingRequest_Receive</STRONG> (Thumb, 414 bytes, Stack size unknown bytes, securitymgr.o(i.smp____SR_PairingRequest_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = smp____SR_PairingRequest_Receive &rArr; smp_add_pairing_record_to_bonding_database &rArr; BleNvm_SEC_AddRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_continue_on_exclusive_sc_pairing_ucfg
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_send
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_oob_check_is_remote_data_present
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_add_pairing_record_to_bonding_database
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Set_Key_Association_Method
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Pairing_Parameters_From_Peer_Packet
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Check_Incoming_Pairing_Parameters
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Build_Pairing_ReqResp_Packet
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Build_AuthReq_Field
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State_SR_excerpt
</UL>

<P><STRONG><a name="[43d]"></a>SMP_connection_complete_handler</STRONG> (Thumb, 164 bytes, Stack size unknown bytes, smp_common.o(i.SMP_connection_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMP_connection_complete_handler &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_is_peer_rejectlisted
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_enhanced_connection_complete_evt_hndl
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_connection_complete_evt_hndl
</UL>

<P><STRONG><a name="[43a]"></a>aci_gap_pairing_complete_event_push</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, smp_common.o(i.aci_gap_pairing_complete_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_encryption_change_evt_hndl
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Protocol_Timer_cb
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_process_abort
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
</UL>

<P><STRONG><a name="[43c]"></a>smp_Keys_Distribution_Complete</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, smp_common.o(i.smp_Keys_Distribution_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = smp_Keys_Distribution_Complete &rArr; smp_pairing_completed &rArr; smp_add_pairing_record_to_bonding_database &rArr; BleNvm_SEC_AddRecord &rArr; BLEPLAT_NvmDiscard &rArr; NVMDB_Erase &rArr; EraseSmallDB &rArr; LoadDBToRAM &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_MI_Start_Encryption_ucfg
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_acl_data_hndl
</UL>

<P><STRONG><a name="[437]"></a>smp_dynamic_allocator</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, smp_common.o(i.smp_dynamic_allocator))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_dynamic_allocator &rArr; csmem_mem_assign &rArr; Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csmem_mem_assign
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_rejectlist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Init
</UL>

<P><STRONG><a name="[442]"></a>smp_flush_rx_queues</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, smp_common.o(i.smp_flush_rx_queues))
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_disconnection_complete_evt_hndl
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_process_abort
</UL>

<P><STRONG><a name="[50a]"></a>smp_pairing_process_abort</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, smp_common.o(i.smp_pairing_process_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = smp_pairing_process_abort &rArr; smp_cmn_repeated_attacks_protection_start &rArr; SMP_reset_timer &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_cmn_repeated_attacks_protection_start
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_update_statistics_on_pairing_complete
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_flush_rx_queues
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_find_remote_device_index
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_reset_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_send
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_receive
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
</UL>

<P><STRONG><a name="[43b]"></a>smp_update_statistics_on_pairing_complete</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, smp_common.o(i.smp_update_statistics_on_pairing_complete))
<BR><BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_update_statistics_on_pairing_complete_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_disconnection_complete_evt_hndl
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Protocol_Timer_cb
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_process_abort
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
</UL>

<P><STRONG><a name="[19c]"></a>BleNvm_GATT_SeekRecord</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, stacklib_nvm.o(i.BleNvm_GATT_SeekRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = BleNvm_GATT_SeekRecord &rArr; BLEPLAT_NvmGet &rArr; NVMDB_ReadNextRecord &rArr; ReadNextRecordNoLock &rArr; NextRecordNoLock &rArr; ReadRecordInCache &rArr; CacheFindOperation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmGet
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_GATT_UpdateData
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_GATT_GetData
</UL>

<P><STRONG><a name="[19f]"></a>aci_hal_fw_error_event_push</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, stacklib_nvm.o(i.aci_hal_fw_error_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_SEC_AddRecord
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleNvm_GATT_UpdateData
</UL>

<P><STRONG><a name="[50e]"></a>lsbit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, stacklib_tasks.o(i.lsbit))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_scheduler
</UL>

<P><STRONG><a name="[50c]"></a>tsk_bitmap_init</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, stacklib_tasks.o(i.tsk_bitmap_init))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_init
</UL>

<P><STRONG><a name="[50d]"></a>tsk_bitmap_merge</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, stacklib_tasks.o(i.tsk_bitmap_merge))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_scheduler
</UL>

<P><STRONG><a name="[221]"></a>GAT_att_clt_check_packet</STRONG> (Thumb, 176 bytes, Stack size unknown bytes, gat_att_clt.o(i.GAT_att_clt_check_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_att_clt_check_packet &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
</UL>

<P><STRONG><a name="[6]"></a>GAT_att_clt_unexpect_rx</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, gat_att_clt.o(i.GAT_att_clt_unexpect_rx))
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_clt.o(.data)
</UL>
<P><STRONG><a name="[230]"></a>aci_hal_fw_error_event_push</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, gat_att_clt.o(i.aci_hal_fw_error_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_rcv
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_clt_unexpect_rx
</UL>

<P><STRONG><a name="[247]"></a>GAT_att_db_find_attr_idx_from_handle</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_find_attr_idx_from_handle))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_reverse_find_attr_of_type
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_from_handle
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_with_handle
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_with_conf_def
</UL>

<P><STRONG><a name="[246]"></a>GAT_att_db_find_attr_idx_with_conf_def</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_find_attr_idx_with_conf_def))
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_from_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_def
</UL>

<P><STRONG><a name="[248]"></a>GAT_att_db_find_attr_idx_with_handle</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_find_attr_idx_with_handle))
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_from_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_rm_att_range
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_handle
</UL>

<P><STRONG><a name="[24d]"></a>GAT_att_db_get_att_idx</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_get_att_idx))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_insert
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_next
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_last_group_attribute
</UL>

<P><STRONG><a name="[24c]"></a>GAT_att_db_get_last_group_attribute</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_get_last_group_attribute))
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_att_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_last_group_handle
</UL>

<P><STRONG><a name="[255]"></a>GAT_att_srv_alloc_resp_packt</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_alloc_resp_packt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_alloc_resp_packt &rArr; GAT_att_srv_get_exec_fn_id_by_op &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_descr_p
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Host_Pckt
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_exec_fn_id_by_op
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
</UL>

<P><STRONG><a name="[258]"></a>GAT_att_srv_common_check</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_common_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_common_check &rArr; GAT_att_srv_get_exec_fn_id_by_op &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Host_Pckt
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_handle_range
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_exec_fn_id_by_op
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
</UL>

<P><STRONG><a name="[c7]"></a>GAT_att_srv_confirm_exc</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_confirm_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_confirm_exc &rArr; GAT_att_cmn_stop_timer &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_stop_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>GAT_att_srv_exchange_mtu_exc</STRONG> (Thumb, 190 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_exchange_mtu_exc))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>GAT_att_srv_exec_wr_exc</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_exec_wr_exc))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>GAT_att_srv_find_by_type_val_exc</STRONG> (Thumb, 272 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_find_by_type_val_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_find_by_type_val_exc &rArr; GAT_srv_find_by_type_attr_p &rArr; UUID_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_att_group_end_handle
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Pckt_Cmp
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_value_read
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_handle_range
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>GAT_att_srv_find_info_exc</STRONG> (Thumb, 246 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_find_info_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_find_info_exc &rArr; GAT_srv_check_change_aware &rArr; GAT_srv_find_by_type_attr_p &rArr; UUID_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_next
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_from_handle
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_type
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_get_value_p
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_handle_range
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.constdata)
</UL>
<P><STRONG><a name="[25e]"></a>GAT_att_srv_flush_rx_pckts</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_flush_rx_pckts))
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_disconnection
</UL>

<P><STRONG><a name="[256]"></a>GAT_att_srv_get_exec_fn_id_by_op</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_get_exec_fn_id_by_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_get_exec_fn_id_by_op &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_common_check
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_alloc_resp_packt
</UL>

<P><STRONG><a name="[259]"></a>GAT_att_srv_get_handle_range</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_get_handle_range))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_common_check
</UL>

<P><STRONG><a name="[31]"></a>GAT_att_srv_no_confirm_pending</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_no_confirm_pending))
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(i.GAT_att_srv_confirmation_pending)
</UL>
<P><STRONG><a name="[c5]"></a>GAT_att_srv_prep_wr_exc</STRONG> (Thumb, 242 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_prep_wr_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_prep_wr_exc &rArr; GAT_att_srv_set_attr_value_check &rArr; GAT_srv_check_change_aware &rArr; GAT_srv_find_by_type_attr_p &rArr; UUID_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_set_attr_value_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>GAT_att_srv_read_by_type_exc</STRONG> (Thumb, 474 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_read_by_type_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_read_by_type_exc &rArr; GAT_srv_is_supported_grouping_type &rArr; UUID_cmp_128bits &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_is_supported_grouping_type
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_att_group_end_handle
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_value_read
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_handle_range
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>GAT_att_srv_read_exc</STRONG> (Thumb, 284 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_read_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_read_exc &rArr; GAT_srv_check_change_aware &rArr; GAT_srv_find_by_type_attr_p &rArr; UUID_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_handle_p
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_value_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>GAT_att_srv_read_multi_exc</STRONG> (Thumb, 340 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_read_multi_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_read_multi_exc &rArr; GAT_srv_check_change_aware &rArr; GAT_srv_find_by_type_attr_p &rArr; UUID_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_perms
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_read_event_push
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_handle_p
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.constdata)
</UL>
<P><STRONG><a name="[26e]"></a>GAT_att_srv_run</STRONG> (Thumb, 140 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_run &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_insert_tail
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_send_response
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_exec_fn_id_by_op
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_common_check
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_alloc_resp_packt
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_resp
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_process_rx_pckt_tsk
</UL>

<P><STRONG><a name="[276]"></a>GAT_att_srv_send_response</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Resize_Pckt_Pdu_Size
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_stop_timer
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_send
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_resp
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
</UL>

<P><STRONG><a name="[26d]"></a>GAT_att_srv_set_attr_value_check</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_set_attr_value_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_set_attr_value_check &rArr; GAT_srv_check_change_aware &rArr; GAT_srv_find_by_type_attr_p &rArr; UUID_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_perms
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_handle_p
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_exc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_prep_wr_exc
</UL>

<P><STRONG><a name="[264]"></a>GAT_att_srv_value_read</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_value_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_value_read &rArr; GAT_srv_attr_value_read &rArr; GAT_srv_get_attr_value &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_read
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_read_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_exc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
</UL>

<P><STRONG><a name="[25a]"></a>GAT_att_srv_write_err_packet</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_write_err_packet))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_resp
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_exc
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_exc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_prep_wr_exc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_common_check
</UL>

<P><STRONG><a name="[c4]"></a>GAT_att_srv_write_exc</STRONG> (Thumb, 230 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_write_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_write_exc &rArr; SMP_validate_signed_packet &rArr; sma_CMAC_generate_tag &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_validate_signed_packet
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_set_attr_value_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.constdata)
</UL>
<P><STRONG><a name="[271]"></a>GAT_srv_find_by_handle_p</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_srv_find_by_handle_p))
<BR><BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_set_attr_value_check
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_exc
</UL>

<P><STRONG><a name="[257]"></a>PM_Get_Host_Pckt</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, gat_att_srv.o(i.PM_Get_Host_Pckt))
<BR><BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_hvtx
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_common_check
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_alloc_resp_packt
</UL>

<P><STRONG><a name="[274]"></a>aci_gatt_srv_read_event_push</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, gat_att_srv.o(i.aci_gatt_srv_read_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_value_read
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
</UL>

<P><STRONG><a name="[25f]"></a>aci_hal_fw_error_event_push</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, gat_att_srv.o(i.aci_hal_fw_error_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_rcv
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_exchange_mtu_exc
</UL>

<P><STRONG><a name="[7]"></a>GAT_clt_exec_empty</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, gat_clt.o(i.GAT_clt_exec_empty))
<BR>[Address Reference Count : 1]<UL><LI> gat_clt.o(.data)
</UL>
<P><STRONG><a name="[27a]"></a>GAT_clt_get_proc_per_chandle</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, gat_clt.o(i.GAT_clt_get_proc_per_chandle))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_rcv_corrupted
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_clt_disconnection
</UL>

<P><STRONG><a name="[4c7]"></a>hci_number_of_completed_packets_event_push</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, hci_acl_data.o(i.hci_number_of_completed_packets_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_acl_data_done
</UL>

<P><STRONG><a name="[4ca]"></a>hci_rx_acl_data_event_push</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, hci_acl_data.o(i.hci_rx_acl_data_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data_event_copy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data
</UL>

<P><STRONG><a name="[3ce]"></a>LL_cpe_get_cpf</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_get_cpf))
<BR><BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_p
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4tx
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4ack
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_machine
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
</UL>

<P><STRONG><a name="[3c2]"></a>LL_cpe_get_ctrl_flds_common_p</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_get_ctrl_flds_common_p))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_tx_terminate_in_progress
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_set_unknown_rsp_pending
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4rsp
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_machine
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_reset_state_machines
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_rx_pdu_discarded_by_one_sm
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_active
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_clr_rx_pdu_discarded_by_one_sm
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_tx_terminate_in_progress
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[4ce]"></a>LL_cpe_is_opcode_supporting_instant</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_is_opcode_supporting_instant))
<BR><BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_instant_blocked
</UL>

<P><STRONG><a name="[3ca]"></a>LL_cpe_rxctrlpdu_checkreject</STRONG> (Thumb, 152 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_rxctrlpdu_checkreject))
<BR><BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_cpid_from_opcode
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_cpid_from_sm
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[4cd]"></a>ll_cpe_check_instant_blocked</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_check_instant_blocked))
<BR><BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_instant_supported
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_blocked_status
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_is_opcode_supporting_instant
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4tx
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
</UL>

<P><STRONG><a name="[3c3]"></a>ll_cpe_check_rx_pdu_can_be_processed</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_check_rx_pdu_can_be_processed))
<BR><BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_tx_ctrl_pdu_state
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_rx_ctrl_pdu_full
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4rsp
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_dormant
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[3cc]"></a>ll_cpe_check_tx_terminate_in_progress</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_check_tx_terminate_in_progress))
<BR><BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_tx_ctrl_pdu_state
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_tx_ctrl_pdu_state
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_data_p
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_active
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_ctrl_flds_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[4d1]"></a>ll_cpe_clr_rx_pdu_discarded_by_one_sm</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_clr_rx_pdu_discarded_by_one_sm))
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_ctrl_flds_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4rsp
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_dormant
</UL>

<P><STRONG><a name="[4d0]"></a>ll_cpe_get_active</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_get_active))
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_ctrl_flds_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_machine
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_tx_terminate_in_progress
</UL>

<P><STRONG><a name="[3c4]"></a>ll_cpe_get_blocked_status</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_get_blocked_status))
<BR><BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_active_status
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_other_sm_init_type
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4tx
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_instant_blocked
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[3c0]"></a>ll_cpe_get_cpid_from_sm</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_get_cpid_from_sm))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_conn_exception_opcode_from_sm
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_clr_active
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_conn_get_proc_id_from_sm
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4tx
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4ack
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_machine
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_rxctrlpdu_checkreject
</UL>

<P><STRONG><a name="[3c1]"></a>ll_cpe_get_ctrl_flds_per_sm_p</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_get_ctrl_flds_per_sm_p))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_active_status
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_prepare_tx_pdu
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_clr_active
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_tx_with_instant
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_rx_with_instant
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_blocked
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4tx
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_reset_state_machines
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_instant_supported
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_instant_active
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_blocked_status
</UL>

<P><STRONG><a name="[3c7]"></a>ll_cpe_get_expected_opcode</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_get_expected_opcode))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4rsp
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4ack
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[4d3]"></a>ll_cpe_get_instant_active</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_get_instant_active))
<BR><BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4rsp
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4ack
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_dormant
</UL>

<P><STRONG><a name="[4cf]"></a>ll_cpe_get_instant_supported</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_get_instant_supported))
<BR><BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_instant_blocked
</UL>

<P><STRONG><a name="[4d2]"></a>ll_cpe_get_other_sm_init_type</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_get_other_sm_init_type))
<BR><BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4rsp
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_blocked_status
</UL>

<P><STRONG><a name="[4d4]"></a>ll_cpe_get_rx_pdu_discarded_by_one_sm</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_get_rx_pdu_discarded_by_one_sm))
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_ctrl_flds_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4rsp
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_dormant
</UL>

<P><STRONG><a name="[3c8]"></a>ll_cpe_get_state</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_get_state))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4rsp
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_machine
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_dormant
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[3c5]"></a>ll_cpe_handle_isr_disconnect</STRONG> (Thumb, 170 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_handle_isr_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ll_cpe_handle_isr_disconnect &rArr; LLC_authenticated_payload_timeout_reset &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Tx_Cmpl_Pkt_Handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_release_conn_idx
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_per_init
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_disconnect_reason
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_disconnect_reason
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_init
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_remove_from_ConnIDList
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_past_initialize_connect_context_ucfg
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_reset
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_reset_state_machines
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[4d6]"></a>ll_cpe_process_rx_pdu</STRONG> (Thumb, 364 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_process_rx_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ll_cpe_process_rx_pdu &rArr; valid_first_opcode &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_cpid_from_opcode
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_active_status
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_data_p
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_rx_ctrl_pdu_full
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valid_first_opcode
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_set_expected_opcode
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_state
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_other_sm_init_type
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_instant_supported
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_expected_opcode
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_cpid_from_sm
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_blocked_status
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_instant_blocked
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_rxctrlpdu_checkreject
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_is_opcode_supporting_instant
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cpf
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4rsp
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_dormant
</UL>

<P><STRONG><a name="[3d5]"></a>ll_cpe_reset_state_machines</STRONG> (Thumb, 118 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_reset_state_machines))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_ctrl_flds_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_init
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_handle_isr_disconnect
</UL>

<P><STRONG><a name="[4d7]"></a>ll_cpe_set_expected_opcode</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_set_expected_opcode))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4tx
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4ack
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
</UL>

<P><STRONG><a name="[4d8]"></a>ll_cpe_state_dormant</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_state_dormant))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ll_cpe_state_dormant &rArr; ll_cpe_process_rx_pdu &rArr; valid_first_opcode &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_active_status
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_data_p
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_state
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_rx_pdu_discarded_by_one_sm
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_instant_active
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_clr_rx_pdu_discarded_by_one_sm
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_rx_pdu_can_be_processed
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_machine
</UL>

<P><STRONG><a name="[3cd]"></a>ll_cpe_state_machine</STRONG> (Thumb, 298 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ll_cpe_state_machine &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_tx_ctrl_pdu_state
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_tx_ctrl_pdu_state
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_instant_reached
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_instant_passed
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_data_p
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_instant_reached_passed
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4tx
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4rsp
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_wait4ack
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_dormant
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_state
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_cpid_from_sm
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_active
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_ctrl_flds_common_p
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cpf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[4da]"></a>ll_cpe_state_wait4ack</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_state_wait4ack))
<BR><BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_active_status
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_tx_ctrl_pdu_state
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_tx_ctrl_pdu_state
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_set_expected_opcode
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_instant_active
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_expected_opcode
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_cpid_from_sm
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cpf
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_machine
</UL>

<P><STRONG><a name="[4db]"></a>ll_cpe_state_wait4rsp</STRONG> (Thumb, 158 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_state_wait4rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ll_cpe_state_wait4rsp &rArr; ll_cpe_process_rx_pdu &rArr; valid_first_opcode &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_active_status
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_data_p
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_state
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_rx_pdu_discarded_by_one_sm
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_other_sm_init_type
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_instant_active
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_expected_opcode
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_clr_rx_pdu_discarded_by_one_sm
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_rx_pdu_can_be_processed
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_ctrl_flds_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_machine
</UL>

<P><STRONG><a name="[4d9]"></a>ll_cpe_state_wait4tx</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, ll_cpe.o(i.ll_cpe_state_wait4tx))
<BR><BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_active_status
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_tx_ctrl_pdu_state
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_tx_ctrl_pdu_state
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_data_p
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_set_expected_opcode
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_ctrl_flds_per_sm_p
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_cpid_from_sm
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_get_blocked_status
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_check_instant_blocked
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_cpf
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_state_machine
</UL>

<P><STRONG><a name="[3cb]"></a>valid_first_opcode</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, ll_cpe.o(i.valid_first_opcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = valid_first_opcode &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cpe_process_rx_pdu
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[3c6]"></a>valid_opcode</STRONG> (Thumb, 140 bytes, Stack size unknown bytes, ll_cpe.o(i.valid_opcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = valid_opcode &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_upd_csr_ucfg
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic_csr_ucfg
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcl_csr_ucfg
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cte_csr_ucfg
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_engine
</UL>

<P><STRONG><a name="[42b]"></a>Reclassify_channel</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, ll_cpf_channel_map_update.o(i.Reclassify_channel))
<BR><BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_active_status
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_set_ch_classification_pending
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_clr_ch_classification_pending
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_prepare_tx_pdu
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_Update_Offline_Processing
</UL>

<P><STRONG><a name="[3e6]"></a>hci_encryption_change_event_push</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, ll_cpf_encryption.o(i.hci_encryption_change_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[3e7]"></a>hci_encryption_key_refresh_complete_event_push</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, ll_cpf_encryption.o(i.hci_encryption_key_refresh_complete_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[3e4]"></a>le3ByteToInt32</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_cpf_encryption.o(i.le3ByteToInt32))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[3e5]"></a>le4ByteToInt32</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, ll_cpf_encryption.o(i.le4ByteToInt32))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_encryption
</UL>

<P><STRONG><a name="[2fd]"></a>LLC_authenticated_payload_timeout_start_le_ping</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, ll_cpf_le_ping.o(i.LLC_authenticated_payload_timeout_start_le_ping))
<BR><BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_active_status
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_wait_resource_idx
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_prepare_tx_pdu
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_active
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_cb
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_authenticated_payload_timeout_processing
</UL>

<P><STRONG><a name="[3ee]"></a>LL_priv_Innerlist_size</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_priv_Innerlist_size))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_AddAddrInEachList
</UL>

<P><STRONG><a name="[3f2]"></a>LL_priv_RemoveAddrInEachListIndex</STRONG> (Thumb, 276 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_priv_RemoveAddrInEachListIndex))
<BR><BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_priv_remove_from_ConnIDList
</UL>

<P><STRONG><a name="[451]"></a>sma_Calculate_Hash</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, smp_algo_sap.o(i.sma_Calculate_Hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = sma_Calculate_Hash &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Resolvable_Private_Address
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Resolve_Private_Address
</UL>

<P><STRONG><a name="[4e2]"></a>sma_generate_subkeys</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, smp_algo_sap.o(i.sma_generate_subkeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = sma_generate_subkeys &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_left_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
</UL>

<P><STRONG><a name="[4e3]"></a>sma_left_shift</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, smp_algo_sap.o(i.sma_left_shift))
<BR><BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_generate_subkeys
</UL>

<P><STRONG><a name="[1b6]"></a>Timer_StartFirstActive_sysT</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, stacklib_timers.o(i.Timer_StartFirstActive_sysT))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCurrentSysTime
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_StopTimer
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_StartTimerSysTime
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_start
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_TryStartFirstActive
</UL>

<P><STRONG><a name="[1b7]"></a>Timer_TryStartFirstActive</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, stacklib_timers.o(i.Timer_TryStartFirstActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_StopTimer
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartFirstActive_sysT
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cst_sharedCallback
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_stop
</UL>

<P><STRONG><a name="[121]"></a>AESstdInitEnc</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, crypto.o(i.AESstdInitEnc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AESstdInitEnc
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Init
</UL>

<P><STRONG><a name="[3ea]"></a>hci_le_read_remote_used_features_complete_event_push</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, ll_cpf_feature_exchange.o(i.hci_le_read_remote_used_features_complete_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_feature_exchange
</UL>

<P><STRONG><a name="[3fc]"></a>hci_read_remote_version_information_complete_event_push</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, ll_cpf_version_exchange.o(i.hci_read_remote_version_information_complete_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_remote_version_information_complete_event_copy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_version_exchange
</UL>

<P><STRONG><a name="[29]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[f5]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[f2]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[e3]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<HR></body></html>
